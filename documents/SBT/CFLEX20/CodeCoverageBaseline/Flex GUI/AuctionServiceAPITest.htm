<HTML><HEAD><META CONTENT="text/html; charset=UTF-8" HTTP-EQUIV="Content-Type"/><TITLE>EMMA Coverage Report</TITLE><STYLE TYPE="text/css"> TABLE,TD,TH {border-style:solid; border-color:black;} TD,TH {background:white;margin:0;line-height:100%;padding-left:0.5em;padding-right:0.5em;} TD {border-width:0 1px 0 0;} TH {border-width:1px 1px 1px 0;} TR TD.h {color:red;} TABLE {border-spacing:0; border-collapse:collapse;border-width:0 0 1px 1px;} P,H1,H2,H3,TH {font-family:verdana,arial,sans-serif;font-size:10pt;} TD {font-family:courier,monospace;font-size:10pt;} TABLE.hdft {border-spacing:0;border-collapse:collapse;border-style:none;} TABLE.hdft TH,TABLE.hdft TD {border-style:none;line-height:normal;} TABLE.hdft TH.tl,TABLE.hdft TD.tl {background:#6699CC;color:white;} TABLE.hdft TD.nv {background:#6633DD;color:white;} .nv A:link {color:white;} .nv A:visited {color:white;} .nv A:active {color:yellow;} TABLE.hdft A:link {color:white;} TABLE.hdft A:visited {color:white;} TABLE.hdft A:active {color:yellow;} .in {color:#356085;} TABLE.s TD {padding-left:0.25em;padding-right:0.25em;} TABLE.s TD.l {padding-left:0.25em;padding-right:0.25em;text-align:right;background:#F0F0F0;} TABLE.s TR.z TD {background:#FF9999;} TABLE.s TR.p TD {background:#FFFF88;} TABLE.s TR.c TD {background:#CCFFCC;} A:link {color:#0000EE;text-decoration:none;} A:visited {color:#0000EE;text-decoration:none;} A:hover {color:#0000EE;text-decoration:underline;} TABLE.cn {border-width:0 0 1px 0;} TABLE.s {border-width:1px 0 1px 1px;} TD.h {color:red;border-width:0 1px 0 0;} TD.f {border-width:0 1px 0 1px;} TD.hf {color:red;border-width:0 1px 0 1px;} TH.f {border-width:1px 1px 1px 1px;} TR.cis TD {background:#F0F0F0;} TR.cis TD {border-width:1px 1px 1px 0;} TR.cis TD.h {color:red;border-width:1px 1px 1px 0;} TR.cis TD.f {border-width:1px 1px 1px 1px;} TR.cis TD.hf {color:red;border-width:1px 1px 1px 1px;} TD.b {border-style:none;background:transparent;line-height:50%;}  TD.bt {border-width:1px 0 0 0;background:transparent;line-height:50%;} TR.o TD {background:#F0F0F0;}TABLE.it {border-style:none;}TABLE.it TD,TABLE.it TH {border-style:none;}</STYLE></HEAD><BODY><TABLE CLASS="hdft" CELLSPACING="0" WIDTH="100%"><TR><TH CLASS="tl"><A HREF="http://www.eclemma.org/">EMMA</A> Coverage Report (generated Thu Jun 02 15:01:35 CDT 2011)</TH></TR><TR><TD CLASS="nv">[<A HREF="../AuctionEventListenerTest.html">all classes</A>][<A HREF="14.html">com.cboe.presentation.translator</A>]</TD></TR></TABLE><H2>COVERAGE SUMMARY FOR SOURCE FILE [<SPAN CLASS="in">AuctionServiceAPITest.java</SPAN>]</H2><TABLE CELLSPACING="0" WIDTH="100%"><TR><TH>name</TH><TH>class, %</TH><TH>method, %</TH><TH>block, %</TH><TH>line, %</TH></TR><TR><TD>AuctionServiceAPITest.java</TD><TD>100% (1/1)</TD><TD>100% (16/16)</TD><TD CLASS="h">67%  (422/626)</TD><TD CLASS="h">61%  (88/145)</TD></TR></TABLE><H3>COVERAGE BREAKDOWN BY CLASS AND METHOD</H3><TABLE CLASS="cn" CELLSPACING="0" WIDTH="100%"><TR><TH CLASS="f">name</TH><TH>class, %</TH><TH>method, %</TH><TH>block, %</TH><TH>line, %</TH></TR><TR><TD CLASS="b"> </TD><TD CLASS="b"> </TD><TD CLASS="b"> </TD><TD CLASS="b"> </TD><TD CLASS="b"> </TD></TR><TR CLASS="cis"><TD CLASS="f">class <A HREF="#0">AuctionServiceAPITest</A></TD><TD>100% (1/1)</TD><TD>100% (16/16)</TD><TD CLASS="h">67%  (422/626)</TD><TD CLASS="h">61%  (88/145)</TD></TR><TR><TD CLASS="f"><A HREF="#1">testGetAllAuctions_3 (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD CLASS="h">9%   (5/54)</TD><TD CLASS="h">21%  (3/14)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#2">testRequestForAuction_2 (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD CLASS="h">14%  (5/36)</TD><TD CLASS="h">25%  (3/12)</TD></TR><TR><TD CLASS="f"><A HREF="#3">testRequestForAuction_3 (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD CLASS="h">14%  (5/36)</TD><TD CLASS="h">25%  (3/12)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#4">testRequestForStrategyAuction_2 (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD CLASS="h">14%  (5/36)</TD><TD CLASS="h">25%  (3/12)</TD></TR><TR><TD CLASS="f"><A HREF="#5">testRequestForStrategyAuction_3 (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD CLASS="h">14%  (5/36)</TD><TD CLASS="h">25%  (3/12)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#6">testWithdrawFromAuction_3 (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD CLASS="h">14%  (5/36)</TD><TD CLASS="h">23%  (3/13)</TD></TR><TR><TD CLASS="f"><A HREF="#0">AuctionServiceAPITest (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (3/3)</TD><TD>100% (1/1)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#8">setUp (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (115/115)</TD><TD>100% (18/18)</TD></TR><TR><TD CLASS="f"><A HREF="#9">tearDown (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (7/7)</TD><TD>100% (3/3)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#a">testConnect (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (17/17)</TD><TD>100% (4/4)</TD></TR><TR><TD CLASS="f"><A HREF="#b">testGetAllAuctions_1 (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (63/63)</TD><TD>100% (9/9)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#c">testGetAllAuctions_2 (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (63/63)</TD><TD>100% (9/9)</TD></TR><TR><TD CLASS="f"><A HREF="#d">testRequestForAuction_1 (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (32/32)</TD><TD>100% (6/6)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#e">testRequestForStrategyAuction_1 (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (32/32)</TD><TD>100% (6/6)</TD></TR><TR><TD CLASS="f"><A HREF="#f">testWithdrawFromAuction_1 (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (30/30)</TD><TD>100% (7/7)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#10">testWithdrawFromAuction_2 (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (30/30)</TD><TD>100% (7/7)</TD></TR></TABLE><P></P><TABLE CLASS="s" CELLSPACING="0" WIDTH="100%"><TR><TD CLASS="l">1</TD><TD>package com.cboe.presentation.translator;</TD></TR><TR><TD CLASS="l">2</TD><TD> </TD></TR><TR><TD CLASS="l">3</TD><TD>import static org.mockito.Matchers.anyString;</TD></TR><TR><TD CLASS="l">4</TD><TD>import static org.mockito.Mockito.doNothing;</TD></TR><TR><TD CLASS="l">5</TD><TD>import static org.mockito.Mockito.doReturn;</TD></TR><TR><TD CLASS="l">6</TD><TD>import static org.mockito.Mockito.mock;</TD></TR><TR><TD CLASS="l">7</TD><TD>import static org.mockito.Mockito.spy;</TD></TR><TR><TD CLASS="l">8</TD><TD> </TD></TR><TR><TD CLASS="l">9</TD><TD>import java.util.HashMap;</TD></TR><TR><TD CLASS="l">10</TD><TD>import java.util.Map;</TD></TR><TR><TD CLASS="l">11</TD><TD>import java.util.concurrent.TimeoutException;</TD></TR><TR><TD CLASS="l">12</TD><TD> </TD></TR><TR><TD CLASS="l">13</TD><TD>import org.cometd.bayeux.client.ClientSessionChannel;</TD></TR><TR><TD CLASS="l">14</TD><TD>import org.cometd.client.BayeuxClient;</TD></TR><TR><TD CLASS="l">15</TD><TD> </TD></TR><TR><TD CLASS="l">16</TD><TD>import com.cboe.exceptions.AuthorizationException;</TD></TR><TR><TD CLASS="l">17</TD><TD>import com.cboe.exceptions.CommunicationException;</TD></TR><TR><TD CLASS="l">18</TD><TD>import com.cboe.exceptions.DataValidationException;</TD></TR><TR><TD CLASS="l">19</TD><TD>import com.cboe.exceptions.SystemException;</TD></TR><TR><TD CLASS="l">20</TD><TD>import com.cboe.idl.cmiOrder.AuctionRequestStruct;</TD></TR><TR><TD CLASS="l">21</TD><TD>import com.cboe.idl.cmiOrder.AuctionStruct;</TD></TR><TR><TD CLASS="l">22</TD><TD>import com.cboe.idl.cmiOrder.OrderDetailStruct;</TD></TR><TR><TD CLASS="l">23</TD><TD>import com.cboe.idl.cmiOrder.StrategyAuctionRequestStruct;</TD></TR><TR><TD CLASS="l">24</TD><TD>import com.cboe.idl.cmiUtil.CboeIdStruct;</TD></TR><TR><TD CLASS="l">25</TD><TD>import com.cboe.idl.cmiUtil.TimeStruct;</TD></TR><TR><TD CLASS="l">26</TD><TD>import com.cboe.presentation.api.FlexAPIFactoryImpl;</TD></TR><TR><TD CLASS="l">27</TD><TD>import com.cboe.presentation.api.FlexAPIHome;</TD></TR><TR><TD CLASS="l">28</TD><TD>import com.cboe.presentation.cflex.HomeBuilder;</TD></TR><TR><TD CLASS="l">29</TD><TD>import com.cboe.presentation.session.ClientSessionImpl;</TD></TR><TR><TD CLASS="l">30</TD><TD>import com.cboe.presentation.threading.Result;</TD></TR><TR><TD CLASS="l">31</TD><TD>import com.cboe.util.channel.ChannelEvent;</TD></TR><TR><TD CLASS="l">32</TD><TD>import com.cboe.util.event.EventChannelListener;</TD></TR><TR><TD CLASS="l"><A NAME="0">33</A></TD><TD>import com.cboe.webCas.util.WebCasConstants;</TD></TR><TR><TD CLASS="l">34</TD><TD> </TD></TR><TR><TD CLASS="l">35</TD><TD>import junit.framework.TestCase;</TD></TR><TR><TD CLASS="l">36</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">37</TD><TD>public class AuctionServiceAPITest extends TestCase</TD></TR><TR><TD CLASS="l">38</TD><TD>{</TD></TR><TR><TD CLASS="l">39</TD><TD>        FlexAPIFactoryImpl factory;</TD></TR><TR><TD CLASS="l">40</TD><TD>        AuctionServiceAPI api;</TD></TR><TR><TD CLASS="l">41</TD><TD>        ClientSessionImpl clientSession;</TD></TR><TR><TD CLASS="l"><A NAME="8">42</A></TD><TD>        BayeuxClient client;</TD></TR><TR><TD CLASS="l">43</TD><TD>        Result result,res;</TD></TR><TR><TD CLASS="l">44</TD><TD>        protected void setUp() throws Exception</TD></TR><TR><TD CLASS="l">45</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">46</TD><TD>                System.setProperty(&#34;ClientProperties&#34;, &#34;V:/flexgui/release/flexgui/etc/SbtFlexGui.properties&#34;);</TD></TR><TR CLASS="c"><TD CLASS="l">47</TD><TD>                HomeBuilder.initialize();</TD></TR><TR CLASS="c"><TD CLASS="l">48</TD><TD>                factory = mock(FlexAPIFactoryImpl.class);</TD></TR><TR CLASS="c"><TD CLASS="l">49</TD><TD>                api = spy(new AuctionServiceAPI());</TD></TR><TR CLASS="c"><TD CLASS="l">50</TD><TD>                clientSession = mock(ClientSessionImpl.class);</TD></TR><TR CLASS="c"><TD CLASS="l">51</TD><TD>                client = mock(BayeuxClient.class);</TD></TR><TR CLASS="c"><TD CLASS="l">52</TD><TD>                FlexAPIHome.setFlexAPIFactoryForTesting(factory);</TD></TR><TR CLASS="c"><TD CLASS="l">53</TD><TD>                doReturn(api).when(factory).findAuctionServiceAPI();</TD></TR><TR CLASS="c"><TD CLASS="l">54</TD><TD>                doReturn(clientSession).when(factory).getClientSession();</TD></TR><TR CLASS="c"><TD CLASS="l">55</TD><TD>                doReturn(client).when(clientSession).getClient();</TD></TR><TR CLASS="c"><TD CLASS="l">56</TD><TD>                doReturn((long) 1).when(clientSession).getTimeoutValue();</TD></TR><TR CLASS="c"><TD CLASS="l">57</TD><TD>                doReturn((long) 1).when(clientSession).getLongTimeoutValue();</TD></TR><TR CLASS="c"><TD CLASS="l">58</TD><TD>                doReturn(&#34;ID&#34;).when(clientSession).createMessageId(anyString());</TD></TR><TR CLASS="c"><TD CLASS="l">59</TD><TD>                doNothing().when(clientSession).sendDataToWebCas(WebCasConstants.Channel.LOGIN_CHANNEL, new HashMap&lt;String, Object&gt;());</TD></TR><TR><TD CLASS="l">60</TD><TD>                </TD></TR><TR CLASS="c"><TD CLASS="l">61</TD><TD>                result = new Result&lt;Map&lt;String, Object&gt;&gt;();</TD></TR><TR CLASS="c"><TD CLASS="l">62</TD><TD>                res = spy(result);</TD></TR><TR CLASS="c"><TD CLASS="l">63</TD><TD>                doReturn(res).when(api).getNewResult();</TD></TR><TR><TD CLASS="l">64</TD><TD>                </TD></TR><TR CLASS="c"><TD CLASS="l">65</TD><TD>        }</TD></TR><TR><TD CLASS="l"><A NAME="9">66</A></TD><TD> </TD></TR><TR><TD CLASS="l">67</TD><TD>        @Override</TD></TR><TR><TD CLASS="l">68</TD><TD>        protected void tearDown() throws Exception</TD></TR><TR><TD CLASS="l">69</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">70</TD><TD>                factory = null;</TD></TR><TR CLASS="c"><TD CLASS="l">71</TD><TD>                api = null;</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="b">72</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">73</TD><TD>        </TD></TR><TR><TD CLASS="l">74</TD><TD>        public void testGetAllAuctions_1() throws SystemException, DataValidationException, CommunicationException, AuthorizationException</TD></TR><TR><TD CLASS="l">75</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">76</TD><TD>                int[] classKey = new int[]{1};</TD></TR><TR CLASS="c"><TD CLASS="l">77</TD><TD>                short[] auctionTypes = new short[]{9};</TD></TR><TR CLASS="c"><TD CLASS="l">78</TD><TD>                Object[] obj = new Object[] {new AuctionStruct(), new AuctionStruct()};</TD></TR><TR CLASS="c"><TD CLASS="l">79</TD><TD>                Map&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();</TD></TR><TR CLASS="c"><TD CLASS="l">80</TD><TD>                data.put(WebCasConstants.MESSAGE_ID, &#34;ID&#34;);</TD></TR><TR CLASS="c"><TD CLASS="l">81</TD><TD>                data.put(WebCasConstants.ResultType.RESULT, obj);</TD></TR><TR CLASS="c"><TD CLASS="l">82</TD><TD>                res.postResult(data);</TD></TR><TR><TD CLASS="l">83</TD><TD>                </TD></TR><TR CLASS="c"><TD CLASS="l">84</TD><TD>                api.getAllAuctions(new TimeStruct(), new TimeStruct(), classKey, &#34;FLEX_MAIN&#34;, (short)1, auctionTypes);</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="c">85</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">86</TD><TD>        </TD></TR><TR><TD CLASS="l">87</TD><TD>        public void testGetAllAuctions_2() throws SystemException, DataValidationException, CommunicationException, AuthorizationException</TD></TR><TR><TD CLASS="l">88</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">89</TD><TD>                int[] classKey = new int[]{1};</TD></TR><TR CLASS="c"><TD CLASS="l">90</TD><TD>                short[] auctionTypes = new short[]{9};</TD></TR><TR CLASS="c"><TD CLASS="l">91</TD><TD>                Object[] obj = new Object[] {new AuctionStruct(), new AuctionStruct()};</TD></TR><TR CLASS="c"><TD CLASS="l">92</TD><TD>                Map&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();</TD></TR><TR CLASS="c"><TD CLASS="l">93</TD><TD>                data.put(WebCasConstants.MESSAGE_ID, &#34;ID&#34;);</TD></TR><TR CLASS="c"><TD CLASS="l">94</TD><TD>                data.put(WebCasConstants.ResultType.RESULT, null);</TD></TR><TR CLASS="c"><TD CLASS="l">95</TD><TD>                res.postResult(data);</TD></TR><TR><TD CLASS="l">96</TD><TD>                </TD></TR><TR CLASS="c"><TD CLASS="l">97</TD><TD>                api.getAllAuctions(new TimeStruct(), new TimeStruct(), classKey, &#34;FLEX_MAIN&#34;, (short)1, auctionTypes);</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="1">98</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">99</TD><TD>        </TD></TR><TR><TD CLASS="l">100</TD><TD>        public void testGetAllAuctions_3()</TD></TR><TR><TD CLASS="l">101</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">102</TD><TD>                int[] classKey = new int[]{1};</TD></TR><TR CLASS="z"><TD CLASS="l">103</TD><TD>                short[] auctionTypes = new short[]{9};</TD></TR><TR CLASS="z"><TD CLASS="l">104</TD><TD>                res.postException(new SystemException());</TD></TR><TR><TD CLASS="l">105</TD><TD>                </TD></TR><TR><TD CLASS="l">106</TD><TD>                try</TD></TR><TR><TD CLASS="l">107</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">108</TD><TD>                api.getAllAuctions(new TimeStruct(), new TimeStruct(), classKey, &#34;FLEX_MAIN&#34;, (short)1, auctionTypes);</TD></TR><TR CLASS="z"><TD CLASS="l">109</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">110</TD><TD>        }</TD></TR><TR CLASS="c"><TD CLASS="l">111</TD><TD>        catch (SystemException e)</TD></TR><TR><TD CLASS="l">112</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">113</TD><TD>                assertTrue(true);</TD></TR><TR><TD CLASS="l">114</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">115</TD><TD>        catch (DataValidationException e)</TD></TR><TR><TD CLASS="l">116</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">117</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">118</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">119</TD><TD>        catch (CommunicationException e)</TD></TR><TR><TD CLASS="l">120</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">121</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">122</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">123</TD><TD>        catch (AuthorizationException e)</TD></TR><TR><TD CLASS="l">124</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">125</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">126</TD><TD>        }</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="f">127</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">128</TD><TD>        </TD></TR><TR><TD CLASS="l">129</TD><TD>        public void testWithdrawFromAuction_1() throws SystemException, DataValidationException, CommunicationException, AuthorizationException</TD></TR><TR><TD CLASS="l">130</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">131</TD><TD>                CboeIdStruct id = new CboeIdStruct();</TD></TR><TR CLASS="c"><TD CLASS="l">132</TD><TD>                Map&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();</TD></TR><TR CLASS="c"><TD CLASS="l">133</TD><TD>                data.put(WebCasConstants.MESSAGE_ID, &#34;ID&#34;);</TD></TR><TR CLASS="c"><TD CLASS="l">134</TD><TD>                data.put(WebCasConstants.ResultType.RESULT, &#34;SUCCESS&#34;);</TD></TR><TR CLASS="c"><TD CLASS="l">135</TD><TD>                res.postResult(data);</TD></TR><TR><TD CLASS="l">136</TD><TD>                </TD></TR><TR CLASS="c"><TD CLASS="l">137</TD><TD>                api.withdrawFromAuction(&#34;FLEX_MAIN&#34;, 1, id);</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="10">138</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">139</TD><TD>        </TD></TR><TR><TD CLASS="l">140</TD><TD>        public void testWithdrawFromAuction_2() throws SystemException, DataValidationException, CommunicationException, AuthorizationException</TD></TR><TR><TD CLASS="l">141</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">142</TD><TD>                CboeIdStruct id = new CboeIdStruct();</TD></TR><TR CLASS="c"><TD CLASS="l">143</TD><TD>                Map&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();</TD></TR><TR CLASS="c"><TD CLASS="l">144</TD><TD>                data.put(WebCasConstants.MESSAGE_ID, &#34;ID&#34;);</TD></TR><TR CLASS="c"><TD CLASS="l">145</TD><TD>                data.put(WebCasConstants.ResultType.RESULT, &#34;FAILED&#34;);</TD></TR><TR CLASS="c"><TD CLASS="l">146</TD><TD>                res.postResult(data);</TD></TR><TR><TD CLASS="l">147</TD><TD>                </TD></TR><TR CLASS="c"><TD CLASS="l">148</TD><TD>                api.withdrawFromAuction(&#34;FLEX_MAIN&#34;, 1, id);</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="6">149</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">150</TD><TD>        </TD></TR><TR><TD CLASS="l">151</TD><TD>        public void testWithdrawFromAuction_3()</TD></TR><TR><TD CLASS="l">152</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">153</TD><TD>                CboeIdStruct id = new CboeIdStruct();</TD></TR><TR CLASS="z"><TD CLASS="l">154</TD><TD>                res.postException(new SystemException());</TD></TR><TR><TD CLASS="l">155</TD><TD>                </TD></TR><TR><TD CLASS="l">156</TD><TD>                try</TD></TR><TR><TD CLASS="l">157</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">158</TD><TD>                        api.withdrawFromAuction(&#34;FLEX_MAIN&#34;, 1, id);</TD></TR><TR CLASS="z"><TD CLASS="l">159</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">160</TD><TD>        }</TD></TR><TR CLASS="c"><TD CLASS="l">161</TD><TD>        catch (SystemException e)</TD></TR><TR><TD CLASS="l">162</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">163</TD><TD>                assertTrue(true);</TD></TR><TR><TD CLASS="l">164</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">165</TD><TD>        catch (DataValidationException e)</TD></TR><TR><TD CLASS="l">166</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">167</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">168</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">169</TD><TD>        catch (CommunicationException e)</TD></TR><TR><TD CLASS="l">170</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">171</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">172</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">173</TD><TD>        catch (AuthorizationException e)</TD></TR><TR><TD CLASS="l">174</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">175</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">176</TD><TD>        }</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="d">177</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">178</TD><TD>        </TD></TR><TR><TD CLASS="l">179</TD><TD>        public void testRequestForAuction_1() throws SystemException, DataValidationException, CommunicationException, AuthorizationException</TD></TR><TR><TD CLASS="l">180</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">181</TD><TD>                Map&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();</TD></TR><TR CLASS="c"><TD CLASS="l">182</TD><TD>                data.put(WebCasConstants.MESSAGE_ID, &#34;ID&#34;);</TD></TR><TR CLASS="c"><TD CLASS="l">183</TD><TD>                data.put(WebCasConstants.ResultType.RESULT, new AuctionStruct());</TD></TR><TR CLASS="c"><TD CLASS="l">184</TD><TD>                res.postResult(data);</TD></TR><TR><TD CLASS="l">185</TD><TD>                </TD></TR><TR CLASS="c"><TD CLASS="l">186</TD><TD>                api.requestForAuction(new AuctionRequestStruct(), new TimeStruct());</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="2">187</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">188</TD><TD>        </TD></TR><TR><TD CLASS="l">189</TD><TD>        public void testRequestForAuction_2() throws SystemException, DataValidationException, CommunicationException, AuthorizationException</TD></TR><TR><TD CLASS="l">190</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">191</TD><TD>                res.postException(new TimeoutException());</TD></TR><TR><TD CLASS="l">192</TD><TD>                try</TD></TR><TR><TD CLASS="l">193</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">194</TD><TD>                        api.requestForAuction(new AuctionRequestStruct(), new TimeStruct());</TD></TR><TR CLASS="z"><TD CLASS="l">195</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">196</TD><TD>        }</TD></TR><TR CLASS="c"><TD CLASS="l">197</TD><TD>        catch (SystemException e)</TD></TR><TR><TD CLASS="l">198</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">199</TD><TD>                assertTrue(true);</TD></TR><TR><TD CLASS="l">200</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">201</TD><TD>        catch (DataValidationException e)</TD></TR><TR><TD CLASS="l">202</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">203</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">204</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">205</TD><TD>        catch (CommunicationException e)</TD></TR><TR><TD CLASS="l">206</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">207</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">208</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">209</TD><TD>        catch (AuthorizationException e)</TD></TR><TR><TD CLASS="l">210</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">211</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">212</TD><TD>        }</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="3">213</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">214</TD><TD>        </TD></TR><TR><TD CLASS="l">215</TD><TD>        public void testRequestForAuction_3()</TD></TR><TR><TD CLASS="l">216</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">217</TD><TD>                res.postException(new SystemException());</TD></TR><TR><TD CLASS="l">218</TD><TD>                </TD></TR><TR><TD CLASS="l">219</TD><TD>                try</TD></TR><TR><TD CLASS="l">220</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">221</TD><TD>                        api.requestForAuction(new AuctionRequestStruct(), new TimeStruct());</TD></TR><TR CLASS="z"><TD CLASS="l">222</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">223</TD><TD>        }</TD></TR><TR CLASS="c"><TD CLASS="l">224</TD><TD>        catch (SystemException e)</TD></TR><TR><TD CLASS="l">225</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">226</TD><TD>                assertTrue(true);</TD></TR><TR><TD CLASS="l">227</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">228</TD><TD>        catch (DataValidationException e)</TD></TR><TR><TD CLASS="l">229</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">230</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">231</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">232</TD><TD>        catch (CommunicationException e)</TD></TR><TR><TD CLASS="l">233</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">234</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">235</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">236</TD><TD>        catch (AuthorizationException e)</TD></TR><TR><TD CLASS="l">237</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">238</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">239</TD><TD>        }</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="e">240</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">241</TD><TD>        </TD></TR><TR><TD CLASS="l">242</TD><TD>        public void testRequestForStrategyAuction_1() throws SystemException, DataValidationException, CommunicationException, AuthorizationException</TD></TR><TR><TD CLASS="l">243</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">244</TD><TD>                Map&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();</TD></TR><TR CLASS="c"><TD CLASS="l">245</TD><TD>                data.put(WebCasConstants.MESSAGE_ID, &#34;ID&#34;);</TD></TR><TR CLASS="c"><TD CLASS="l">246</TD><TD>                data.put(WebCasConstants.ResultType.RESULT, new AuctionStruct());</TD></TR><TR CLASS="c"><TD CLASS="l">247</TD><TD>                res.postResult(data);</TD></TR><TR><TD CLASS="l">248</TD><TD>                </TD></TR><TR CLASS="c"><TD CLASS="l">249</TD><TD>                api.requestForStrategyAuction(new StrategyAuctionRequestStruct(), new TimeStruct());</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="4">250</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">251</TD><TD>        </TD></TR><TR><TD CLASS="l">252</TD><TD>        public void testRequestForStrategyAuction_2() throws SystemException, DataValidationException, CommunicationException, AuthorizationException</TD></TR><TR><TD CLASS="l">253</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">254</TD><TD>                res.postException(new TimeoutException());</TD></TR><TR><TD CLASS="l">255</TD><TD>                try</TD></TR><TR><TD CLASS="l">256</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">257</TD><TD>                        api.requestForStrategyAuction(new StrategyAuctionRequestStruct(), new TimeStruct());</TD></TR><TR CLASS="z"><TD CLASS="l">258</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">259</TD><TD>        }</TD></TR><TR CLASS="c"><TD CLASS="l">260</TD><TD>        catch (SystemException e)</TD></TR><TR><TD CLASS="l">261</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">262</TD><TD>                assertTrue(true);</TD></TR><TR><TD CLASS="l">263</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">264</TD><TD>        catch (DataValidationException e)</TD></TR><TR><TD CLASS="l">265</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">266</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">267</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">268</TD><TD>        catch (CommunicationException e)</TD></TR><TR><TD CLASS="l">269</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">270</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">271</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">272</TD><TD>        catch (AuthorizationException e)</TD></TR><TR><TD CLASS="l">273</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">274</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">275</TD><TD>        }</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="5">276</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">277</TD><TD>        </TD></TR><TR><TD CLASS="l">278</TD><TD>        public void testRequestForStrategyAuction_3()</TD></TR><TR><TD CLASS="l">279</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">280</TD><TD>                res.postException(new SystemException());</TD></TR><TR><TD CLASS="l">281</TD><TD>                </TD></TR><TR><TD CLASS="l">282</TD><TD>                try</TD></TR><TR><TD CLASS="l">283</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">284</TD><TD>                        api.requestForStrategyAuction(new StrategyAuctionRequestStruct(), new TimeStruct());</TD></TR><TR CLASS="z"><TD CLASS="l">285</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">286</TD><TD>        }</TD></TR><TR CLASS="c"><TD CLASS="l">287</TD><TD>        catch (SystemException e)</TD></TR><TR><TD CLASS="l">288</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">289</TD><TD>                assertTrue(true);</TD></TR><TR><TD CLASS="l">290</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">291</TD><TD>        catch (DataValidationException e)</TD></TR><TR><TD CLASS="l">292</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">293</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">294</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">295</TD><TD>        catch (CommunicationException e)</TD></TR><TR><TD CLASS="l">296</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">297</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l">298</TD><TD>        }</TD></TR><TR CLASS="z"><TD CLASS="l">299</TD><TD>        catch (AuthorizationException e)</TD></TR><TR><TD CLASS="l">300</TD><TD>        {</TD></TR><TR CLASS="z"><TD CLASS="l">301</TD><TD>                assertTrue(false);</TD></TR><TR><TD CLASS="l"><A NAME="a">302</A></TD><TD>        }</TD></TR><TR CLASS="c"><TD CLASS="l">303</TD><TD>        }</TD></TR><TR><TD CLASS="l">304</TD><TD>        public void testConnect()</TD></TR><TR><TD CLASS="l">305</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">306</TD><TD>                ClientSessionChannel channel = mock(ClientSessionChannel.class);</TD></TR><TR CLASS="c"><TD CLASS="l">307</TD><TD>                doReturn(channel).when(client).getChannel(anyString());</TD></TR><TR CLASS="c"><TD CLASS="l">308</TD><TD>                api.connect();</TD></TR><TR CLASS="c"><TD CLASS="l">309</TD><TD>        }</TD></TR><TR><TD CLASS="l">310</TD><TD>}</TD></TR></TABLE><P></P><TABLE CLASS="hdft" CELLSPACING="0" WIDTH="100%"><TR><TD CLASS="nv">[<A HREF="../AuctionEventListenerTest.html">all classes</A>][<A HREF="14.html">com.cboe.presentation.translator</A>]</TD></TR><TR><TD CLASS="tl"><A HREF="http://www.eclemma.org/support.html">EMMA 2.0.5312 EclEmma Fix 1</A> (C) Vladimir Roubtsov</TD></TR></TABLE></BODY></HTML>