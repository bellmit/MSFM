<HTML><HEAD><META CONTENT="text/html; charset=UTF-8" HTTP-EQUIV="Content-Type"/><TITLE>EMMA Coverage Report</TITLE><STYLE TYPE="text/css"> TABLE,TD,TH {border-style:solid; border-color:black;} TD,TH {background:white;margin:0;line-height:100%;padding-left:0.5em;padding-right:0.5em;} TD {border-width:0 1px 0 0;} TH {border-width:1px 1px 1px 0;} TR TD.h {color:red;} TABLE {border-spacing:0; border-collapse:collapse;border-width:0 0 1px 1px;} P,H1,H2,H3,TH {font-family:verdana,arial,sans-serif;font-size:10pt;} TD {font-family:courier,monospace;font-size:10pt;} TABLE.hdft {border-spacing:0;border-collapse:collapse;border-style:none;} TABLE.hdft TH,TABLE.hdft TD {border-style:none;line-height:normal;} TABLE.hdft TH.tl,TABLE.hdft TD.tl {background:#6699CC;color:white;} TABLE.hdft TD.nv {background:#6633DD;color:white;} .nv A:link {color:white;} .nv A:visited {color:white;} .nv A:active {color:yellow;} TABLE.hdft A:link {color:white;} TABLE.hdft A:visited {color:white;} TABLE.hdft A:active {color:yellow;} .in {color:#356085;} TABLE.s TD {padding-left:0.25em;padding-right:0.25em;} TABLE.s TD.l {padding-left:0.25em;padding-right:0.25em;text-align:right;background:#F0F0F0;} TABLE.s TR.z TD {background:#FF9999;} TABLE.s TR.p TD {background:#FFFF88;} TABLE.s TR.c TD {background:#CCFFCC;} A:link {color:#0000EE;text-decoration:none;} A:visited {color:#0000EE;text-decoration:none;} A:hover {color:#0000EE;text-decoration:underline;} TABLE.cn {border-width:0 0 1px 0;} TABLE.s {border-width:1px 0 1px 1px;} TD.h {color:red;border-width:0 1px 0 0;} TD.f {border-width:0 1px 0 1px;} TD.hf {color:red;border-width:0 1px 0 1px;} TH.f {border-width:1px 1px 1px 1px;} TR.cis TD {background:#F0F0F0;} TR.cis TD {border-width:1px 1px 1px 0;} TR.cis TD.h {color:red;border-width:1px 1px 1px 0;} TR.cis TD.f {border-width:1px 1px 1px 1px;} TR.cis TD.hf {color:red;border-width:1px 1px 1px 1px;} TD.b {border-style:none;background:transparent;line-height:50%;}  TD.bt {border-width:1px 0 0 0;background:transparent;line-height:50%;} TR.o TD {background:#F0F0F0;}TABLE.it {border-style:none;}TABLE.it TD,TABLE.it TH {border-style:none;}</STYLE></HEAD><BODY><TABLE CLASS="hdft" CELLSPACING="0" WIDTH="100%"><TR><TH CLASS="tl"><A HREF="http://www.eclemma.org/">EMMA</A> Coverage Report (generated Thu Jun 02 15:01:35 CDT 2011)</TH></TR><TR><TD CLASS="nv">[<A HREF="../AuctionEventListenerTest.html">all classes</A>][<A HREF="14.html">com.cboe.presentation.event</A>]</TD></TR></TABLE><H2>COVERAGE SUMMARY FOR SOURCE FILE [<SPAN CLASS="in">ProductStatusEventListener.java</SPAN>]</H2><TABLE CELLSPACING="0" WIDTH="100%"><TR><TH>name</TH><TH>class, %</TH><TH>method, %</TH><TH>block, %</TH><TH>line, %</TH></TR><TR><TD>ProductStatusEventListener.java</TD><TD>100% (2/2)</TD><TD>73%  (8/11)</TD><TD>81%  (120/149)</TD><TD CLASS="h">79%  (31/39)</TD></TR></TABLE><H3>COVERAGE BREAKDOWN BY CLASS AND METHOD</H3><TABLE CLASS="cn" CELLSPACING="0" WIDTH="100%"><TR><TH CLASS="f">name</TH><TH>class, %</TH><TH>method, %</TH><TH>block, %</TH><TH>line, %</TH></TR><TR><TD CLASS="b"> </TD><TD CLASS="b"> </TD><TD CLASS="b"> </TD><TD CLASS="b"> </TD><TD CLASS="b"> </TD></TR><TR CLASS="cis"><TD CLASS="f">class <A HREF="#0">ProductStatusEventListener$1</A></TD><TD>100% (1/1)</TD><TD CLASS="h">50%  (1/2)</TD><TD CLASS="h">18%  (6/33)</TD><TD CLASS="h">25%  (2/8)</TD></TR><TR><TD CLASS="f"><A HREF="#1">onMessage (ClientSessionChannel, Message): void</A></TD><TD> </TD><TD CLASS="h">0%   (0/1)</TD><TD CLASS="h">0%   (0/27)</TD><TD CLASS="h">0%   (0/6)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#0">ProductStatusEventListener$1 (ProductStatusEventListener): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (6/6)</TD><TD>100% (2/2)</TD></TR><TR><TD CLASS="bt"> </TD><TD CLASS="bt"> </TD><TD CLASS="bt"> </TD><TD CLASS="bt"> </TD><TD CLASS="bt"> </TD></TR><TR CLASS="cis"><TD CLASS="f">class <A HREF="#3">ProductStatusEventListener</A></TD><TD>100% (1/1)</TD><TD>78%  (7/9)</TD><TD>98%  (114/116)</TD><TD>94%  (30/32)</TD></TR><TR><TD CLASS="f"><A HREF="#4">disconnect (): void</A></TD><TD> </TD><TD CLASS="h">0%   (0/1)</TD><TD CLASS="h">0%   (0/1)</TD><TD CLASS="h">0%   (0/1)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#5">unsubscribe (): void</A></TD><TD> </TD><TD CLASS="h">0%   (0/1)</TD><TD CLASS="h">0%   (0/1)</TD><TD CLASS="h">0%   (0/1)</TD></TR><TR><TD CLASS="f"><A HREF="#3">ProductStatusEventListener (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (12/12)</TD><TD>100% (5/5)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#7">addListener (EventChannelListener, int): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (16/16)</TD><TD>100% (3/3)</TD></TR><TR><TD CLASS="f"><A HREF="#8">connect (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (3/3)</TD><TD>100% (2/2)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#9">dispatchEvent (ChannelKey, Object): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (11/11)</TD><TD>100% (3/3)</TD></TR><TR><TD CLASS="f"><A HREF="#a">dispatchEvent (String, Object, Object): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (31/31)</TD><TD>100% (9/9)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#b">initialize (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (20/20)</TD><TD>100% (5/5)</TD></TR><TR><TD CLASS="f"><A HREF="#c">subscribe (int [], EventChannelListener): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (21/21)</TD><TD>100% (3/3)</TD></TR></TABLE><P></P><TABLE CLASS="s" CELLSPACING="0" WIDTH="100%"><TR CLASS="c"><TD CLASS="l"><A NAME="0">1</A></TD><TD>package com.cboe.presentation.event;</TD></TR><TR><TD CLASS="l">2</TD><TD> </TD></TR><TR><TD CLASS="l">3</TD><TD>import java.util.HashMap;</TD></TR><TR><TD CLASS="l">4</TD><TD>import java.util.Map;</TD></TR><TR><TD CLASS="l">5</TD><TD> </TD></TR><TR><TD CLASS="l">6</TD><TD>import org.cometd.bayeux.Message;</TD></TR><TR><TD CLASS="l">7</TD><TD>import org.cometd.bayeux.client.ClientSessionChannel;</TD></TR><TR><TD CLASS="l">8</TD><TD> </TD></TR><TR><TD CLASS="l">9</TD><TD>import com.cboe.interfaces.presentation.api.ListenerService;</TD></TR><TR><TD CLASS="l">10</TD><TD>import com.cboe.interfaces.presentation.event.SubscriptionListener;</TD></TR><TR><TD CLASS="l">11</TD><TD>import com.cboe.presentation.api.FlexAPIHome;</TD></TR><TR><TD CLASS="l">12</TD><TD>import com.cboe.presentation.common.logging.GUILoggerHome;</TD></TR><TR><TD CLASS="l">13</TD><TD>import com.cboe.presentation.listener.ClientListener;</TD></TR><TR><TD CLASS="l">14</TD><TD>import com.cboe.util.ChannelKey;</TD></TR><TR><TD CLASS="l">15</TD><TD>import com.cboe.util.ChannelType;</TD></TR><TR><TD CLASS="l">16</TD><TD>import com.cboe.util.channel.ChannelEvent;</TD></TR><TR><TD CLASS="l">17</TD><TD>import com.cboe.util.event.EventChannelAdapter;</TD></TR><TR><TD CLASS="l">18</TD><TD>import com.cboe.util.event.EventChannelAdapterFactory;</TD></TR><TR><TD CLASS="l">19</TD><TD>import com.cboe.util.event.EventChannelListener;</TD></TR><TR><TD CLASS="l">20</TD><TD>import com.cboe.webCas.util.WebCasConstants;</TD></TR><TR><TD CLASS="l">21</TD><TD> </TD></TR><TR><TD CLASS="l">22</TD><TD>public class ProductStatusEventListener implements ListenerService, SubscriptionListener</TD></TR><TR><TD CLASS="l">23</TD><TD>{</TD></TR><TR><TD CLASS="l">24</TD><TD>        private static final String TRANSLATOR_NAME = &#34;ProductStatusEventListener&#34;;</TD></TR><TR><TD CLASS="l"><A NAME="3">25</A></TD><TD>        EventChannelAdapter eventChannel;</TD></TR><TR CLASS="c"><TD CLASS="l">26</TD><TD>        ClientListener productStatusEventListener = null;</TD></TR><TR CLASS="c"><TD CLASS="l">27</TD><TD>        String PRODUCT_EVENT_CHANNEL = WebCasConstants.Channel.PRODUCT_EVENT_CHANNEL;</TD></TR><TR><TD CLASS="l">28</TD><TD>        </TD></TR><TR CLASS="c"><TD CLASS="l">29</TD><TD>        public ProductStatusEventListener()</TD></TR><TR><TD CLASS="l">30</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">31</TD><TD>                eventChannel = EventChannelAdapterFactory.find();</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="b">32</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">33</TD><TD> </TD></TR><TR><TD CLASS="l">34</TD><TD>        private void initialize()</TD></TR><TR><TD CLASS="l">35</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">36</TD><TD>                if(productStatusEventListener == null)</TD></TR><TR><TD CLASS="l">37</TD><TD>                {</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="1">38</A></TD><TD>                        productStatusEventListener = new ClientListener()</TD></TR><TR><TD CLASS="l">39</TD><TD>                        {</TD></TR><TR><TD CLASS="l">40</TD><TD>                                public void onMessage(ClientSessionChannel channel, Message message)</TD></TR><TR><TD CLASS="l">41</TD><TD>                                {</TD></TR><TR CLASS="z"><TD CLASS="l">42</TD><TD>                                        Map&lt;String, Object&gt; data = message.getDataAsMap();</TD></TR><TR CLASS="z"><TD CLASS="l">43</TD><TD>                                        if (GUILoggerHome.find().isAuditOn())</TD></TR><TR><TD CLASS="l">44</TD><TD>                                        {</TD></TR><TR CLASS="z"><TD CLASS="l">45</TD><TD>                                                GUILoggerHome.find().audit(TRANSLATOR_NAME + &#34;: onMessage&#34;, data);</TD></TR><TR><TD CLASS="l">46</TD><TD>                                        }</TD></TR><TR><TD CLASS="l">47</TD><TD>        </TD></TR><TR CLASS="z"><TD CLASS="l">48</TD><TD>                                        HashMap result = (HashMap)data.get(WebCasConstants.ResultType.RESULT);</TD></TR><TR><TD CLASS="l">49</TD><TD>                                        </TD></TR><TR CLASS="z"><TD CLASS="l">50</TD><TD>                                        dispatchEvent((String)result.get(WebCasConstants.ProductStatus.METHODNAME), 0, result);</TD></TR><TR CLASS="z"><TD CLASS="l">51</TD><TD>                                }</TD></TR><TR><TD CLASS="l">52</TD><TD>                        };</TD></TR><TR><TD CLASS="l">53</TD><TD>                }</TD></TR><TR CLASS="c"><TD CLASS="l">54</TD><TD>                ClientSessionChannel productStatusEventChannel = FlexAPIHome.getClientSession().getClient().getChannel(PRODUCT_EVENT_CHANNEL);</TD></TR><TR><TD CLASS="l">55</TD><TD>                //productStatusEventChannel.unsubscribe(productStatusEventListener);</TD></TR><TR CLASS="c"><TD CLASS="l">56</TD><TD>                productStatusEventChannel.subscribe(productStatusEventListener);</TD></TR><TR><TD CLASS="l">57</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="7">58</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">59</TD><TD> </TD></TR><TR><TD CLASS="l">60</TD><TD>        private void addListener(EventChannelListener clientListener, int channeType)</TD></TR><TR><TD CLASS="l">61</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">62</TD><TD>                ChannelKey key = new ChannelKey(channeType, 0);</TD></TR><TR CLASS="c"><TD CLASS="l">63</TD><TD>                eventChannel.addChannelListener(eventChannel, clientListener, key);</TD></TR><TR CLASS="c"><TD CLASS="l">64</TD><TD>        }</TD></TR><TR><TD CLASS="l"><A NAME="8">65</A></TD><TD> </TD></TR><TR><TD CLASS="l">66</TD><TD>        @Override</TD></TR><TR><TD CLASS="l">67</TD><TD>        public void connect()</TD></TR><TR><TD CLASS="l">68</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">69</TD><TD>                initialize();</TD></TR><TR CLASS="c"><TD CLASS="l">70</TD><TD>        }</TD></TR><TR><TD CLASS="l">71</TD><TD> </TD></TR><TR><TD CLASS="l"><A NAME="4">72</A></TD><TD>        @Override</TD></TR><TR><TD CLASS="l">73</TD><TD>        public void disconnect()</TD></TR><TR><TD CLASS="l">74</TD><TD>        {</TD></TR><TR><TD CLASS="l">75</TD><TD> </TD></TR><TR CLASS="z"><TD CLASS="l"><A NAME="a">76</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">77</TD><TD> </TD></TR><TR><TD CLASS="l">78</TD><TD>        public void dispatchEvent(String methodName, Object channelKeyParameter, Object channelEventParameter)</TD></TR><TR><TD CLASS="l">79</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">80</TD><TD>                int channelType = 0;</TD></TR><TR><TD CLASS="l">81</TD><TD>                </TD></TR><TR CLASS="c"><TD CLASS="l">82</TD><TD>                if(methodName.equals(&#34;acceptProductState&#34;))</TD></TR><TR CLASS="c"><TD CLASS="l">83</TD><TD>                        channelType = ChannelType.SET_PRODUCT_STATE;</TD></TR><TR CLASS="c"><TD CLASS="l">84</TD><TD>                else if(methodName.equals(&#34;updateProduct&#34;))</TD></TR><TR CLASS="c"><TD CLASS="l">85</TD><TD>                        channelType = ChannelType.UPDATE_PRODUCT;</TD></TR><TR CLASS="c"><TD CLASS="l">86</TD><TD>                else if(methodName.equals(&#34;updateProductStrategy&#34;))</TD></TR><TR CLASS="c"><TD CLASS="l">87</TD><TD>                        channelType = ChannelType.STRATEGY_UPDATE;</TD></TR><TR><TD CLASS="l">88</TD><TD>                </TD></TR><TR CLASS="c"><TD CLASS="l">89</TD><TD>                dispatchEvent(new ChannelKey(channelType, channelKeyParameter), channelEventParameter);</TD></TR><TR CLASS="c"><TD CLASS="l"><A NAME="9">90</A></TD><TD>        }</TD></TR><TR><TD CLASS="l">91</TD><TD> </TD></TR><TR><TD CLASS="l">92</TD><TD>        private void dispatchEvent(ChannelKey key, Object channelEventParameter)</TD></TR><TR><TD CLASS="l">93</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">94</TD><TD>                ChannelEvent event = EventChannelAdapterFactory.find().getChannelEvent(this, key, channelEventParameter);</TD></TR><TR CLASS="c"><TD CLASS="l">95</TD><TD>                eventChannel.dispatch(event);</TD></TR><TR CLASS="c"><TD CLASS="l">96</TD><TD>        }</TD></TR><TR><TD CLASS="l"><A NAME="c">97</A></TD><TD> </TD></TR><TR><TD CLASS="l">98</TD><TD>        @Override</TD></TR><TR><TD CLASS="l">99</TD><TD>    public void subscribe(int[] channelTypes, EventChannelListener clientListener)</TD></TR><TR><TD CLASS="l">100</TD><TD>    {</TD></TR><TR CLASS="c"><TD CLASS="l">101</TD><TD>                for (int channelType : channelTypes)</TD></TR><TR><TD CLASS="l">102</TD><TD>            {</TD></TR><TR CLASS="c"><TD CLASS="l">103</TD><TD>                addListener(clientListener, channelType);</TD></TR><TR><TD CLASS="l">104</TD><TD>            }</TD></TR><TR CLASS="c"><TD CLASS="l">105</TD><TD>        }</TD></TR><TR><TD CLASS="l">106</TD><TD> </TD></TR><TR><TD CLASS="l"><A NAME="5">107</A></TD><TD>        @Override</TD></TR><TR><TD CLASS="l">108</TD><TD>    public void unsubscribe()</TD></TR><TR><TD CLASS="l">109</TD><TD>    {</TD></TR><TR><TD CLASS="l">110</TD><TD>            </TD></TR><TR CLASS="z"><TD CLASS="l">111</TD><TD>    }</TD></TR><TR><TD CLASS="l">112</TD><TD>}</TD></TR></TABLE><P></P><TABLE CLASS="hdft" CELLSPACING="0" WIDTH="100%"><TR><TD CLASS="nv">[<A HREF="../AuctionEventListenerTest.html">all classes</A>][<A HREF="14.html">com.cboe.presentation.event</A>]</TD></TR><TR><TD CLASS="tl"><A HREF="http://www.eclemma.org/support.html">EMMA 2.0.5312 EclEmma Fix 1</A> (C) Vladimir Roubtsov</TD></TR></TABLE></BODY></HTML>