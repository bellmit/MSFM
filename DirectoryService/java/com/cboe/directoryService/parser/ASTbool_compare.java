/* Generated By:JJTree: Do not edit this line. ASTbool_compare.java */

package com.cboe.directoryService.parser;

import java.util.Enumeration;

public class ASTbool_compare extends SimpleNode {
 private String value;
 private int operator;

 public ASTbool_compare(int id) {
    super(id);
 }

  public ASTbool_compare(DirectoryServiceParser p, int id) {
    super(p, id);
   }
  
  public void setOperator(int inOperator) {
	operator = inOperator;
    }

    public int getOperator() {
	return operator;
    }

    public boolean equals(Object obj) {
	if(!(obj instanceof ASTbool_compare)) {
	    return false;
	}
	if(operator == ((ASTbool_compare)obj).getOperator()) {
	    if(jjtGetNumChildren() == ((Node)obj).jjtGetNumChildren()) {
		for(int i = 0; i < jjtGetNumChildren(); i++) {
		    if(jjtGetChild(i).equals(((Node)obj).jjtGetChild(i)) == false) {
			return false;
		    }
		}
	    } else {
		return false;
	    }
	} else {
	    return false;
	}
	return true;
    }
	    

   /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
      if(children != null) {
	  if( children.length > 1) {
	      System.out.println(toString(prefix) + "***");
	  } else {
	      System.out.println(toString(prefix));
	  }
      } else {
	  System.out.println(toString(prefix));
      }
      if (children != null) {
	
      for (int i = 0; i < children.length; ++i) {
	  SimpleNode n = (SimpleNode)children[i];
	if (n != null) {
	  n.dump(prefix + " ");
	}
      }
    }
  }
 

  /** Set the value. **/
  public void setValue(String n) {
    value = n;
  }
  
  /** return  the value. **/ 
  public String getValue() {
    return value;
  }

  /** Accept the visitor. **/
  public Object jjtAccept(DirectoryServiceParserVisitor visitor, Object data) throws Exception {
    return visitor.visit(this, data);
  }
}



