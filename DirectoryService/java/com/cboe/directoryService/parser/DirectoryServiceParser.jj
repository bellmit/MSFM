/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. DirectoryServiceParser.jj */
/*@egen*/options {                                                                                             
  STATIC=false;
  IGNORE_CASE=true;
}

PARSER_BEGIN(DirectoryServiceParser)

package com.cboe.directoryService.parser;

public abstract class DirectoryServiceParser/*@bgen(jjtree)*/implements DirectoryServiceParserTreeConstants/*@egen*/  {/*@bgen(jjtree)*/
  protected JJTDirectoryServiceParserState jjtree = new JJTDirectoryServiceParserState();

/*@egen*/
}

PARSER_END(DirectoryServiceParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{ 
 <NE : "!=">
|
 <EQ : "==">
|
 <LT : "<">
|
 <LE : "<=">
|
 <GT : ">">
|
 <GE : ">=">
|
 <IN : "in">
|
 <OR : "or">
|
 <AND : "and">
|
 <NOT : "not">
|
 <TRUE : "TRUE">
|
 <FALSE : "FALSE">
|
 <EXIST : "exist">
|
 <PLUS : "+">
|
 <MINUS : "-">
|
 <MULT : "*">
|
 <DIV : "/">
|
 <TWIDDLE : "~">
|
 <LPAREN : "(">
|
 <RPAREN : ")">
|
 <DOT : ".">
| 
 <BACKSLASH : "\\">
|
 <LENGTH : "_length">
|
 <DTYPE : "_d">
|
 <TYPEID : "_type_id">
|
 <REPOSID : "_repos_id">
|
 <SUBSCRIPT : "[" <DIGITS> "]">
|
 <ID : ["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])*>
|
 <INTEGER : <DIGITS>>
|
 <FLOAT : <MANTISSA> | <MANTISSA> <EXPONENT>>
|
 <#MANTISSA : <DIGITS> "." | "." <DIGITS> | <DIGITS> "." <DIGITS>>
|
 <#EXPONENT : ["E", "e"] ["+", "-"] <DIGITS>>
|
 <STRING : "'"(<DIGITS> | <ALPHA> | <SPECIAL> | <OTHER>)*"'"> 
|
 <#SPECIAL : ("\\\\"| "\\\'")>
|
 <#OTHER : ~["\\","\'","A"-"Z", "a"-"z", "0"-"9"]>
|  
 <#ALPHA : ["A"-"Z","a"-"z"] >
|
 <#DIGITS : ["0"-"9"](["0"-"9"])*>

}

ASTconstraint constraint()            : {/*@bgen(jjtree) constraint */
  ASTconstraint jjtn000 = new ASTconstraint(JJTCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) constraint */
  try {
/*@egen*/
  <EOF>/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/{return jjtn000;} | bool()<EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {  return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void bool()       : {/*@bgen(jjtree) bool */
                     ASTbool jjtn000 = new ASTbool(JJTBOOL);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token x;}
{/*@bgen(jjtree) bool */
try {
/*@egen*/
bool_compare() ((x = <OR>|x = <AND>) bool_compare(){
    jjtn000.setValue(x.image);
    jjtn000.addOperator(x.kind);})*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void bool_compare()               : {/*@bgen(jjtree) bool_compare */
                                     ASTbool_compare jjtn000 = new ASTbool_compare(JJTBOOL_COMPARE);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token x;}
{/*@bgen(jjtree) bool_compare */
try {
/*@egen*/
LOOKAHEAD(expr_in()(<NE>|<EQ>|<LT>|<LE>|<GT>|<GE>))
expr_in() (x = <NE>|x = <EQ>|x = <LT>|x = <LE>|x = <GT>|x = <GE>) expr_in()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { jjtn000.setValue(x.image);
      jjtn000.setOperator(x.kind);}
|
expr_in()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void expr_in()          : {/*@bgen(jjtree) expr_in */
  ASTexpr_in jjtn000 = new ASTexpr_in(JJTEXPR_IN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expr_in */
 try {
/*@egen*/
 LOOKAHEAD(expr() <IN>) expr()<IN> Ident() | expr()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void expr()       : {/*@bgen(jjtree) expr */
                     ASTexpr jjtn000 = new ASTexpr(JJTEXPR);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token x;}
{/*@bgen(jjtree) expr */
try {
/*@egen*/
term() ((x = <PLUS>|x = <MINUS>) term() {jjtn000.setValue(x.image);
                                         jjtn000.addOperator(x.kind);})*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void term()       : {/*@bgen(jjtree) term */
                     ASTterm jjtn000 = new ASTterm(JJTTERM);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token x;}
{/*@bgen(jjtree) term */
try {
/*@egen*/
factor_not() ((x = <MULT>|x = <DIV>)factor_not() {jjtn000.setValue(x.image);
                                                  jjtn000.addOperator(x.kind);})*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void factor_not()             : {/*@bgen(jjtree) factor_not */
  ASTfactor_not jjtn000 = new ASTfactor_not(JJTFACTOR_NOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) factor_not */
try {
/*@egen*/
(<NOT>  {jjtn000.incrementNotCount();})* factor()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void factor()         : {/*@bgen(jjtree) factor */
  ASTfactor jjtn000 = new ASTfactor(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) factor */
 try {
/*@egen*/
 LOOKAHEAD(2) <EXIST> Ident()/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{jjtn000.setFlag(DirectoryServiceParserConstants.EXIST);} 
| Ident() 
| Float()
| Integer() 
| <MINUS> {jjtn000.setFlag(DirectoryServiceParserConstants.MINUS);}(Float()|Integer())
| <PLUS> {jjtn000.setFlag(DirectoryServiceParserConstants.PLUS);}(Float()|Integer()) 
| <BACKSLASH> {jjtn000.setFlag(DirectoryServiceParserConstants.BACKSLASH);} Ident() 
| String() 
| <TRUE>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {jjtn000.setFlag(DirectoryServiceParserConstants.TRUE);} 
| <FALSE>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.setFlag(DirectoryServiceParserConstants.FALSE);}
| <LPAREN> bool() <RPAREN>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Ident()        : {/*@bgen(jjtree) Ident */
                       ASTIdent jjtn000 = new ASTIdent(JJTIDENT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token x;}
{/*@bgen(jjtree) Ident */
try {
/*@egen*/
x=<ID>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
    jjtn000.setValue(x.image);
  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Float()        : {/*@bgen(jjtree) Float */
                       ASTFloat jjtn000 = new ASTFloat(JJTFLOAT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token x;}
{/*@bgen(jjtree) Float */
try {
/*@egen*/
x=<FLOAT>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
    jjtn000.setValue(x.image);
  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Integer()          : {/*@bgen(jjtree) Integer */
                           ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token x;}
{/*@bgen(jjtree) Integer */
try {
/*@egen*/
x=<INTEGER>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
    jjtn000.setValue(x.image);
  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void String()         : {/*@bgen(jjtree) String */
                         ASTString jjtn000 = new ASTString(JJTSTRING);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token x;}
{/*@bgen(jjtree) String */
try {
/*@egen*/
x=<STRING>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
	jjtn000.setValue(x.image);
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}






