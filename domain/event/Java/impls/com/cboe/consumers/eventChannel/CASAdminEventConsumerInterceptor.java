package com.cboe.consumers.eventChannel;

import com.cboe.interfaces.events.CASAdminConsumer;
import com.cboe.infrastructureServices.foundationFramework.*;
import com.cboe.infrastructureServices.foundationFramework.utilities.Log;
import com.cboe.instrumentationService.instrumentors.MethodInstrumentor;
import com.cboe.instrumentationService.instrumentors.Instrumentor;
import com.cboe.instrumentationService.factories.MethodInstrumentorFactory;
import com.cboe.instrumentationService.factories.InstrumentorAlreadyCreatedException;

/**
 * Generated by Java Grinder
 * @author Java Grinder
 */
public class CASAdminEventConsumerInterceptor implements CASAdminConsumer
{


    MethodInstrumentor removeCASUser21;


    MethodInstrumentor removeCASTickerClassForUser20;


    MethodInstrumentor removeCASRecapClassForUser19;


    MethodInstrumentor removeCASRFQClassForUser18;


    MethodInstrumentor removeCASQuoteLockedNotification17;


    MethodInstrumentor removeCASProductForUser16;


    MethodInstrumentor removeCASOpeningPriceClassForUser15;


    MethodInstrumentor removeCASFirm14;


    MethodInstrumentor removeCASCurrentMarketClassForUser13;


    MethodInstrumentor removeCASClassForUser12;


    MethodInstrumentor removeCASBookDepthProductForUser11;


    MethodInstrumentor addCASUser10;


    MethodInstrumentor addCASTickerClassForUser9;


    MethodInstrumentor addCASRecapClassForUser8;


    MethodInstrumentor addCASRFQClassForUser7;


    MethodInstrumentor addCASQuoteLockedNotification6;


    MethodInstrumentor addCASProductForUser5;


    MethodInstrumentor addCASOpeningPriceClassForUser4;


    MethodInstrumentor addCASFirm3;


    MethodInstrumentor addCASCurrentMarketClassForUser2;


    MethodInstrumentor addCASClassForUser1;

    private CASAdminConsumer delegate;

    MethodInstrumentor addCASBookDepthProductForUser0;
    private MethodInstrumentorFactory methodInstrumentorFactory;

    /**
     * Create a new instance of ths interceptor for the provided BObject.
     * Create a cache of the instrumentors necessary for instrumentation.
     */
    public CASAdminEventConsumerInterceptor(Object bo)
    {
        setDelegate(bo);
    }

    private MethodInstrumentorFactory getMethodInstrumentorFactory()
    {
        if (methodInstrumentorFactory == null)
        {
            methodInstrumentorFactory = FoundationFramework.getInstance().getInstrumentationService().getMethodInstrumentorFactory();
        }
        return methodInstrumentorFactory;
    }

    public void startInstrumentation(boolean privateOnly)
    {
        try
        {
            StringBuilder name = new StringBuilder(75);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("addCASBookDepthProductForUser0");
            addCASBookDepthProductForUser0 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(addCASBookDepthProductForUser0);
            addCASBookDepthProductForUser0.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("addCASClassForUser1");
            addCASClassForUser1 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(addCASClassForUser1);
            addCASClassForUser1.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("addCASCurrentMarketClassForUser2");
            addCASCurrentMarketClassForUser2 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(addCASCurrentMarketClassForUser2);
            addCASCurrentMarketClassForUser2.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("addCASFirm3");
            addCASFirm3 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(addCASFirm3);
            addCASFirm3.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("addCASOpeningPriceClassForUser4");
            addCASOpeningPriceClassForUser4 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(addCASOpeningPriceClassForUser4);
            addCASOpeningPriceClassForUser4.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("addCASProductForUser5");
            addCASProductForUser5 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(addCASProductForUser5);
            addCASProductForUser5.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("addCASQuoteLockedNotification6");
            addCASQuoteLockedNotification6 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(addCASQuoteLockedNotification6);
            addCASQuoteLockedNotification6.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("addCASRFQClassForUser7");
            addCASRFQClassForUser7 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(addCASRFQClassForUser7);
            addCASRFQClassForUser7.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("addCASRecapClassForUser8");
            addCASRecapClassForUser8 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(addCASRecapClassForUser8);
            addCASRecapClassForUser8.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("addCASTickerClassForUser9");
            addCASTickerClassForUser9 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(addCASTickerClassForUser9);
            addCASTickerClassForUser9.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("addCASUser10");
            addCASUser10 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(addCASUser10);
            addCASUser10.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("removeCASBookDepthProductForUser11");
            removeCASBookDepthProductForUser11 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(removeCASBookDepthProductForUser11);
            removeCASBookDepthProductForUser11.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("removeCASClassForUser12");
            removeCASClassForUser12 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(removeCASClassForUser12);
            removeCASClassForUser12.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("removeCASCurrentMarketClassForUser13");
            removeCASCurrentMarketClassForUser13 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(removeCASCurrentMarketClassForUser13);
            removeCASCurrentMarketClassForUser13.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("removeCASFirm14");
            removeCASFirm14 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(removeCASFirm14);
            removeCASFirm14.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("removeCASOpeningPriceClassForUser15");
            removeCASOpeningPriceClassForUser15 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(removeCASOpeningPriceClassForUser15);
            removeCASOpeningPriceClassForUser15.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("removeCASProductForUser16");
            removeCASProductForUser16 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(removeCASProductForUser16);
            removeCASProductForUser16.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("removeCASQuoteLockedNotification17");
            removeCASQuoteLockedNotification17 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(removeCASQuoteLockedNotification17);
            removeCASQuoteLockedNotification17.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("removeCASRFQClassForUser18");
            removeCASRFQClassForUser18 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(removeCASRFQClassForUser18);
            removeCASRFQClassForUser18.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("removeCASRecapClassForUser19");
            removeCASRecapClassForUser19 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(removeCASRecapClassForUser19);
            removeCASRecapClassForUser19.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("removeCASTickerClassForUser20");
            removeCASTickerClassForUser20 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(removeCASTickerClassForUser20);
            removeCASTickerClassForUser20.setPrivate(privateOnly);
            name.setLength(0);
            name.append("CASAdminEventConsumerInterceptor").append(Instrumentor.NAME_DELIMITER).append("removeCASUser21");
            removeCASUser21 = getMethodInstrumentorFactory().create(name.toString(), null);
            getMethodInstrumentorFactory().register(removeCASUser21);
            removeCASUser21.setPrivate(privateOnly);
        } catch (InstrumentorAlreadyCreatedException ex)
        {
            Log.exception(ex);
        }
    }

    /**
     *
     */
    public void removeInstrumentation()
    {
        getMethodInstrumentorFactory().unregister(addCASBookDepthProductForUser0);
        addCASBookDepthProductForUser0 = null;
        getMethodInstrumentorFactory().unregister(addCASClassForUser1);
        addCASClassForUser1 = null;
        getMethodInstrumentorFactory().unregister(addCASCurrentMarketClassForUser2);
        addCASCurrentMarketClassForUser2 = null;
        getMethodInstrumentorFactory().unregister(addCASFirm3);
        addCASFirm3 = null;
        getMethodInstrumentorFactory().unregister(addCASOpeningPriceClassForUser4);
        addCASOpeningPriceClassForUser4 = null;
        getMethodInstrumentorFactory().unregister(addCASProductForUser5);
        addCASProductForUser5 = null;
        getMethodInstrumentorFactory().unregister(addCASQuoteLockedNotification6);
        addCASQuoteLockedNotification6 = null;
        getMethodInstrumentorFactory().unregister(addCASRFQClassForUser7);
        addCASRFQClassForUser7 = null;
        getMethodInstrumentorFactory().unregister(addCASRecapClassForUser8);
        addCASRecapClassForUser8 = null;
        getMethodInstrumentorFactory().unregister(addCASTickerClassForUser9);
        addCASTickerClassForUser9 = null;
        getMethodInstrumentorFactory().unregister(addCASUser10);
        addCASUser10 = null;
        getMethodInstrumentorFactory().unregister(removeCASBookDepthProductForUser11);
        removeCASBookDepthProductForUser11 = null;
        getMethodInstrumentorFactory().unregister(removeCASClassForUser12);
        removeCASClassForUser12 = null;
        getMethodInstrumentorFactory().unregister(removeCASCurrentMarketClassForUser13);
        removeCASCurrentMarketClassForUser13 = null;
        getMethodInstrumentorFactory().unregister(removeCASFirm14);
        removeCASFirm14 = null;
        getMethodInstrumentorFactory().unregister(removeCASOpeningPriceClassForUser15);
        removeCASOpeningPriceClassForUser15 = null;
        getMethodInstrumentorFactory().unregister(removeCASProductForUser16);
        removeCASProductForUser16 = null;
        getMethodInstrumentorFactory().unregister(removeCASQuoteLockedNotification17);
        removeCASQuoteLockedNotification17 = null;
        getMethodInstrumentorFactory().unregister(removeCASRFQClassForUser18);
        removeCASRFQClassForUser18 = null;
        getMethodInstrumentorFactory().unregister(removeCASRecapClassForUser19);
        removeCASRecapClassForUser19 = null;
        getMethodInstrumentorFactory().unregister(removeCASTickerClassForUser20);
        removeCASTickerClassForUser20 = null;
        getMethodInstrumentorFactory().unregister(removeCASUser21);
        removeCASUser21 = null;
    }

    /**
     */
    public void addCASBookDepthProductForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (addCASBookDepthProductForUser0 != null)
        {
            addCASBookDepthProductForUser0.beforeMethodCall();
        }
        try
        {
            delegate.addCASBookDepthProductForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (addCASBookDepthProductForUser0 != null)
            {
                addCASBookDepthProductForUser0.incCalls(1);
                addCASBookDepthProductForUser0.afterMethodCall();
                if (exception)
                {
                    addCASBookDepthProductForUser0.incExceptions(1);
                }
            }
        }
    }

    private void setDelegate(Object delegate)
    {
        this.delegate = (CASAdminConsumer) delegate;
    }

    /**
     */
    public void addCASClassForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (addCASClassForUser1 != null)
        {
            addCASClassForUser1.beforeMethodCall();
        }
        try
        {
            delegate.addCASClassForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (addCASClassForUser1 != null)
            {
                addCASClassForUser1.incCalls(1);
                addCASClassForUser1.afterMethodCall();
                if (exception)
                {
                    addCASClassForUser1.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void addCASCurrentMarketClassForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (addCASCurrentMarketClassForUser2 != null)
        {
            addCASCurrentMarketClassForUser2.beforeMethodCall();
        }
        try
        {
            delegate.addCASCurrentMarketClassForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (addCASCurrentMarketClassForUser2 != null)
            {
                addCASCurrentMarketClassForUser2.incCalls(1);
                addCASCurrentMarketClassForUser2.afterMethodCall();
                if (exception)
                {
                    addCASCurrentMarketClassForUser2.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void addCASFirm(java.lang.String param0, java.lang.String param1, java.lang.String param2, com.cboe.idl.cmiUser.ExchangeFirmStruct param3)
    {
        boolean exception = false;
        if (addCASFirm3 != null)
        {
            addCASFirm3.beforeMethodCall();
        }
        try
        {
            delegate.addCASFirm(param0, param1, param2, param3);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (addCASFirm3 != null)
            {
                addCASFirm3.incCalls(1);
                addCASFirm3.afterMethodCall();
                if (exception)
                {
                    addCASFirm3.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void addCASOpeningPriceClassForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (addCASOpeningPriceClassForUser4 != null)
        {
            addCASOpeningPriceClassForUser4.beforeMethodCall();
        }
        try
        {
            delegate.addCASOpeningPriceClassForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (addCASOpeningPriceClassForUser4 != null)
            {
                addCASOpeningPriceClassForUser4.incCalls(1);
                addCASOpeningPriceClassForUser4.afterMethodCall();
                if (exception)
                {
                    addCASOpeningPriceClassForUser4.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void addCASProductForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (addCASProductForUser5 != null)
        {
            addCASProductForUser5.beforeMethodCall();
        }
        try
        {
            delegate.addCASProductForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (addCASProductForUser5 != null)
            {
                addCASProductForUser5.incCalls(1);
                addCASProductForUser5.afterMethodCall();
                if (exception)
                {
                    addCASProductForUser5.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void addCASQuoteLockedNotification(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (addCASQuoteLockedNotification6 != null)
        {
            addCASQuoteLockedNotification6.beforeMethodCall();
        }
        try
        {
            delegate.addCASQuoteLockedNotification(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (addCASQuoteLockedNotification6 != null)
            {
                addCASQuoteLockedNotification6.incCalls(1);
                addCASQuoteLockedNotification6.afterMethodCall();
                if (exception)
                {
                    addCASQuoteLockedNotification6.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void addCASRFQClassForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (addCASRFQClassForUser7 != null)
        {
            addCASRFQClassForUser7.beforeMethodCall();
        }
        try
        {
            delegate.addCASRFQClassForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (addCASRFQClassForUser7 != null)
            {
                addCASRFQClassForUser7.incCalls(1);
                addCASRFQClassForUser7.afterMethodCall();
                if (exception)
                {
                    addCASRFQClassForUser7.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void addCASRecapClassForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (addCASRecapClassForUser8 != null)
        {
            addCASRecapClassForUser8.beforeMethodCall();
        }
        try
        {
            delegate.addCASRecapClassForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (addCASRecapClassForUser8 != null)
            {
                addCASRecapClassForUser8.incCalls(1);
                addCASRecapClassForUser8.afterMethodCall();
                if (exception)
                {
                    addCASRecapClassForUser8.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void addCASTickerClassForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (addCASTickerClassForUser9 != null)
        {
            addCASTickerClassForUser9.beforeMethodCall();
        }
        try
        {
            delegate.addCASTickerClassForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (addCASTickerClassForUser9 != null)
            {
                addCASTickerClassForUser9.incCalls(1);
                addCASTickerClassForUser9.afterMethodCall();
                if (exception)
                {
                    addCASTickerClassForUser9.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void addCASUser(java.lang.String param0, java.lang.String param1, java.lang.String param2)
    {
        boolean exception = false;
        if (addCASUser10 != null)
        {
            addCASUser10.beforeMethodCall();
        }
        try
        {
            delegate.addCASUser(param0, param1, param2);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (addCASUser10 != null)
            {
                addCASUser10.incCalls(1);
                addCASUser10.afterMethodCall();
                if (exception)
                {
                    addCASUser10.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void removeCASBookDepthProductForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (removeCASBookDepthProductForUser11 != null)
        {
            removeCASBookDepthProductForUser11.beforeMethodCall();
        }
        try
        {
            delegate.removeCASBookDepthProductForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (removeCASBookDepthProductForUser11 != null)
            {
                removeCASBookDepthProductForUser11.incCalls(1);
                removeCASBookDepthProductForUser11.afterMethodCall();
                if (exception)
                {
                    removeCASBookDepthProductForUser11.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void removeCASClassForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (removeCASClassForUser12 != null)
        {
            removeCASClassForUser12.beforeMethodCall();
        }
        try
        {
            delegate.removeCASClassForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (removeCASClassForUser12 != null)
            {
                removeCASClassForUser12.incCalls(1);
                removeCASClassForUser12.afterMethodCall();
                if (exception)
                {
                    removeCASClassForUser12.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void removeCASCurrentMarketClassForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (removeCASCurrentMarketClassForUser13 != null)
        {
            removeCASCurrentMarketClassForUser13.beforeMethodCall();
        }
        try
        {
            delegate.removeCASCurrentMarketClassForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (removeCASCurrentMarketClassForUser13 != null)
            {
                removeCASCurrentMarketClassForUser13.incCalls(1);
                removeCASCurrentMarketClassForUser13.afterMethodCall();
                if (exception)
                {
                    removeCASCurrentMarketClassForUser13.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void removeCASFirm(java.lang.String param0, java.lang.String param1, java.lang.String param2, com.cboe.idl.cmiUser.ExchangeFirmStruct param3)
    {
        boolean exception = false;
        if (removeCASFirm14 != null)
        {
            removeCASFirm14.beforeMethodCall();
        }
        try
        {
            delegate.removeCASFirm(param0, param1, param2, param3);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (removeCASFirm14 != null)
            {
                removeCASFirm14.incCalls(1);
                removeCASFirm14.afterMethodCall();
                if (exception)
                {
                    removeCASFirm14.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void removeCASOpeningPriceClassForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (removeCASOpeningPriceClassForUser15 != null)
        {
            removeCASOpeningPriceClassForUser15.beforeMethodCall();
        }
        try
        {
            delegate.removeCASOpeningPriceClassForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (removeCASOpeningPriceClassForUser15 != null)
            {
                removeCASOpeningPriceClassForUser15.incCalls(1);
                removeCASOpeningPriceClassForUser15.afterMethodCall();
                if (exception)
                {
                    removeCASOpeningPriceClassForUser15.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void removeCASProductForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (removeCASProductForUser16 != null)
        {
            removeCASProductForUser16.beforeMethodCall();
        }
        try
        {
            delegate.removeCASProductForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (removeCASProductForUser16 != null)
            {
                removeCASProductForUser16.incCalls(1);
                removeCASProductForUser16.afterMethodCall();
                if (exception)
                {
                    removeCASProductForUser16.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void removeCASQuoteLockedNotification(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (removeCASQuoteLockedNotification17 != null)
        {
            removeCASQuoteLockedNotification17.beforeMethodCall();
        }
        try
        {
            delegate.removeCASQuoteLockedNotification(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (removeCASQuoteLockedNotification17 != null)
            {
                removeCASQuoteLockedNotification17.incCalls(1);
                removeCASQuoteLockedNotification17.afterMethodCall();
                if (exception)
                {
                    removeCASQuoteLockedNotification17.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void removeCASRFQClassForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (removeCASRFQClassForUser18 != null)
        {
            removeCASRFQClassForUser18.beforeMethodCall();
        }
        try
        {
            delegate.removeCASRFQClassForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (removeCASRFQClassForUser18 != null)
            {
                removeCASRFQClassForUser18.incCalls(1);
                removeCASRFQClassForUser18.afterMethodCall();
                if (exception)
                {
                    removeCASRFQClassForUser18.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void removeCASRecapClassForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (removeCASRecapClassForUser19 != null)
        {
            removeCASRecapClassForUser19.beforeMethodCall();
        }
        try
        {
            delegate.removeCASRecapClassForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (removeCASRecapClassForUser19 != null)
            {
                removeCASRecapClassForUser19.incCalls(1);
                removeCASRecapClassForUser19.afterMethodCall();
                if (exception)
                {
                    removeCASRecapClassForUser19.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void removeCASTickerClassForUser(java.lang.String param0, java.lang.String param1, java.lang.String param2, java.lang.String param3, int param4)
    {
        boolean exception = false;
        if (removeCASTickerClassForUser20 != null)
        {
            removeCASTickerClassForUser20.beforeMethodCall();
        }
        try
        {
            delegate.removeCASTickerClassForUser(param0, param1, param2, param3, param4);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (removeCASTickerClassForUser20 != null)
            {
                removeCASTickerClassForUser20.incCalls(1);
                removeCASTickerClassForUser20.afterMethodCall();
                if (exception)
                {
                    removeCASTickerClassForUser20.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void removeCASUser(java.lang.String param0, java.lang.String param1, java.lang.String param2)
    {
        boolean exception = false;
        if (removeCASUser21 != null)
        {
            removeCASUser21.beforeMethodCall();
        }
        try
        {
            delegate.removeCASUser(param0, param1, param2);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (removeCASUser21 != null)
            {
                removeCASUser21.incCalls(1);
                removeCASUser21.afterMethodCall();
                if (exception)
                {
                    removeCASUser21.incExceptions(1);
                }
            }
        }
    }
}