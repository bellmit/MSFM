package com.cboe.domain.util;

import java.util.*;
import com.cboe.idl.cmiOrder.*;
import com.cboe.idl.cmiProduct.*;
import com.cboe.idl.cmiUtil.*;
import com.cboe.idl.cmiConstants.*;
import com.cboe.idl.cmiUser.ExchangeAcronymStruct;
import com.cboe.idl.order.OrderHandlingStruct;

/**
 * A helper that makes it easy to create a valid OrderStruct, with reasonable default
 * values, where appropriate.
 *
 * @author Werner Kubitsch
 */
public class OrderStructBuilder
{
    private static final Random generator = new Random();
    private static int branchSequenceNumber = 0;
    private static char[] asciiSet = null;
    static final int DATE_BASE = 1990;
    static final int DATE_RANGE = 102;
    private static final int ASCII_SET_SIZE = 62; // The number of alphanumeric characters
    private static final int UPPER_CASE_SIZE = 26; // The number of alphanumeric characters

    private static int highCboeId           = 0;
    private static int lowCboeId            = 0;

    static
    {
        asciiSet = new char[ASCII_SET_SIZE];
        char c; // Used for filling in set of characters
        int i;
        for (i = 0, c = 'A'; c <= 'Z'; i++, c++)
        {
            asciiSet[i] = c;
        }
        for (c = 'a'; c <= 'z'; i++, c++)
        {
            asciiSet[i] = c;
        }
        for (c = '0'; c <= '9'; i++, c++)
        {
            asciiSet[i] = c;
        }
    }
/**
 * private constructor
 */
private OrderStructBuilder()
{
    super();
}
/**
 * This method was created in VisualAge.
 * @author Werner Kubitsch
 * @return com.cboe.idl.cmiOrder.OrderContingencyStruct
 */
public static OrderContingencyStruct buildOrderContingencyStruct()
{
    OrderContingencyStruct aStruct = new OrderContingencyStruct();
    aStruct.type = ContingencyTypes.NONE;
    aStruct.price = StructBuilder.buildPriceStruct();
    aStruct.price.type = PriceTypes.VALUED;
    aStruct.volume = 0;
    return aStruct;
}
/**
 * Creates a default instance of a OrderEntryStruct.
 *
 * @return OrderEntryStruct
 *
 * @author Werner Kubitsch
 */
public static OrderEntryStruct buildOrderEntryStruct()
{
    OrderEntryStruct aStruct = new OrderEntryStruct();
    aStruct.account = "";
    aStruct.branch = "";
    aStruct.branchSequenceNumber = 0;
    aStruct.correspondentFirm = "";
    aStruct.cmta = StructBuilder.buildExchangeFirmStruct("", "");
    aStruct.contingency = buildOrderContingencyStruct();
    aStruct.coverage = ' ';
    aStruct.cross = false;
    aStruct.expireTime = StructBuilder.buildDateTimeStruct();
    aStruct.extensions = "";
    aStruct.executingOrGiveUpFirm = StructBuilder.buildExchangeFirmStruct("", "");
    aStruct.optionalData = "";
    aStruct.originalQuantity = 0;
    aStruct.orderOriginType = ' ';
    aStruct.positionEffect = ' ';
    aStruct.price = StructBuilder.buildPriceStruct();
    aStruct.productKey = 0;
    aStruct.side = 0;
    aStruct.subaccount = "";
    aStruct.timeInForce = ' ';
    aStruct.userAssignedId = "";
    aStruct.orderDate = TimeServiceWrapper.formatToDate();
    aStruct.originator = StructBuilder.buildExchangeAcronymStruct("", "");
    aStruct.sessionNames = new String[0];
    return aStruct;
}

public static OrderIdStruct buildOrderIdStruct( OrderEntryStruct orderEntry ) {

    OrderIdStruct orderId = null;
    if (orderEntry != null )
    {
        orderId = new OrderIdStruct();
        orderId.branch = orderEntry.branch;
        orderId.branchSequenceNumber = orderEntry.branchSequenceNumber;
        orderId.correspondentFirm = orderEntry.correspondentFirm;
        orderId.executingOrGiveUpFirm = orderEntry.executingOrGiveUpFirm;
        if (orderEntry.orderDate == null || orderEntry.orderDate.equals("")) {
            orderId.orderDate = TimeServiceWrapper.formatToDate();
        } else {
            orderId.orderDate = orderEntry.orderDate;
        }

        orderId.highCboeId = orderId.lowCboeId = 0;       // this will be generated by the OHS when returns
    }
    else
    {
        orderId = buildOrderIdStruct();
    }
    return orderId;
}

public static OrderStruct  buildOrderStruct(OrderEntryStruct orderEntry, ProductKeysStruct productKeys, String theUserId, ExchangeAcronymStruct userAcronym)
{
    OrderStruct order = null;
    if(orderEntry != null)
    {
        OrderIdStruct orderId = buildOrderIdStruct(orderEntry);

        order = new OrderStruct();
        order.account = orderEntry.account;
        order.cancelledQuantity = 0;

        order.leavesQuantity              = 0;
        order.averagePrice                = StructBuilder.clonePrice( orderEntry.price );
        order.sessionTradedQuantity       = 0;
        order.sessionCancelledQuantity    = 0;
        order.sessionAveragePrice         = StructBuilder.clonePrice( orderEntry.price );

        order.classKey = productKeys.classKey;
        order.cmta = orderEntry.cmta;
        order.contingency = orderEntry.contingency;
        order.coverage = orderEntry.coverage;
        order.orderNBBOProtectionType = orderEntry.orderNBBOProtectionType;
        order.cross = orderEntry.cross;
        order.crossedOrder = OrderStructBuilder.buildOrderIdStruct(); // default
        order.expireTime = orderEntry.expireTime;
        order.extensions = orderEntry.extensions;
        order.optionalData = orderEntry.optionalData;
        order.orderId = orderId;
        order.originalQuantity = orderEntry.originalQuantity;
        order.orderOriginType = orderEntry.orderOriginType;
        order.originator = orderEntry.originator;
        order.orsId = "";
        order.positionEffect = orderEntry.positionEffect;
        order.price = orderEntry.price;
        order.productKey = productKeys.productKey;
        order.productType = productKeys.productType;
        order.receivedTime = TimeServiceWrapper.toDateTimeStruct();
        order.side = orderEntry.side;
        order.source = Sources.SBT;
        order.state = OrderStates.ACTIVE;
        order.subaccount = orderEntry.subaccount;
        order.timeInForce = orderEntry.timeInForce;
        order.tradedQuantity = 0;
        order.transactionSequenceNumber = 1;
        order.userId = theUserId;
        order.userAssignedId = orderEntry.userAssignedId;
        order.activeSession = "";
        order.sessionNames = new String[ orderEntry.sessionNames.length ];
        order.userAcronym = userAcronym;
        for ( int i = 0; i < orderEntry.sessionNames.length; i++ )
        {
            order.sessionNames[ i ] = orderEntry.sessionNames[ i ];
        }
        order.legOrderDetails = buildLegOrderDetailStructSequence();
    }
    else
    {
        order = buildOrderStruct();
    }
    return order;
}

public static OrderStruct buildUpdateOrderStruct(OrderEntryStruct orderEntry, OrderStruct originalOrder)
{
    OrderStruct order = null;
    if(orderEntry != null)
    {
        OrderIdStruct orderId = cloneOrderIdStruct(originalOrder.orderId);

        order = new OrderStruct();
        order.account = orderEntry.account;
        order.cancelledQuantity = originalOrder.cancelledQuantity;

        order.leavesQuantity              = originalOrder.leavesQuantity;
        order.averagePrice                = originalOrder.averagePrice;
        order.sessionTradedQuantity       = originalOrder.sessionTradedQuantity;
        order.sessionCancelledQuantity    = originalOrder.sessionCancelledQuantity;
        order.sessionAveragePrice         = originalOrder.sessionAveragePrice;

        order.classKey = originalOrder.classKey;
        order.cmta = orderEntry.cmta;
        order.contingency = orderEntry.contingency;
        order.coverage = orderEntry.coverage;
        order.orderNBBOProtectionType = orderEntry.orderNBBOProtectionType;
        order.cross = orderEntry.cross;
        order.crossedOrder = cloneOrderIdStruct(originalOrder.crossedOrder);
        order.expireTime = orderEntry.expireTime;
        order.extensions = orderEntry.extensions;
        order.optionalData = orderEntry.optionalData;
        order.orderId = orderId;
        order.originalQuantity = orderEntry.originalQuantity;
        order.orderOriginType = orderEntry.orderOriginType;
        order.originator = originalOrder.originator;
        order.orsId = originalOrder.orsId;
        order.positionEffect = orderEntry.positionEffect;
        order.price = orderEntry.price;
        order.productKey = originalOrder.productKey;
        order.productType = originalOrder.productType;
        order.receivedTime = originalOrder.receivedTime;
        order.side = orderEntry.side;
        order.source = originalOrder.source;
        order.state = originalOrder.state;
        order.subaccount = orderEntry.subaccount;
        order.timeInForce = orderEntry.timeInForce;
        order.tradedQuantity = originalOrder.tradedQuantity;
        order.transactionSequenceNumber = originalOrder.transactionSequenceNumber;
        order.userId = originalOrder.userId;
        order.userAssignedId = orderEntry.userAssignedId;
        order.activeSession = originalOrder.activeSession;
        order.sessionNames = new String[ orderEntry.sessionNames.length ];
        order.userAcronym = originalOrder.userAcronym;
        for ( int i = 0; i < orderEntry.sessionNames.length; i++ )
        {
            order.sessionNames[ i ] = orderEntry.sessionNames[ i ];
        }
        order.legOrderDetails = originalOrder.legOrderDetails;
    }
    return order;
}

/**
 * This method was created in VisualAge.
 * @author Werner Kubitsch
 * @return com.cboe.idl.cmiOrder.OrderIdStruct
 */
public static OrderIdStruct buildOrderIdStruct()
{
    OrderIdStruct newOrderId = new OrderIdStruct();
    newOrderId.branch = "";
    newOrderId.branchSequenceNumber = 0;
    newOrderId.correspondentFirm = "";
    newOrderId.executingOrGiveUpFirm = StructBuilder.buildExchangeFirmStruct("", "");
    newOrderId.orderDate = TimeServiceWrapper.formatToDate();
    newOrderId.highCboeId   = 0;
    newOrderId.lowCboeId    = 0;
    return newOrderId;
}

/**
 * Note: this method is provided to simulator or any testing program which wants cboehigh and
 * cboelow are automatically generated.
 *
 * When building "real" orderIdStruct, should always use buildOrderIdStruct(), because cboehigh and
 * cboelow have to be generated and controlled by trade engine.
 */

//DO NOT UNSYNCHRONIZE THIS METHOD otherwise the auction simulation in the CMi Simulator will break.
// EJF 11/15/2004
public static synchronized OrderIdStruct buildOrderIdStructWithCboeHighLow()
{
    OrderIdStruct newOrderId = buildOrderIdStruct();
    lowCboeId++;
    if( lowCboeId > 100 ){
        highCboeId++;
        lowCboeId = 0;
    }
    newOrderId.highCboeId   = highCboeId;
    newOrderId.lowCboeId    = lowCboeId;
    return newOrderId;
}
/**
 * This method was created in VisualAge.
 * @author Werner Kubitsch
 * @return com.cboe.idl.cmiOrder.OrderStruct
 */
public static OrderStruct buildOrderStruct()
{
    OrderStruct aStruct = new OrderStruct();
    aStruct.account = "";
    aStruct.cancelledQuantity = 0;

    aStruct.leavesQuantity              = 0;
    aStruct.averagePrice                = new PriceStruct( PriceTypes.VALUED, 0, 0 );
    aStruct.sessionTradedQuantity       = 0;
    aStruct.sessionCancelledQuantity    = 0;
    aStruct.sessionAveragePrice         = new PriceStruct( PriceTypes.VALUED, 0, 0 );

    aStruct.classKey = 0;
    aStruct.cmta = StructBuilder.buildExchangeFirmStruct("", "");
    aStruct.contingency = buildOrderContingencyStruct();
    aStruct.coverage = ' ';
    aStruct.orderNBBOProtectionType = OrderNBBOProtectionTypes.NONE;
    aStruct.cross = false;
    aStruct.crossedOrder = buildOrderIdStruct();
    aStruct.expireTime = StructBuilder.buildDateTimeStruct();
    aStruct.extensions = "";
    aStruct.optionalData = "";
    aStruct.orderId = buildOrderIdStruct();
    aStruct.originalQuantity = 0;
    aStruct.orderOriginType = ' ';
    aStruct.originator = StructBuilder.buildExchangeAcronymStruct("", "");
    aStruct.orsId = "";
    aStruct.positionEffect = ' ';
    aStruct.price = StructBuilder.buildPriceStruct();
    aStruct.productType = 0;
    aStruct.productKey = 0;
    aStruct.receivedTime = StructBuilder.buildDateTimeStruct();
    aStruct.side = 0;
    aStruct.source = ' ';
    aStruct.state = OrderStates.ACTIVE;
    aStruct.subaccount = "";
    aStruct.timeInForce = ' ';
    aStruct.tradedQuantity = 0;
    aStruct.transactionSequenceNumber = 0;
    aStruct.userId = "";
    aStruct.userAssignedId = "";
    aStruct.activeSession = "";
    aStruct.sessionNames = new String[ 0 ];
    aStruct.legOrderDetails = buildLegOrderDetailStructSequence();
    aStruct.userAcronym = new ExchangeAcronymStruct("","");

     return aStruct;
}

    public static OrderHandlingStruct buildOrderHandlingStruct()
    {
        OrderHandlingStruct aStruct = new OrderHandlingStruct();
        aStruct.account = "";
        aStruct.cancelledQuantity = 0;
        aStruct.leavesQuantity = 0;
        aStruct.bustedQuantity = 0;
        aStruct.classKey = 0;
        aStruct.cmta = StructBuilder.buildExchangeFirmStruct("", "");
        aStruct.contingency = buildOrderContingencyStruct();
        aStruct.coverage = ' ';
        aStruct.orderNBBOProtectionType = OrderNBBOProtectionTypes.NONE;
        aStruct.cross = false;
        aStruct.crossedOrder = buildOrderIdStruct();
        aStruct.extensions = "";
        aStruct.optionalData = "";
        aStruct.orderId = buildOrderIdStruct();
        aStruct.originalQuantity = 0;
        aStruct.orderOriginType = ' ';
        aStruct.originator = StructBuilder.buildExchangeAcronymStruct("", "");
        aStruct.orsId = "";
        aStruct.positionEffect = ' ';
        aStruct.price = StructBuilder.buildPriceStruct();
        aStruct.productType = 0;
        aStruct.productKey = 0;
        aStruct.ohsReceivedTime = 0;
        aStruct.sourceReceivedTime = 0;
        aStruct.side = 0;
        aStruct.source = ' ';
        aStruct.state = OrderStates.ACTIVE;
        aStruct.subaccount = "";
        aStruct.timeInForce = ' ';
        aStruct.tradedQuantity = 0;
        aStruct.transactionSequenceNumber = 0;
        aStruct.userId = "";
        aStruct.userAssignedId = "";
        aStruct.activeSession = "";
        aStruct.sessionNames = new String[ 0 ];
        aStruct.legOrderDetails = buildLegOrderDetailStructSequence();
        aStruct.addedQuantity = 0;
        aStruct.nbboProtectionOverriden = false;
        aStruct.hadNBBOProtection = false;
        aStruct.handlingInstruction = "";

        return aStruct;
    }


    /**
     * Builds CancelRequestStruct
     *
     * @return com.cboe.idl.cmiOrder.CancelRequestStruct
     */
    public static CancelRequestStruct buildCancelRequestStruct()
    {
        CancelRequestStruct aStruct = new CancelRequestStruct();
        aStruct.cancelType = OrderCancelTypes.CANCEL_ALL_QUANTITY;
        aStruct.orderId = buildOrderIdStruct();
        aStruct.quantity = 0;
        aStruct.sessionName = "";
        aStruct.userAssignedCancelId = "";

        return aStruct;
    }

    /**
     * Builds CancelRequestStruct
     * @param cnacelType
     * @param orderId OrderIdStruct
     * @param quantity int
     * @param sessionName String
     * @param cancelId String
     * @return com.cboe.idl.cmiOrder.CancelRequestStruct
     */
    public static CancelRequestStruct buildCancelRequestStruct(short cancelType, OrderIdStruct orderId, int quantity, String sessionName, String cancelId)
    {
        CancelRequestStruct aStruct = new CancelRequestStruct();
        aStruct.cancelType = cancelType;
        aStruct.orderId = orderId;
        aStruct.quantity = quantity;
        aStruct.sessionName = sessionName;
        aStruct.userAssignedCancelId = cancelId;

        return aStruct;
    }

    public static CancelReportStruct buildCancelReportStruct(
            CancelRequestStruct cancelRequest, int productKey, String orsId, 
            short reportType, short cancelReason, int transactionSeqNumber) 
    {
        CancelReportStruct aStruct = new CancelReportStruct();
        aStruct.cancelledQuantity = cancelRequest.quantity;
        aStruct.cancelReason = cancelReason;
        aStruct.cancelReportType =  reportType;
        aStruct.mismatchedQuantity = 0;
        aStruct.orderId = cancelRequest.orderId;
        aStruct.orsId = orsId;
        aStruct.productKey = productKey;
        aStruct.sessionName = cancelRequest.sessionName;
        aStruct.timeSent = DateWrapper.convertToDateTime(TimeServiceWrapper.getCurrentDateTimeInMillis());
        aStruct.tlcQuantity = 0;
        aStruct.totalCancelledQuantity = 0;
        aStruct.transactionSequenceNumber = transactionSeqNumber;
        aStruct.userAssignedCancelId = cancelRequest.userAssignedCancelId;
        return aStruct;        
    }
    
public static LegOrderDetailStruct[] buildLegOrderDetailStructSequence()
{
    LegOrderDetailStruct legOrderDetail = new LegOrderDetailStruct();
    legOrderDetail.clearingFirm = StructBuilder.buildExchangeFirmStruct("", "");
    legOrderDetail.coverage = ' ';
    legOrderDetail.mustUsePrice = StructBuilder.buildPriceStruct();
    legOrderDetail.positionEffect = ' ';
    legOrderDetail.productKey = 0;
    legOrderDetail.side = 0;

    LegOrderDetailStruct[] legOrderDetails = {legOrderDetail};

    return legOrderDetails;
}
/**
 * This method was created in VisualAge.
 * @return int
 */
public static int positiveRandomInt() {
    int retVal = generator.nextInt();
    if ( retVal < 0 ) {
        retVal = -retVal;
    }
    return retVal;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.String
 */
public static String randomString(int length) {
    // Generate a random string for use in arbitrarily setting order IDs to what we can
    // hope is a unique value
    char[] retVal = new char[ length ];
    for ( int i = 0; i < length; i++ ) {
        retVal[ i ] = asciiSet[ positiveRandomInt() %  ASCII_SET_SIZE ];
    }
    return new String( retVal );
}
/**
 * create random upper case string.
 * @return java.lang.String
 */
public static String randomUpperString(int length) {
    // Generate a random string for use in arbitrarily setting order IDs to what we can
    // hope is a unique value
    char[] retVal = new char[ length ];
    for ( int i = 0; i < length; i++ ) {
        retVal[ i ] = asciiSet[ positiveRandomInt() %  UPPER_CASE_SIZE ];
    }
    return new String( retVal );
}

public static OrderStruct cloneOrderStruct(OrderStruct order)
{
    OrderStruct clonedOrder = null;

    if (order != null )
    {
        clonedOrder = new OrderStruct();
        clonedOrder.account = order.account;
        clonedOrder.cancelledQuantity = order.cancelledQuantity;

        clonedOrder.leavesQuantity              = order.leavesQuantity;
        clonedOrder.averagePrice                = StructBuilder.clonePrice( order.averagePrice );
        clonedOrder.sessionTradedQuantity       = order.sessionTradedQuantity;
        clonedOrder.sessionCancelledQuantity    = order.sessionCancelledQuantity;
        clonedOrder.sessionAveragePrice         = StructBuilder.clonePrice( order.sessionAveragePrice );

        clonedOrder.classKey = order.classKey;
        clonedOrder.cmta = StructBuilder.cloneExchangeFirmStruct(order.cmta);
        clonedOrder.contingency = cloneOrderContingencyStruct(order.contingency);
        clonedOrder.coverage = order.coverage;
        clonedOrder.orderNBBOProtectionType = order.orderNBBOProtectionType;
        clonedOrder.cross = order.cross;
        clonedOrder.crossedOrder = cloneOrderIdStruct(order.crossedOrder);
        clonedOrder.expireTime = StructBuilder.cloneDateTime(order.expireTime);
        clonedOrder.extensions = order.extensions;
        clonedOrder.optionalData = order.optionalData;
        clonedOrder.orderId = cloneOrderIdStruct(order.orderId);
        clonedOrder.originalQuantity = order.originalQuantity;
        clonedOrder.originator = StructBuilder.cloneExchangeAcronymStruct(order.originator);
        clonedOrder.orderOriginType = order.orderOriginType;
        clonedOrder.orsId = order.orsId;
        clonedOrder.positionEffect = order.positionEffect;
        clonedOrder.price = StructBuilder.clonePrice(order.price);
        clonedOrder.productKey = order.productKey;
        clonedOrder.productType = order.productType;
        clonedOrder.receivedTime = StructBuilder.cloneDateTime(order.receivedTime);
        clonedOrder.side = order.side;
        clonedOrder.source = order.source;
        clonedOrder.state = order.state;
        clonedOrder.subaccount = order.subaccount;
        clonedOrder.timeInForce = order.timeInForce;
        clonedOrder.tradedQuantity = order.tradedQuantity;
        clonedOrder.transactionSequenceNumber = order.transactionSequenceNumber;
        clonedOrder.userId = order.userId;
        clonedOrder.userAssignedId = order.userAssignedId;
        clonedOrder.userAcronym = StructBuilder.cloneExchangeAcronymStruct(order.userAcronym);
        clonedOrder.activeSession = order.activeSession;

        clonedOrder.sessionNames = new String[ order.sessionNames.length ];
        for ( int i = 0; i < order.sessionNames.length; i++ )
        {
            clonedOrder.sessionNames[ i ] = order.sessionNames[ i ];
        }
        clonedOrder.legOrderDetails = new LegOrderDetailStruct[order.legOrderDetails.length];
        for ( int j = 0; j < order.legOrderDetails.length; j++ )
        {
            clonedOrder.legOrderDetails[ j ] = cloneLegOrderDetailStruct(order.legOrderDetails[ j ]);
            
        }
    }
    return clonedOrder;
}

public static LegOrderDetailStruct cloneLegOrderDetailStruct(LegOrderDetailStruct leg)
{
	if (leg == null)
	{
		return null;
	}
	LegOrderDetailStruct clonedLegOrderDetail  = new LegOrderDetailStruct(leg.productKey,
			StructBuilder.clonePrice(leg.mustUsePrice),
			leg.clearingFirm,
			leg.coverage,
			leg.positionEffect,
			leg.side,
			leg.originalQuantity,
			leg.tradedQuantity,
			leg.cancelledQuantity,
			leg.leavesQuantity);
	
	return clonedLegOrderDetail;
}

public static OrderDetailStruct[] cloneOrderDetailStructs(OrderDetailStruct[] orders)
{
    if ( orders == null )
    {
        return null;
    }
    else
    {
        OrderDetailStruct[] cloned = new OrderDetailStruct[orders.length];
        for ( int i = 0; i < orders.length; i++ )
        {
            cloned[i] = cloneOrderDetailStruct(orders[i]);
        }

        return cloned;
    }
}

public static OrderDetailStruct cloneOrderDetailStruct(OrderDetailStruct order)
{
    OrderDetailStruct clonedOrder = null;

    if (order != null )
    {
        clonedOrder = new OrderDetailStruct();
        clonedOrder.orderStruct = cloneOrderStruct(order.orderStruct);
        clonedOrder.statusChange = order.statusChange;
        clonedOrder.productInformation = ClientProductStructBuilder.cloneProductName(order.productInformation);
    }
    return clonedOrder;
}


public static OrderEntryStruct cloneOrderEntryStruct(OrderEntryStruct orderEntry)
{
    OrderEntryStruct clonedEntry = null;

    if ( orderEntry != null )
    {
        clonedEntry = new OrderEntryStruct();
        clonedEntry.account = orderEntry.account;
        clonedEntry.branch = orderEntry.branch;
        clonedEntry.branchSequenceNumber = orderEntry.branchSequenceNumber;
        clonedEntry.cmta = orderEntry.cmta;
        clonedEntry.contingency = cloneOrderContingencyStruct(orderEntry.contingency);
        clonedEntry.correspondentFirm = orderEntry.correspondentFirm;
        clonedEntry.coverage = orderEntry.coverage;
        clonedEntry.orderNBBOProtectionType = orderEntry.orderNBBOProtectionType;
        clonedEntry.cross = orderEntry.cross;
        clonedEntry.expireTime = StructBuilder.cloneDateTime(orderEntry.expireTime);
        clonedEntry.executingOrGiveUpFirm = orderEntry.executingOrGiveUpFirm;
        clonedEntry.extensions = orderEntry.extensions;
        clonedEntry.optionalData = orderEntry.optionalData;
        clonedEntry.originalQuantity = orderEntry.originalQuantity;
        clonedEntry.orderOriginType = orderEntry.orderOriginType;
        clonedEntry.positionEffect = orderEntry.positionEffect;
        clonedEntry.price = StructBuilder.clonePrice(orderEntry.price);
        clonedEntry.productKey = orderEntry.productKey;
        clonedEntry.side = orderEntry.side;
        clonedEntry.subaccount = orderEntry.subaccount;
        clonedEntry.timeInForce = orderEntry.timeInForce;
        clonedEntry.orderDate = orderEntry.orderDate;
        clonedEntry.userAssignedId = orderEntry.userAssignedId;
        clonedEntry.originator = orderEntry.originator;

        clonedEntry.sessionNames = new String[ orderEntry.sessionNames.length ];
        for ( int i = 0; i < orderEntry.sessionNames.length; i++ )
        {
            clonedEntry.sessionNames[ i ] = orderEntry.sessionNames[ i ];
        }
     }

     return clonedEntry;
}

public static OrderContingencyStruct cloneOrderContingencyStruct(OrderContingencyStruct contingency)
{
    OrderContingencyStruct theCloned = null;
    if( contingency != null )
    {
        theCloned = new OrderContingencyStruct();
        theCloned.price = StructBuilder.clonePrice(contingency.price);
        theCloned.type = contingency.type;
        theCloned.volume = contingency.volume;
    }

    return theCloned;
}
public static OrderIdStruct cloneOrderIdStruct(OrderIdStruct orderId)
{
    OrderIdStruct clonedID = null;

    if ( orderId != null )
    {
        clonedID = new OrderIdStruct();

        clonedID.branch = orderId.branch;
        clonedID.branchSequenceNumber = orderId.branchSequenceNumber;
        clonedID.correspondentFirm = orderId.correspondentFirm;
        clonedID.executingOrGiveUpFirm = orderId.executingOrGiveUpFirm;
        clonedID.orderDate = orderId.orderDate;
        clonedID.highCboeId = orderId.highCboeId;
        clonedID.lowCboeId = orderId.lowCboeId;
    }

    return clonedID;
}
/*
 * Calculates and returns the remaining quantity for an order.
 */
public static int getRemainingQuantity(OrderStruct anOrder)
{
    return( anOrder.leavesQuantity = ( anOrder.originalQuantity - anOrder.cancelledQuantity - anOrder.tradedQuantity ) );
}

public static int getRemainingQuantity(OrderHandlingStruct anOrder)
{
    return( anOrder.leavesQuantity = ( anOrder.originalQuantity - anOrder.cancelledQuantity - anOrder.tradedQuantity ) );
}
}
