package com.cboe.domain.user;

//----------------------------------------------------------------------
// Source file: Java/com/cboe/domain/user/Profile.java
//
// PACKAGE: com.cboe.domain.user
//----------------------------------------------------------------------
// Copyright (c) 2000 The Chicago Board Options Exchange. All Rights Reserved.
//----------------------------------------------------------------------

import com.cboe.infrastructureServices.foundationFramework.PersistentBObject;
import com.cboe.infrastructureServices.persistenceService.AttributeDefinition;
import com.cboe.infrastructureServices.persistenceService.DBAdapter;
import com.cboe.infrastructureServices.persistenceService.ObjectChangesIF;
import com.cboe.infrastructureServices.foundationFramework.utilities.Log;
import com.cboe.util.ExceptionBuilder;
import com.cboe.idl.cmiUser.AccountStruct;
import com.cboe.idl.cmiUser.SessionProfileStruct;
import com.cboe.exceptions.DataValidationException;
import java.lang.reflect.Field;
import java.util.Vector;

/**
 * A Profile
 *
 * @author Matt Sochacki
 */
public class Profile extends PersistentBObject {

	/**
	 * Table name used for object mapping.
	 */
	public static final String TABLE_NAME = "profile";

	/**
	 * Associated user
	 */
	private AcronymUserImpl user;

	/**
	 * Product class key
	 */
	private int classKey;

	/**
	 * Account name
	 */
	private UserAccountRelation userAccount;

	/**
	 * Sub-Account
	 */
	private String subAccount;

	/**
	 * was profile generated by membership download processing?
	 */
	private boolean membershipDefined;

    /**
     * profile session Name
     */
    private String sessionName;
    /**
     * profile flag
     */
    private boolean accountBlanked;

    /**
     * origin code
     */
    String               originCode;

	/*
	 * Fields for JavaGrinder.
	 */
	private static Field _user;
	private static Field _classKey;
	private static Field _userAccount;
	private static Field _subAccount;
	private static Field _membershipDefined;
    private static Field _sessionName;
    private static Field _accountBlanked;
    private static Field _originCode;

	/*
	 * JavaGrinder attribute descriptions.
	 */
	private static Vector classDescriptor;

	/*
	 * Initialize fields
	 */
    static
    {
        try
        {
            _user = Profile.class.getDeclaredField("user");
            _classKey = Profile.class.getDeclaredField("classKey");
            _userAccount = Profile.class.getDeclaredField("userAccount");
            _subAccount = Profile.class.getDeclaredField("subAccount");
            _membershipDefined = Profile.class.getDeclaredField("membershipDefined");
            _sessionName = Profile.class.getDeclaredField("sessionName");
            _accountBlanked = Profile.class.getDeclaredField("accountBlanked");
            _originCode = Profile.class.getDeclaredField("originCode");
        }
        catch (Exception e)
        {
            System.out.println("Unable to initialize JavaGrinder fields for Profile: " + e);
        }
    }

	/**
	 * Constructs a new Profile.  This constructor is needed for queries.
	 */
	public Profile() {
	}

	/**
	 * Constructs a new profile
	 *
	 * @param user
	 * @param classKey
	 * @param userAccount
	 * @param subAccount
	 * @param sessionName
	 */
    public Profile( AcronymUserImpl user, int classKey, UserAccountRelation userAccount, String subAccount, String sessionName, boolean accountBlank, char originCode )
    {
        super();
        setUser( user );
        setClassKey( classKey );
        setUserAccount( userAccount );
        setSubAccount( subAccount );
        setSessionName( sessionName );
        setAccountBlanked(accountBlank);
        setOriginCode("" + originCode);
    }

	/**
	 * Constructs a new profile
	 *
	 * @param user
	 */
	public Profile( AcronymUserImpl user ){
		super();
		setUser( user );
	}

	/**
	 * Gets the user
	 */
	public AcronymUserImpl getUser() {
		return (AcronymUserImpl) editor.get(_user, user);
	}

	/**
	 * Gets classKey
	 */
	public int getClassKey() {
		return editor.get(_classKey, classKey);
	}

	/**
	 * Gets the user's account.
	 */
	public UserAccountRelation getUserAccount() {
		return (UserAccountRelation) editor.get(_userAccount, userAccount);
	}

	/**
	 * Gets sub-account name.
	 */
	public String getSubAccount() {
		return (String) editor.get(_subAccount, subAccount);
	}

	/**
	 * @return booelean - true if profile was generated by membership download processing?
	 */
	public boolean isMembershipDefined() {
		return editor.get(_membershipDefined, membershipDefined);
	}

    /**
     * Gets session  name.
     */
    public String getSessionName()
    {
        return (String) editor.get(_sessionName, sessionName);
    }

    /**
     * @return booelean
     */
    public boolean isAccountBlanked()
    {
        return editor.get(_accountBlanked, accountBlanked);
    }

    /**
     * @return booelean
     */
    public String getOriginCode()
    {
        return (String)editor.get(_originCode, originCode);
    }
	/**
	 * Describe how this class relates to the relational database.
	 */
	public void initDescriptor()
	{
		synchronized (Profile.class)
		{
			if (classDescriptor != null)
				return;
			Vector tempDescriptor = getSuperDescriptor();
			tempDescriptor.addElement(AttributeDefinition.getForeignRelation(AcronymUserImpl.class, "user_key", _user));
			tempDescriptor.addElement(AttributeDefinition.getAttributeRelation("class_key", _classKey));
			tempDescriptor.addElement(AttributeDefinition.getInstanceRelation(UserAccountRelation.class, "account_relation_key", _userAccount));
			tempDescriptor.addElement(AttributeDefinition.getAttributeRelation("subaccount", _subAccount));
			tempDescriptor.addElement(AttributeDefinition.getAttributeRelation("membershipDefined", _membershipDefined));
            tempDescriptor.addElement(AttributeDefinition.getAttributeRelation("sessionName", _sessionName));
            tempDescriptor.addElement(AttributeDefinition.getAttributeRelation("accountBlanked", _accountBlanked));
            tempDescriptor.addElement(AttributeDefinition.getAttributeRelation("originCode", _originCode));
			classDescriptor = tempDescriptor;
		}
	}

	/**
	* Needed to define table name and the description of this class.
	*/
	public ObjectChangesIF initializeObjectEditor()
	{
		final DBAdapter result = (DBAdapter) super.initializeObjectEditor();
		if (classDescriptor == null)
			initDescriptor();
		result.setTableName(TABLE_NAME);
		result.setClassDescription(classDescriptor);
		return result;
	}

	/**
	 * Sets the user.
	 *
	 * @param user
	 */
	public void setUser(AcronymUserImpl newUser) {
		editor.set(_user, newUser, user);
	}

	/**
	 * Sets the class key.
	 *
	 * @param classKey  product class key for the profile
	 */
	protected void setClassKey(int newClassKey) {
		editor.set(_classKey, newClassKey, classKey);
	}

	/**
	 * Sets the account.
	 *
	 * @param newAccountRelation acount relation
	 */
	protected void setUserAccount(UserAccountRelation newAccountRelation) {
		editor.set(_userAccount, newAccountRelation, userAccount);
	}


	/**
	 * Sets the sub account name.
	 *
	 * @param accountName of the account name
	 */
	protected void setSubAccount(String newSubAccount) {
		editor.set(_subAccount, newSubAccount, subAccount);
	}

	/*
	 * @param membershipDefined - true if this profile was generated by the membership download.
	 */
	protected void setMembershipDefined(boolean membershipDefined) {
		editor.set(_membershipDefined, membershipDefined, this.membershipDefined);
	}

    /*
    * @param sessionName - the session name of the profile.
    */
    protected void setSessionName(String sessionName)
    {
        editor.set(_sessionName, sessionName, this.sessionName);
    }

    /*
    * @param accountBlanked boolean
    */
    protected void setAccountBlanked(boolean accountBlanked)
    {
        editor.set(_accountBlanked, accountBlanked, this.accountBlanked);
    }
    /*
    * @param originCode char
    */
    protected void setOriginCode(String originCode)
    {
        editor.set(_originCode, originCode, this.originCode);
    }
	/**
	 * Formats this assignment as a string.
	 */
	public String toString() {
		return getClassKey() + ":" + getSessionName() + ":" + getUserAccount().getAccount().getAcronym() + ":" + getSubAccount();
	}


	/**
	 * This method allows me to get arounds security problems with updating
	 * and object from a generic framework.
	 */
	public void update(boolean get, Object[] data, Field[] fields)
	{
		for (int i = 0; i < data.length; i++)
		{
			try
			{
				if (get)
					data[i] = fields[i].get(this);
				else
					fields[i].set(this, data[i]);
			}
			catch (IllegalAccessException ex)
			{
				System.out.println(ex);
			}
			catch (IllegalArgumentException ex)
			{
				System.out.println(ex);
			}
		}
	}

	/**
	 * Sets all values for the user from the definition struct.
	 *
	 * @param profileStruct
	 * @exception DataValidationException if validation checks fail
	 */
	public void fromStruct(SessionProfileStruct profileStruct) throws DataValidationException
	{
		UserAccountRelation userAccount = getUser().getAccount( profileStruct.account, profileStruct.executingGiveupFirm);
		if( userAccount == null ){
            throw ExceptionBuilder.dataValidationException("Unable to find account: " + profileStruct.account + " with executingGiveupFirm: " + profileStruct.executingGiveupFirm.exchange + "-" + profileStruct.executingGiveupFirm.firmNumber, 0);
		}
		setUserAccount( userAccount);
		setSubAccount(profileStruct.subAccount);
		setClassKey(profileStruct.classKey);

        if (!getUser().isValidSessionName(profileStruct.sessionName))
        {
            String message = "the Profile sessionName is INVALID: " + profileStruct.sessionName +
                             ", defined for UserId: " + getUser().loggableName() +
                             ", with (Account: " + profileStruct.account +
                             ", subAccount: " + profileStruct.subAccount +
                             ", executingGiveupFirm: " + profileStruct.executingGiveupFirm.exchange + "-" + profileStruct.executingGiveupFirm.firmNumber + ")";
            Log.alarm(this, message);
            throw ExceptionBuilder.dataValidationException(message, 0);
        }
        setSessionName(profileStruct.sessionName);

        if (!profileStruct.account.equals(getUser().getAcronym()) && profileStruct.isAccountBlanked)
        {
            String message = "the Profile flag cannot be set to true when the profile acronym is not same as the user's acronym " + getUser().getAcronym() +
                    ", with profile (Account: " + profileStruct.account +
                    ", subAccount: " + profileStruct.subAccount +
                    ", executingGiveupFirm: " + profileStruct.executingGiveupFirm.exchange + "-" + profileStruct.executingGiveupFirm.firmNumber + ")";
            Log.alarm(this, message);
            throw ExceptionBuilder.dataValidationException(message, 0);
        }
        setAccountBlanked(profileStruct.isAccountBlanked);

        if(profileStruct.originCode == '\0')
        {
            Log.alarm(this, "trying to set originCode to a null char.  Will reset to space instead for user: " + getUser().getAcronym());
            profileStruct.originCode = ' ';
        }

        setOriginCode("" + profileStruct.originCode);

        if(getOriginCode() == null || getOriginCode().equals(""))
        {
            Log.alarm(this, "Still trying to set originCode to a empty char.  Will reset to space instead for user: " + getUser().getAcronym());
            setOriginCode(" ");
        }

	}

    private char getOriginCodeAsChar()
    {
        if(getOriginCode() == null || getOriginCode().equals(""))
        {
                return ' ';
        }
        else
        {
                return getOriginCode().charAt(0);
        }
    }

	/**
	 * Creates a Profile
	 *
	 */
    public SessionProfileStruct toStruct()
    {
        SessionProfileStruct ps = new SessionProfileStruct();
        ps.classKey = getClassKey();
        AccountStruct as = getUserAccount().toStruct();
        ps.account = as.account;
        ps.subAccount = getSubAccount();
        ps.executingGiveupFirm = as.executingGiveupFirm;
        ps.sessionName = getSessionName();
        ps.isAccountBlanked = isAccountBlanked();
        ps.originCode = this.getOriginCodeAsChar();
        return ps;
    }
}

