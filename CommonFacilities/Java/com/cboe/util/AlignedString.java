package com.cboe.util;

/**
 * This class was generated by a SmartGuide.
 * 
 */
public class AlignedString {
	protected byte alignment;
	protected byte[] filler;
	protected byte[] stringBytes;
	protected int resultLen;
		
	public static final byte ALIGN_LEFT = 1;
	public static final byte ALIGN_RIGHT = 2;
/**
 * constructor for object with toString method
 * @param anObject java.lang.Object
 */
public AlignedString (Object anObject, byte theAlignment, int length) 
{
	String theString = anObject.toString();
	stringBytes = new byte[theString.length()];
	stringBytes = theString.getBytes();
	
	if (theAlignment != ALIGN_LEFT && theAlignment != ALIGN_RIGHT)
		alignment = ALIGN_LEFT;
	else	
		alignment = theAlignment;
		
	resultLen = (stringBytes.length > length) ? stringBytes.length : length;

	filler = new byte[resultLen - stringBytes.length];
//	for (int i = 0; i < filler.length; i++)
//		filler[i] = getFillerByte();	
}
/**
 * This method was created in VisualAge.
 * @author Werner Kubitsch
 * @param anObject java.lang.Object
 * @param length int
 */
public AlignedString(Object anObject, int length) 
{
	this(anObject, ALIGN_LEFT, length);
}
/**
 * This method was created in VisualAge.
 * @author Werner Kubitsch
 * @return byte
 */
private byte getFillerByte() {
	return (byte) ' ';
}
/**
 * This method does the actual aligning of the string by either filling 
 * on the left or the right with spaces.
 *
 * @author Werner Kubitsch
 */
public String toString() 
{
	byte f = getFillerByte();
	
	for (int i = 0; i < filler.length; i++)
		filler[i] = f;	
		
	// determine how many spaces are needed 
	int fillLen = resultLen - stringBytes.length;
	if (fillLen < 0)
		return(new String(stringBytes));
	
	// create a char array big enough for the resulting char string
	byte[] result = new byte[fillLen + stringBytes.length];
	if (alignment == ALIGN_RIGHT)
	{
		System.arraycopy(filler, 0, result, 0, fillLen);
		System.arraycopy(stringBytes, 0, result, fillLen, stringBytes.length);
	}
	else
	{
		System.arraycopy(stringBytes, 0, result, 0, stringBytes.length);
		System.arraycopy(filler, 0, result, stringBytes.length, fillLen);
	}		

	return new String(result);
}
}
