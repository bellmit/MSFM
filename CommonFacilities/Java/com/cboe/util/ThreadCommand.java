package com.cboe.util;

/**
 * This class represents a command to be executed by a WorkThread.
 * It is an abstract class that must be subclassed.  The execute()
 * method must be defined in the subclass to carry out the command.
 *
 * @version 1.4
 * @author David Wegener
 */
public abstract class ThreadCommand {
	private Throwable throwable;
    private boolean finished;
    

/**
 * This method ...
 * @param name desc
 * @return desc
 * @exception name desc
 * @param aPriority int
 */
public ThreadCommand() {
    finished = false;
}
/**
 * This method ...
 * @param name desc
 * @return desc
 * @exception name desc
 * @param aPriority int
 */
public ThreadCommand(int aPriority) {
    finished = false;
}
/**
 * This method is called by the work method if a throwable
 * is received on the call to execute.  Subclasses can
 * override this method to take appropriate actions.
 * @author David Wegener
 * @param t a throwable received in the work method.
 * @param source was this from execute or complete?
 */
public void abort(Throwable t, String source ) {
	setThrowable( t);
	System.err.println("Throwable received from ThreadCommand." + source + "(): " + t);
	t.printStackTrace();
}
/**
 * This method is called when the command completes.  It will
 * always be called regardless of whether the execute command threw
 * an exception or not.
 * @author David Wegener
 */
protected abstract void complete();
/**
   This is the abstract method that ThreadCommand
   subclasses must implement to carry out the execution
   of the command.
   @author David Wegener
 */
public abstract void execute();
/**
 * This method returns any throwable generated by
 * the execution of the command
 * @author David Wegener
 * @return java.lang.Exception
 */
public Throwable getThrowable() {
	return throwable;
}
/**
 * This method lets the ThreadPool scheduler know
 * whether or not this command is available to be run.
 * The default implementation is to return true.  Subclasses
 * of this class can override this method to provide
 * a class specific way to schedule the commands.
 * @author David Wegener
 * @return boolean - true if the command can be run, false if the command cannot be run.
   @roseuid 3613CF920288
 */
public boolean isAvailable() {
	return true;
}
/**
 * This method sets the throwable of the command.
 * @author David Wegener
 * @param newValue java.lang.Exception
 */
protected void setThrowable(Throwable newValue) {
	this.throwable = newValue;
}
/**
 * This method will call the execute method of
 * the subclass and capture any exceptions that
 * occur during the execution of the command.
 * @author David Wegener
 */
protected void work() {
	setThrowable(null);
	try {
		execute();
	}
	catch (Throwable t) {
		abort(t, "execute" );
	}
	finally {
        try {
            complete();
        }
        catch (Throwable t) {
            abort(t, "complete" );
        }
	}
}

/**
 * This method is used to notify people that the command has finished executing
 * @author CGM
 */
public synchronized void flagFinished()
{
    finished = true;
    notifyAll();
}
/**
 * Schedules the thread to be run and then waits for completion
 * @param ThreadPool pool = pool on which to schedule execution
 * @author CGM
 */
public synchronized void perform( ThreadPool pool ) throws InvalidThreadPoolStateException
{
    finished = false;
    pool.schedule( this );
    while ( !finished )
    {
        try
        {
            wait();
        }
        catch (InterruptedException ie )
        {
        }
    }
}
}
