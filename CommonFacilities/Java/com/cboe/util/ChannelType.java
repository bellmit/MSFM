//
// -----------------------------------------------------------------------------------
// Source file: ChannelType.java
//
// PACKAGE: com.cboe.util;
//
// -----------------------------------------------------------------------------------
// Copyright (c) 2000-2005 The Chicago Board Options Exchange. All Rights Reserved.
// -----------------------------------------------------------------------------------
package com.cboe.util;
public interface ChannelType
{
    // Channel Types for Callbacks
    int CB_CURRENT_MARKET_BY_PRODUCT = 1000;
    int CB_CURRENT_MARKET_BY_CLASS = 1001;
    int CB_NBBO_BY_PRODUCT = 1002;
    int CB_NBBO_BY_CLASS = 1003;

    int CB_EXPECTED_OPENING_PRICE = 1010;
    int CB_EXPECTED_OPENING_PRICE_BY_PRODUCT = 1011;

    // for API subscription only
    int CB_PERSONAL_BEST_BOOK = 1020;

    int CB_ORDERS_FOR_PRODUCT = 1030;
    int CB_ORDERS_BY_USER = 1031;
    int CB_ORDERS_BY_FIRM = 1032;
    int CB_ALL_ORDERS = 1033;
    int CB_ALL_ORDERS_FOR_TYPE = 1034;
    int CB_ORDERS_BY_CLASS = 1035;
    int CB_ORDERS_FOR_SESSION = 1036;

    int CB_QUOTE_BY_CLASS = 1041;
    int CB_ALL_QUOTES = 1042;
    int CB_RFQ = 1043;

    int CB_PRODUCT_CLASS_UPDATE = 1050;
    int CB_CLASS_STATE = 1051;
    int CB_CLASS_UPDATE_BY_TYPE = 1052;
    int CB_CLASS_STATE_BY_TYPE = 1053;

    //added in api enhancement
    int CB_ORDER_STATUS_UPDATE = 1054;
    int CB_ORDER_STATUS_UPDATE_V2 = 1055;
    int CB_ORDER_STATUS_UPDATE_FOR_CLASS_V2 = 1056;
    int CB_QUOTE_STATUS_UPDATE = 1057;
    int CB_QUOTE_STATUS_UPDATE_V2 = 1058;
    int CB_QUOTE_STATUS_UPDATE_FOR_CLASS_V2 = 1059;

    // order
    int CB_FILLED_REPORT = 1060;
    int CB_FILLED_REPORT_BY_FIRM = 1061;
    int CB_FILLED_REPORT_FOR_PRODUCT = 1062;     //
    int CB_FILLED_REPORT_FOR_TYPE = 1063;        //
    int CB_FILLED_REPORT_BY_CLASS = 1064;        //
    int CB_FILLED_REPORT_FOR_SESSION = 1065;        //

    int CB_CANCELED_REPORT = 1066;
    int CB_CANCELED_REPORT_BY_FIRM = 1067;
    int CB_CANCELED_REPORT_FOR_PRODUCT = 1068;     //
    int CB_CANCELED_REPORT_FOR_TYPE = 1069;        //
    int CB_CANCELED_REPORT_BY_CLASS = 1070;        //
    int CB_CANCELED_REPORT_FOR_SESSION = 1071;        //

    int CB_ORDER_BUST_REPORT = 1072;
    int CB_ORDER_BUST_REPORT_BY_FIRM = 1073;
    int CB_ORDER_BUST_REPORT_FOR_PRODUCT = 1074;     //
    int CB_ORDER_BUST_REPORT_FOR_TYPE = 1075;        //
    int CB_ORDER_BUST_REPORT_BY_CLASS = 1076;        //
    int CB_ORDER_BUST_REPORT_FOR_SESSION = 1077;        //

    int CB_ORDER_BUST_REINSTATE_REPORT = 1078;
    int CB_ORDER_BUST_REINSTATE_REPORT_BY_FIRM = 1079;
    int CB_ORDER_BUST_REINSTATE_REPORT_FOR_PRODUCT = 1080;     //
    int CB_ORDER_BUST_REINSTATE_REPORT_FOR_TYPE = 1081;        //
    int CB_ORDER_BUST_REINSTATE_REPORT_BY_CLASS = 1082;        //
    int CB_ORDER_BUST_REINSTATE_REPORT_FOR_SESSION = 1083;        //

    int CB_NEW_ORDER_REPORT = 1084;
    int CB_NEW_ORDER_REPORT_BY_FIRM = 1085;
    int CB_NEW_ORDER_REPORT_FOR_PRODUCT = 1086;     //
    int CB_NEW_ORDER_REPORT_FOR_TYPE = 1087;        //
    int CB_NEW_ORDER_REPORT_BY_CLASS = 1088;        //
    int CB_NEW_ORDER_REPORT_FOR_SESSION = 1089;        //

    // quote
    int CB_QUOTE_FILLED_REPORT = 1090;
    int CB_QUOTE_FILLED_REPORT_BY_CLASS = 1091;
    int CB_QUOTE_FILLED_REPORT_BY_FIRM = 1092;
    int CB_QUOTE_BUST_REPORT = 1093;
    int CB_QUOTE_BUST_REPORT_BY_CLASS = 1094;
    int CB_QUOTE_BUST_REPORT_BY_FIRM = 1095;
    int CB_QUOTE_CANCEL_REPORT = 1096;
    int CB_QUOTE_CANCEL_REPORT_BY_CLASS = 1097;
    int CB_QUOTE_CANCEL_REPORT_BY_FIRM = 1098;

    int CB_QUOTE_FILLED_REPORT_BY_TRADING_FIRM = 1113;
    int CB_QUOTE_BUST_REPORT_BY_TRADING_FIRM = 1114;

    int CB_PRODUCT_STATE = 1100;
    int CB_PRODUCT_UPDATE = 1101;
    int CB_PRODUCT_STATE_BY_CLASS = 1102;
    int CB_PRODUCT_UPDATE_BY_CLASS = 1103;

    int CB_TRADING_SESSION_STATE = 1110;
    int CB_TRADING_SESSION_EVENT_STATE = 1111;
    int CB_TRADING_SESSION_EVENT_STATE_V2 = 1112;

    // for API subscription only
    int CB_USER_MARKET_DATA = 1120;
    int CB_USER_MARKET_DATA_BY_PRODUCT = 1121;

    int CB_RECAP_BY_CLASS = 1130;
    int CB_RECAP_BY_PRODUCT = 1131;

    int CB_TICKER = 1140;

    int CB_LOGOUT = 1150;
    int CB_HEARTBEAT = 1151;
    int CB_TEXT_MESSAGE = 1152;
    int CB_AUTHENTICATION_NOTICE = 1153;

    int CB_STRATEGY_UPDATE = 1160;
    int CB_UNREGISTER_LISTENER = 1161;

    int CB_COMPONENT_UP = 1162;
    int CB_COMPONENT_DOWN = 1163;
    int CB_CAS_UP = 1164;
    int CB_CAS_DOWN = 1165;

    // Channel Types for HeldOrder callbacks

    int CB_NEW_HELD_ORDER = 1170;
    int CB_CANCEL_HELD_ORDER_REQUEST = 1171;
    int CB_HELD_ORDERS = 1172;
    int CB_HELD_ORDER_CANCELED_REPORT = 1173;
    int CB_HELD_ORDER_FILLED_REPORT = 1174;
    int CB_FILL_REJECT_REPORT = 1175;

    // Channel types for NBBO Agent admin callback
    int CB_NBBO_AGENT_FORCED_OUT = 1180;
    int CB_NBBO_AGENT_REMINDER = 1181;
    int CB_NBBO_AGENT_INTERMARKET_ADMIN = 1182;
    int CB_NBBO_AGENT_SATISFACTION_ALERT = 1183;
    int CB_NBBO_AGENT_INTERMARKET_ADMIN_BROADCAST = 1184;

    // V2 Quote
    int CB_QUOTE_FILLED_REPORT_V2 = 1200;
    int CB_QUOTE_FILLED_REPORT_BY_CLASS_V2 = 1201;
    int CB_QUOTE_FILLED_REPORT_BY_FIRM_V2 = 1202;
    int CB_QUOTE_BUST_REPORT_V2 = 1203;
    int CB_QUOTE_BUST_REPORT_BY_CLASS_V2 = 1204;
    int CB_QUOTE_BUST_REPORT_BY_FIRM_V2 = 1205;
    int CB_QUOTE_CANCEL_REPORT_V2 = 1206;
    int CB_QUOTE_CANCEL_REPORT_BY_CLASS_V2 = 1207;
    int CB_QUOTE_CANCEL_REPORT_BY_FIRM_V2 = 1208;
    int CB_QUOTE_BY_CLASS_V2 = 1209;
    int CB_ALL_QUOTES_V2 = 1210;
    int CB_ALL_QUOTES_BY_CLASS_V2 = 1211;
    int CB_QUOTES_BOOKED_V2 = 1212;
    int CB_QUOTES_BOOKED_BY_CLASS_V2 = 1213;
    int CB_QUOTE_FILLED_REPORT_BY_FIRM_BY_CLASS_V2 = 1214;
    int CB_QUOTE_BUST_REPORT_BY_FIRM_BY_CLASS_V2 = 1215;
    int CB_MMHH_QUOTE_FILL_REPORT_V2=1216;

    // V2 Order
    int CB_ALL_ORDERS_V2                                    = 1230;
    int CB_ORDERS_FOR_CLASS_V2                              = 1231;
    int CB_ORDERS_FOR_FIRM_V2                               = 1232;
    int CB_ORDERS_FOR_FIRM_FOR_CLASS_V2                     = 1233;
    int CB_ORDERS_FOR_PRODUCT_V2                            = 1234;
    int CB_ORDERS_FOR_TYPE_V2                               = 1235;
    int CB_ORDERS_FOR_SESSION_V2                            = 1236;
    int CB_ORDERS_FOR_USER_V2                               = 1237;

    int CB_NEW_ORDER_REPORT_V2                              = 1240;
    int CB_NEW_ORDER_REPORT_FOR_CLASS_V2                    = 1241;
    int CB_NEW_ORDER_REPORT_FOR_FIRM_V2                     = 1242;
    int CB_NEW_ORDER_REPORT_FOR_FIRM_FOR_CLASS_V2           = 1243;
    int CB_NEW_ORDER_REPORT_FOR_PRODUCT_V2                  = 1244;
    int CB_NEW_ORDER_REPORT_FOR_TYPE_V2                     = 1245;
    int CB_NEW_ORDER_REPORT_FOR_SESSION_V2                  = 1246;

    int CB_ORDER_FILLED_REPORT_V2                           = 1250;
    int CB_ORDER_FILLED_REPORT_FOR_CLASS_V2                 = 1251;
    int CB_ORDER_FILLED_REPORT_FOR_FIRM_V2                  = 1252;
    int CB_ORDER_FILLED_REPORT_FOR_FIRM_FOR_CLASS_V2        = 1253;
    int CB_ORDER_FILLED_REPORT_FOR_PRODUCT_V2               = 1254;
    int CB_ORDER_FILLED_REPORT_FOR_TYPE_V2                  = 1255;
    int CB_ORDER_FILLED_REPORT_FOR_SESSION_V2               = 1256;
    int CB_ORDER_FILLED_REPORT_FOR_TRADING_FIRM             = 1257;

    int CB_ORDER_CANCELED_REPORT_V2                         = 1260;
    int CB_ORDER_CANCELED_REPORT_FOR_CLASS_V2               = 1261;
    int CB_ORDER_CANCELED_REPORT_FOR_FIRM_V2                = 1262;
    int CB_ORDER_CANCELED_REPORT_FOR_FIRM_FOR_CLASS_V2      = 1263;
    int CB_ORDER_CANCELED_REPORT_FOR_PRODUCT_V2             = 1264;
    int CB_ORDER_CANCELED_REPORT_FOR_TYPE_V2                = 1265;
    int CB_ORDER_CANCELED_REPORT_FOR_SESSION_V2             = 1266;

    int CB_ORDER_BUST_REPORT_V2                             = 1270;
    int CB_ORDER_BUST_REPORT_FOR_CLASS_V2                   = 1271;
    int CB_ORDER_BUST_REPORT_FOR_FIRM_V2                    = 1272;
    int CB_ORDER_BUST_REPORT_FOR_FIRM_FOR_CLASS_V2          = 1273;
    int CB_ORDER_BUST_REPORT_FOR_PRODUCT_V2                 = 1274;
    int CB_ORDER_BUST_REPORT_FOR_TYPE_V2                    = 1275;
    int CB_ORDER_BUST_REPORT_FOR_SESSION_V2                 = 1276;
    int CB_ORDER_BUST_REPORT_FOR_TRADING_FIRM               = 1277;

    int CB_ORDER_BUST_REINSTATE_REPORT_V2                   = 1280;
    int CB_ORDER_BUST_REINSTATE_REPORT_FOR_CLASS_V2         = 1281;
    int CB_ORDER_BUST_REINSTATE_REPORT_FOR_FIRM_V2          = 1282;
    int CB_ORDER_BUST_REINSTATE_REPORT_FOR_FIRM_FOR_CLASS_V2= 1283;
    int CB_ORDER_BUST_REINSTATE_REPORT_FOR_PRODUCT_V2       = 1284;
    int CB_ORDER_BUST_REINSTATE_REPORT_FOR_TYPE_V2          = 1285;
    int CB_ORDER_BUST_REINSTATE_REPORT_FOR_SESSION_V2       = 1286;
    int CB_ORDER_BUST_REINSTATE_REPORT_FOR_TRADING_FIRM     = 1287;


    int CB_RFQ_V2 = 1290;


    // V2 MarketQuery
    int CB_CURRENT_MARKET_BY_CLASS_V2 = 1300;
    int CB_CURRENT_MARKET_BY_PRODUCT_V2 = 1301;
    int CB_TICKER_BY_CLASS_V2 = 1302;
    int CB_TICKER_BY_PRODUCT_V2 = 1303;
    int CB_NBBO_BY_CLASS_V2 = 1304;
    int CB_NBBO_BY_PRODUCT_V2 = 1305;
    int CB_RECAP_BY_PRODUCT_V2 = 1306;
    int CB_RECAP_BY_CLASS_V2 = 1307;
    int CB_OPENING_PRICE_BY_PRODUCT_V2 = 1308;
    int CB_OPENING_PRICE_BY_CLASS_V2 = 1309;
    int CB_BOOK_DEPTH_BY_CLASS_V2 = 1310;
    int CB_BOOK_DEPTH_BY_PRODUCT_V2 = 1311;

    // V3 MarketQuery
    int CB_CURRENT_MARKET_BY_CLASS_V3 = 1312;
    int CB_CURRENT_MARKET_BY_PRODUCT_V3 = 1313;

    // V4 MDX MarketQuery
    int CB_CURRENT_MARKET_BY_CLASS_V4 = 1314;
    int CB_LAST_SALE_BY_CLASS_V4 = 1315;
    int CB_RECAP_BY_CLASS_V4 = 1316;
    int CB_TICKER_BY_CLASS_V4 = 1317;
    
    // Tpf Migration for VTATS
    int CB_LARGE_TRADE_LAST_SALE_BY_CLASS = 1318;
    
    //  V4 MDX NBBO
    int CB_NBBO_BY_CLASS_V4 = 1319;

    //  MDX MANUAL QUOTE
    int CB_MANUAL_QUOTE_BY_CLASS_V4 = 1320;

    // TFL alert
    int CB_ALERT_SATISFACTION = 1350;
    int CB_ALERT = 1351;
    int CB_ALERT_UPDATE = 1352;

    // market alert consumer call back
    //int CB_MARKET_ALERT_BY_CLASS = 1360;
    

    // Notification of auction
    int CB_AUCTION = 1370;
    int CB_DAIM = 1371;

    // Alert event type on CAS IEC
    int ALERT_SATISFACTION = 1400;
    int ALERT = 1401;
    int ALERT_UPDATE = 1402;

    int ALERT_SATISFACTION_ALL = 1403;
    int ALERT_ALL = 1404;
    int ALERT_UPDATE_ALL = 1405;

    // property consumer call back
    int CB_UPDATE_PROPERTY = 1410;
    int CB_REMOVE_PROPERTY = 1411;

    /* Callback for Calendar Update */
    int CB_CALENDAR_UPDATE = 1500;
    
    // callbacks for Order Management Terminal
    int CB_OMT_ORDER_ACCEPTED = 1600;
    int CB_OMT_ORDER_ACCEPTED_BY_SOURCE = 1601;
    int CB_OMT_ORDER_ACCEPTED_BY_SOURCE_TYPE = 1602;

    int CB_OMT_ORDER_CANCELED = 1610;
    int CB_OMT_ORDER_CANCELED_BY_SOURCE = 1611;
    int CB_OMT_ORDER_CANCELED_BY_SOURCE_TYPE = 1612;

    int CB_OMT_ORDER_CANCEL_REPLACED = 1620;
    int CB_OMT_ORDER_CANCEL_REPLACED_BY_SOURCE = 1621;
    int CB_OMT_ORDER_CANCEL_REPLACED_BY_SOURCE_TYPE = 1622;

    int CB_OMT_FILL_REPORT_REJECT = 1630;

    int CB_OMT_ORDER_REMOVED = 1635;
    int CB_OMT_ORDER_REMOVED_BY_SOURCE = 1636;
    int CB_OMT_ORDER_REMOVED_BY_SOURCE_TYPE = 1637;

    int CB_OMT_ORDERS_FOR_LOCATION = 1640;
    int CB_OMT_LOCATION_SUMMARY = 1641;
    int CB_OMT_REMOVE_MESSAGE = 1642;

    // callback for Linkage
    int CB_UPDATE_LINKAGE_INDICATOR  = 1650;
    int CB_OMT_LINKAGE_CANCEL_REPORT = 1651;
    int CB_OMT_LINKAGE_FILL_REPORT = 1652;
    int CB_OMT_TRADE_NOTIFICATION  = 1653;
    int CB_OMT_FILL_REPORT_DROP_COPY = 1654;
    int CB_OMT_CANCEL_REPORT_DROP_COPY = 1655;

    // callback for Routing
    int CB_OMT_MANUAL_ORDER_TIMEOUT = 1660;
    int CB_OMT_MANUAL_FILL_TIMEOUT = 1661;

    // OMT
    int OMT_ORDER_ACCEPTED = 1700;
    int OMT_ORDER_CANCELED = 1701;
    int OMT_ORDER_CANCEL_REPLACED = 1702;
    int OMT_FILL_REPORT_REJECT = 1703;
    int OMT_ORDER_REMOVED = 1704;
    int OMT_ORDERS_FOR_LOCATION = 1705;
    int OMT_LOCATION_SUMMARY = 1706;
    int OMT_REMOVE_MESSAGE = 1707;

    // Linkage
    int OMT_LINKAGE_CANCEL_REPORT = 1720;
    int OMT_LINKAGE_FILL_REPORT = 1721;
    int OMT_TRADE_NOTIFICATION = 1722;
    int OMT_FILL_REPORT_DROP_COPY = 1723;
    int OMT_CANCEL_REPORT_DROP_COPY = 1724;

    // Routing
    int OMT_MANUAL_ORDER_TIMEOUT = 1730;
    int OMT_MANUAL_FILL_TIMEOUT = 1731;
    
    // PAR
    int PAR_ORDER_ACCEPTED = 1800;
    int PAR_ORDER_CANCELED = 1801;
    int PAR_ORDER_CANCEL_REPLACED = 1802;
    int CB_PAR_ORDER_ACCEPTED = 1803;
    int CB_PAR_ORDER_CANCELED = 1804;
    int CB_PAR_ORDER_CANCEL_REPLACED = 1805;  	

   /////
   // Channel Types for Listeners of IEC
   ////
    
    int OPENING_PRICE_BY_CLASS_FOR_MDX = 2008;
    int OPENING_PRICE_BY_CLASS_SEQ_FOR_MDX = 2009;
    
    int CURRENT_MARKET_BY_TYPE = 2010;
    int CURRENT_MARKET_BY_PRODUCT = 2011;
    int CURRENT_MARKET_BY_CLASS = 2012;

    int OPENING_PRICE_BY_TYPE = 2013;
    int OPENING_PRICE_BY_PRODUCT = 2014;
    int OPENING_PRICE_BY_CLASS = 2015;
    int NBBO_BY_PRODUCT = 2016;
    int NBBO_BY_CLASS = 2017;
    int CURRENT_MARKET_BY_CLASS_SEQ = 2018;
    int OPENING_PRICE_BY_CLASS_SEQ = 2019;


    // Held Order
    int NEW_HELD_ORDER = 2020;
    int CANCEL_HELD_ORDER= 2021;
    int HELD_ORDERS = 2022;
    int HELD_ORDER_STATUS = 2023;
    int HELD_ORDER_CANCEL_REPORT = 2024;
    int HELD_ORDER_FILLED_REPORT = 2025;

    int NEW_ORDER = 2030;
    int NEW_ORDER_BY_FIRM = 2031;
    int ORDER_UPDATE = 2040;
    int ORDER_UPDATE_BY_FIRM = 2041;
    int ORDER_STATUS_UPDATE = 2042;      // new for API enhancement
    int CANCEL_REPORT = 2050;
    int CANCEL_REPORT_BY_FIRM = 2051;
    int ORDER_FILL_REPORT = 2060;
    int ORDER_FILL_REPORT_BY_FIRM = 2061;
    int ORDER_FILL_REPORT_BY_TRADING_FIRM = 2062;
    int ORDER_ACCEPTED_BY_BOOK = 2070;
    int ORDER_ACCEPTED_BY_BOOK_BY_FIRM = 2071;
    int ACCEPT_ORDERS = 2080;
    int ACCEPT_ORDERS_BY_FIRM = 2081;
    int ORDER_QUERY_EXCEPTION = 2090;
    int ORDER_BUST_REPORT = 2091;
    int ORDER_BUST_REPORT_BY_FIRM = 2092;
    int ORDER_BUST_REPORT_BY_TRADING_FIRM = 2095;
    int ORDER_BUST_REINSTATE_REPORT = 2093;
    int ORDER_BUST_REINSTATE_REPORT_BY_FIRM = 2094;
    int ORDER_BUST_REINSTATE_REPORT_BY_TRADING_FIRM = 2096;
    int ORDER_STATUS_BLOCKED = 2099;

    int QUOTE_FILL_REPORT = 2100;
    int QUOTE_DELETE_REPORT = 2101;
    int QUOTE_FILL_REPORT_BY_FIRM = 2102;
    int QUOTE_FILL_REPORT_BY_TRADING_FIRM = 2103;
    int QUOTE_BUST_REPORT = 2104;
    int QUOTE_BUST_REPORT_BY_FIRM = 2105;
    int QUOTE_BUST_REPORT_BY_TRADING_FIRM = 2108;
    int QUOTES_DELETE_REPORTV2 = 2106;
    int QUOTE_STATUS_UPDATE = 2107;      // new for API enhancement
    int QUOTE_STATUS_BLOCKED = 2109;

    int RFQ = 2110;

    int SET_PRODUCT_STATE = 2120;
    int SET_PRODUCT_STATE_BY_CLASS = 2121;
    int SET_CLASS_STATE = 2122;

    int PRICE_ADJUSTMENT_UPDATED_NOTICE = 2130;
    int PRICE_ADJUSTMENT_APPLIED_NOTICE = 2131;
    int ALL_ADJUSTMENTS_APPLIED_NOTICE = 2132;

    int UPDATE_PRODUCT = 2140;
    int UPDATE_PRODUCT_CLASS = 2141;
    int UPDATE_REPORTING_CLASS = 2142;
    int UPDATE_PRODUCT_BY_CLASS = 2143;

    int TRADE_REPORT_BY_TYPE = 2150;
    int TRADE_REPORT_BY_PRODUCT = 2151;
    int TRADE_REPORT_BY_CLASS = 2152;

    int RECAP_BY_TYPE = 2160;
    int RECAP_BY_PRODUCT = 2161;
    int RECAP_BY_CLASS = 2162;
    int RECAP_BY_CLASS_SEQ = 2163;

    int TICKER_BY_TYPE = 2170;
    int TICKER_BY_PRODUCT = 2171;
    int TICKER_BY_CLASS = 2172;
    int TICKER_BY_CLASS_SEQ = 2173;
    
    int LARGE_TRADE_LAST_SALE_BY_CLASS = 2174;

    int TRADING_SESSION = 2180;
    int TRADING_SESSION_EVENT_STATE = 2181;
    int TRADING_SESSION_EVENT_STATE_V2 = 2182;

    int STRATEGY_UPDATE = 2190;

    int USER_SECURITY_TIMEOUT = 2200;

    // Current Market subscriptions on MarketBuffer channels
    int MARKET_BUFFER_CM_BY_SERVER = 2250;
    int MARKET_BUFFER_CM_BY_MDCASSET = 2251;

    int TEXT_MESSAGE_BY_USER = 2300;
    int TEXT_MESSAGE_BY_CLASS = 2301;
    int TEXT_MESSAGE_BY_TYPE = 2302;

    int AUCTION = 2320;
    int AUCTION_USER = 2321;
    int DAIM_USER = 2322;

    int LAST_SALE_BY_CLASS = 2330;

    int INTERNAL_CURRENT_MARKET_BY_CLASS = 2340; 
    int INTERNAL_LAST_SALE_BY_CLASS = 2341; 
    int INTERNAL_RECAP_BY_CLASS = 2342; 
    int INTERNAL_TICKER_BY_CLASS = 2343; 
    
    int INTERNAL_MANUAL_QUOTE_BY_CLASS = 2344; 
    int MANUAL_QUOTE_BY_CLASS = 2345;
    

    // channels for product cache - originals (non PQS_) are used by trading session
    int PQS_SET_CLASS_STATE                  = 2400;
    int PQS_PRICE_ADJUSTMENT_UPDATED_NOTICE  = 2401;
    int PQS_PRICE_ADJUSTMENT_APPLIED_NOTICE  = 2402;
    int PQS_ALL_ADJUSTMENTS_APPLIED_NOTICE    = 2403;
    int PQS_UPDATE_PRODUCT                   = 2404;
    int PQS_UPDATE_PRODUCT_BY_CLASS          = 2405;
    int PQS_UPDATE_PRODUCT_CLASS             = 2406;
    int PQS_STRATEGY_UPDATE                  = 2407;
    int PQS_UPDATE_REPORTING_CLASS           = 2408;
    // linkage indicator for sagui
    int PS_UPDATE_LINKAGE_INDICATOR          = 2409;

    // channels for CAS Admin

    int CASADMIN_ADD_USER                   = 2500;
    int CASADMIN_REMOVE_USER                = 2501;
    int CASADMIN_ADD_FIRM                   = 2502;
    int CASADMIN_REMOVE_FIRM                = 2503;
    int CASADMIN_ADD_RFQ_CLASS_FOR_USER         = 2504;
    int CASADMIN_REMOVE_RFQ_CLASS_FOR_USER      = 2505;
    int CASADMIN_ADD_CURRENTMARKET_CLASS_FOR_USER         = 2506;
    int CASADMIN_REMOVE_CURRENTMARKET_CLASS_FOR_USER      = 2507;
    int CASADMIN_ADD_OPENINGPRICE_CLASS_FOR_USER         = 2510;
    int CASADMIN_REMOVE_OPENINGPRICE_CLASS_FOR_USER      = 2511;
    int CASADMIN_ADD_TICKER_CLASS_FOR_USER         = 2512;
    int CASADMIN_REMOVE_TICKER_CLASS_FOR_USER      = 2513;
    int CASADMIN_ADD_RECAP_CLASS_FOR_USER         = 2514;
    int CASADMIN_REMOVE_RECAP_CLASS_FOR_USER      = 2515;
    int CASADMIN_ADD_BOOKDEPTH_PRODUCT_FOR_USER       = 2516;
    int CASADMIN_REMOVE_BOOKDEPTH_PRODUCT_FOR_USER    = 2517;
    int CASADMIN_ADD_BOOKDEPTH_CLASS_FOR_USER = 2518;
    int CASADMIN_REMOVE_BOOKDEPTH_CLASS_FOR_USER = 2519;
    int CASADMIN_ADD_QUOTE_LOCKED_NOTIFICATION = 2520;
    int CASADMIN_REMOVE_QUOTE_LOCKED_NOTIFICATION = 2521;
    int CASADMIN_ADD_MARKET_ALERT_CLASS_FOR_USER         = 2522;
    int CASADMIN_REMOVE_MARKET_ALERT_CLASS_FOR_USER      = 2523;

    // Start/end of business day processing
    int BUSINESS_DAY                        = 2600;


    // Channels for NBBO Agent admin
    int NBBO_AGENT_FORCED_OUT = 2700;
    int NBBO_AGENT_REMINDER = 2701;

    // Channels for fill reject report
    int FILL_REJECT_REPORT=2720;

    // Channels for Calendar Update
    int CALENDAR_UPDATE =2750;

    // Channels for Intermarket Admin message in CAS
    int INTERMARKET_ADMIN_MESSAGE = 2800;
    int INTERMARKET_ADMIN_MESSAGE_BROADCAST = 2801;

    // Channels for Market Alert Message in CAS
    //int MARKET_ALERT_BY_CLASS = 2900;
    
    // Channel types for suppliers used in the OSS and QSS
    // Not intended to be used by the IEC listeners
    int ORDER_STATUS = 3030;
    int QUOTE_STATUS = 3040;

    // Channel types for listener reference count 0
    int ZERO_SUBSCRIPTION = 4010;

    // Codes used for server side filtering by group.
    int BBBO_BY_GROUP = 5000;
    int BEST_OF_THE_REST_BY_GROUP = 5001;
    int CURRENT_MARKET_BY_GROUP = 5002;
    int PRODUCT_ADJUSTMENT_BY_GROUP = 5004;
    int PRODUCT_STATE_BY_GROUP = 5005;
    int PRODUCT_UPDATE_BY_GROUP = 5006;
    int QUOTE_FILL_REPORT_BY_GROUP = 5007;
    int RECAP_BY_GROUP = 5008;
    int RFQ_BY_GROUP = 5009;
    int TICKER_BY_GROUP = 5010;
    int TRADE_REPORT_BY_GROUP = 5011;
    int ORDER_STATUS_ADMIN_BY_GROUP = 5012;
    int QUOTE_STATUS_ADMIN_BY_GROUP = 5013;
    int ORDER_STATUS_BY_GROUP = 5014;
    int QUOTE_STATUS_BY_GROUP = 5015;
    int TRADE_REPORT_ADMIN_BY_GROUP = 5017;
    int ALL_LINKAGE_ADMIN = 5018;
    int HELD_ORDER_STATUS_BY_GROUP = 5019;
    int HELD_ORDER_FILLED_REPORT_BY_GROUP = 5020;
    int OPTION_TICKER_BY_GROUP = 5022;
    int MARKET_ALERT_BY_GROUP = 5023;
    int TICKER_DETAIL_BY_GROUP = 5024;
    int LAST_SALE_BY_GROUP = 5025;
    int CURRENT_MARKET_MANUAL_QUOTE_BY_GROUP = 5026;

    // Special code for server side filtering by group and product type (key will be List of two Integers)
    int CURRENT_MARKET_BY_GROUP_AND_TYPE = 5050;
    int TICKER_BY_GROUP_AND_TYPE = 5051;

    // Codes used for server side unfiltered
    int ALL_EOS_SUMMARY = 5100;
    int ALL_QUOTE_RISK_MANAGEMENT_PROFILE = 5101;
    int ALL_PRODUCT_STATE = 5102;
    int ALL_TEXT_MESSAGE = 5103;
    int ALL_TRADING_SESSION = 5104;
    int ALL_CURRENT_MARKET = 5106;
    int ALL_USER_SESSION = 5107;
    int ALL_ORDER_STATUS = 5108;
    int ALL_PRODUCT_STATUS = 5109;
    int ALL_QUOTE_STATUS = 5110;
    int ALL_PRODUCT_CONFIGURATION = 5111;
    int ALL_TRADING_PROPERTY = 5112;
    int ALL_ORDER_STATUS_ADMIN = 5113;
    int ALL_QUOTE_STATUS_ADMIN = 5114;
    int ALL_PRODUCT_UPDATE = 5115;
    int ALL_CACHE_UPDATE = 5116;
    int ALL_TRADE_REPORT_ADMIN = 5117;
    int ALL_HELD_ORDER_STATUS = 5118;
    int ALL_NBBO_AGENT_ADMIN = 5119;
    int ALL_QUOTE_LOCK_NOTIFICATION = 5120;
    int ALL_ALERT = 5120; //todo: fix duplication!
    int ALL_MARKET_ALERT = 5121;
    int ALL_INTERNAL_ORDER_STATUS = 5122;

    // Codes for client application side to create user event channels
    int USER_EVENT_ADD_USER = 5130;
    int USER_EVENT_DELETE_USER = 5131;
    int USER_EVENT_ADD_FIRM = 5132;
    int USER_EVENT_DELETE_FIRM = 5133;
    int USER_EVENT_USER_FIRM_AFFILIATION_UPDATE = 5134;
    int USER_EVENT_USER_FIRM_AFFILIATION_DELETE = 5135;
    int CB_USER_EVENT_ADD_USER = 5140;
    int CB_USER_EVENT_DELETE_USER = 5141;
    int CB_USER_EVENT_ADD_FIRM = 5142;
    int CB_USER_EVENT_DELETE_FIRM = 5143;
    int CB_USER_EVENT_USER_FIRM_AFFILIATION_UPDATE = 5144;
    int CB_USER_EVENT_USER_FIRM_AFFILIATION_DELETE = 5145;

    // Codes for system control consumer
    int SERVER_FAILURE = 5200;
    int USER_ACTIVITY_TIMEOUT = 5201;

    int BOOK_DEPTH_BY_PRODUCT = 5501;
    int CB_BOOK_DEPTH_BY_PRODUCT = 5502;
    int BOOK_DEPTH_BY_CLASS = 5503;
    int BOOK_DEPTH_BY_CLASS_SEQ = 5504;
    int BOOK_DEPTH_UPDATE_BY_PRODUCT = 5511;
    int CB_BOOK_DEPTH_UPDATE_BY_PRODUCT = 5512;

    // Codes for fix client adapter order/quote
    int ACCEPT_QUOTES_BY_CLASS = 6000;
    int ACCEPT_QUOTE = 6001;
    int CANCEL_QUOTES_BY_CLASS = 6002;
    int CANCEL_QUOTE = 6003;
    int ACCEPT_STRATEGY_ORDER = 6004;
    int ACCEPT_ORDER = 6005;
    int CANCEL_ORDER = 6006;
    int CANCEL_REPLACE_ORDER = 6007;
    int ACCEPT_INTERNALIZATION_ORDER = 6008;
    int ACCEPT_CROSS_ORDER = 6009;
    int ACCEPT_INTERNALIZATION_STRATEGY_ORDER = 6010;

	// codes for quote locking client sdie
    int QUOTE_LOCKED_NOTIFICATION = 6100;
    int CB_QUOTE_LOCKED_NOTIFICATION = 6101;
    int QUOTE_LOCKED_NOTIFICATION_BY_CLASS = 6102;
    int CB_QUOTE_LOCKED_NOTIFICATION_BY_CLASS = 6103;

    // MD CAS event channel

    int SUBSCRIBE_CURRENT_MARKET_BY_CLASS_V2 = 7000;
    int SUBSCRIBE_CURRENT_MARKET_BY_PRODUCT_V2 = 7001;
    int UNSUBSCRIBE_CURRENT_MARKET_BY_CLASS_V2 = 7002;
    int UNSUBSCRIBE_CURRENT_MARKET_BY_PRODUCT_V2 = 7003;

    int SUBSCRIBE_CURRENT_MARKET_BY_CLASS = 7004;
    int SUBSCRIBE_CURRENT_MARKET_BY_PRODUCT = 7005;
    int UNSUBSCRIBE_CURRENT_MARKET_BY_CLASS = 7006;
    int UNSUBSCRIBE_CURRENT_MARKET_BY_PRODUCT = 7007;

    int SUBSCRIBE_NBBO_BY_CLASS_V2 = 7008;
    int SUBSCRIBE_NBBO_BY_PRODUCT_V2 = 7009;
    int UNSUBSCRIBE_NBBO_BY_CLASS_V2 = 7010;
    int UNSUBSCRIBE_NBBO_BY_PRODUCT_V2 = 7011;

    int SUBSCRIBE_NBBO_BY_CLASS = 7012;
    int SUBSCRIBE_NBBO_BY_PRODUCT = 7013;
    int UNSUBSCRIBE_NBBO_BY_CLASS = 7014;
    int UNSUBSCRIBE_NBBO_BY_PRODUCT = 7015;

    int SUBSCRIBE_RECAP_BY_CLASS_V2 = 7016;
    int SUBSCRIBE_RECAP_BY_PRODUCT_V2 = 7017;
    int UNSUBSCRIBE_RECAP_BY_CLASS_V2 = 7018;
    int UNSUBSCRIBE_RECAP_BY_PRODUCT_V2 = 7019;

    int SUBSCRIBE_RECAP_BY_CLASS = 7020;
    int SUBSCRIBE_RECAP_BY_PRODUCT = 7021;
    int UNSUBSCRIBE_RECAP_BY_CLASS = 7022;
    int UNSUBSCRIBE_RECAP_BY_PRODUCT = 7023;

    int SUBSCRIBE_TICKER_BY_CLASS_V2 = 7024;
    int SUBSCRIBE_TICKER_BY_PRODUCT_V2 = 7025;
    int UNSUBSCRIBE_TICKER_BY_CLASS_V2 = 7026;
    int UNSUBSCRIBE_TICKER_BY_PRODUCT_V2 = 7027;

    int SUBSCRIBE_TICKER_BY_PRODUCT = 7028;
    int UNSUBSCRIBE_TICKER_BY_PRODUCT = 7029;

    int SUBSCRIBE_EXPECTED_OPENING_PRICE_BY_CLASS_V2 = 7030;
    int SUBSCRIBE_EXPECTED_OPENING_PRICE_BY_PRODUCT_V2 = 7031;
    int UNSUBSCRIBE_EXPECTED_OPENING_PRICE_BY_CLASS_V2 = 7032;
    int UNSUBSCRIBE_EXPECTED_OPENING_PRICE_BY_PRODUCT_V2 = 7033;

    int SUBSCRIBE_EXPECTED_OPENING_PRICE_BY_CLASS = 7034;
    int UNSUBSCRIBE_EXPECTED_OPENING_PRICE_BY_CLASS = 7035;

    int SUBSCRIBE_BOOK_DEPTH_BY_CLASS_V2 = 7036;
    int SUBSCRIBE_BOOK_DEPTH_BY_PRODUCT_V2 = 7037;
    int UNSUBSCRIBE_BOOK_DEPTH_BY_CLASS_V2 = 7038;
    int UNSUBSCRIBE_BOOK_DEPTH_BY_PRODUCT_V2 = 7039;

    int SUBSCRIBE_BOOK_DEPTH_BY_PRODUCT = 7040;
    int UNSUBSCRIBE_BOOK_DEPTH_BY_PRODUCT = 7041;

    int SUBSCRIBE_ORDER_BOOK_UPDATE_BY_CLASS_V2 = 7042;
    int SUBSCRIBE_ORDER_BOOK_UPDATE_BY_PRODUCT_V2 = 7043;
    int UNSUBSCRIBE_ORDER_BOOK_UPDATE_BY_CLASS_V2 = 7044;
    int UNSUBSCRIBE_ORDER_BOOK_UPDATE_BY_PRODUCT_V2 = 7045;

    int SUBSCRIBE_ORDER_BOOK_UPDATE_BY_PRODUCT = 7046;
    int UNSUBSCRIBE_ORDER_BOOK_UPDATE_BY_PRODUCT = 7047;


    int MDCAS_LOGOUT = 7048;

    int MDCAS_CALLBACK_REMOVAL = 7049;

    int MDCAS_RECOVERY = 7050;

    int EXPRESS_CAS_RECOVERY = 7053;

    //
    //todo: maybe remove these and add [UN]SUBSCRIBE_TICKER_BY_CLASS_V4 instead
    //
    int SUBSCRIBE_TICKER_BY_CLASS = 7054;
    int UNSUBSCRIBE_TICKER_BY_CLASS = 7055;

    int SUBSCRIBE_CURRENT_MARKET_BY_CLASS_V3 = 7060;
    int SUBSCRIBE_CURRENT_MARKET_BY_PRODUCT_V3 = 7061;
    int UNSUBSCRIBE_CURRENT_MARKET_BY_CLASS_V3 = 7062;
    int UNSUBSCRIBE_CURRENT_MARKET_BY_PRODUCT_V3 = 7063;
    
    int SUBSCRIBE_LARGE_TRADE_LAST_SALE_BY_CLASS = 7064;
    int UNSUBSCRIBE_LARGE_TRADE_LAST_SALE_BY_CLASS = 7065;
    
    // Property event channel (CAS side)
    int UPDATE_PROPERTY = 7100;
    int REMOVE_PROPERTY = 7101;
    int UPDATE_PROPERTY_ENABLEMENT = 7102;
    int REMOVE_PROPERTY_ENABLEMENT = 7103;
    int UPDATE_PROPERTY_RATELIMIT = 7150;
    int REMOVE_PROPERTY_RATELIMIT = 7151;

    // Instrumentor Monitor (GUI side)
    int INSTRUMENTOR_UPDATE = 7200;
    int INSTRUMENTATION_PROCESS_UPDATE = 7201;
    int INSTRUMENTATION_CAS_UPDATE = 7202;
    int INSTRUMENTOR_BLOCK_UPDATE = 7203;
    int INSTRUMENTOR_LARGEST_QUEUE_UPDATE = 7204;
    int INSTRUMENTATION_PROCESS_INFO_UPDATE = 7205;
    int INSTRUMENTATION_ORBNAME_ALIAS_UPDATE = 7206;
    int INSTRUMENTOR_COLLECTOR_STATUS_UPDATE = 7207;
    int INSTRUMENTOR_INSTRUMENTATION_STATUS_UPDATE = 7208;
    int INSTRUMENTATION_PROCESS_ICS_UPDATE = 7209;
    int INSTRUMENTATION_LOGICAL_ORBNAME_UPDATE = 7210;
    int INSTRUMENTATION_LOGICAL_ORBNAME_DELETE = 7211;

    // Central Logging to ICS
    int IC_CENTRAL_LOGGING_MESSAGE = 7220;
    int IC_CENTRAL_LOGGING_RATE = 7221;

    // Instrumentor Collector
    int IC_QUEUE_INSTRUMENTOR_DETAILS = 7251;
    int IC_EVENT_CHANNEL_INSTRUMENTOR_DETAILS = 7252;
    int IC_THREAD_INSTRUMENTOR_DETAILS = 7253;
    int IC_NETWORK_CONNECTION_INSTRUMENTOR_DETAILS = 7254;
    int IC_HEAP_INSTRUMENTOR_DETAILS = 7255;
    int IC_METHOD_INSTRUMENTOR_DETAILS = 7256;
    int IC_COUNT_INSTRUMENTOR_DETAILS = 7257;
    int IC_JMX_INSTRUMENTOR_DETAILS = 72571;
    int IC_JSTAT_INSTRUMENTOR_DETAILS = 72572;
    int IC_RATE_INSTRUMENTOR_DETAILS = 72573;

    int IC_QUEUE_INSTRUMENTOR_SUMMARY = 7258;
    int IC_EVENT_CHANNEL_INSTRUMENTOR_SUMMARY = 7259;
    int IC_THREAD_INSTRUMENTOR_SUMMARY = 7260;
    int IC_NETWORK_CONNECTION_INSTRUMENTOR_SUMMARY = 7261;
    int IC_HEAP_INSTRUMENTOR_SUMMARY = 7262;
    int IC_METHOD_INSTRUMENTOR_SUMMARY = 7263;
    int IC_COUNT_INSTRUMENTOR_SUMMARY = 7264;
    int IC_JMX_INSTRUMENTOR_SUMMARY = 72641;
    int IC_JSTAT_INSTRUMENTOR_SUMMARY = 72642;

    int IC_QUEUE_INSTRUMENTOR_BLOCK = 7265;
    int IC_EVENT_CHANNEL_INSTRUMENTOR_BLOCK = 7266;
    int IC_THREAD_INSTRUMENTOR_BLOCK = 7267;
    int IC_NETWORK_CONNECTION_INSTRUMENTOR_BLOCK = 7268;
    int IC_HEAP_INSTRUMENTOR_BLOCK = 7269;
    int IC_METHOD_INSTRUMENTOR_BLOCK = 7270;
    int IC_COUNT_INSTRUMENTOR_BLOCK = 7271;
    int IC_JMX_INSTRUMENTOR_BLOCK = 72711;
    int IC_JSTAT_INSTRUMENTOR_BLOCK = 72712;
    int IC_RATE_INSTRUMENTOR_BLOCK = 72713;

    int IC_PUBLISH_DETAILS = 7272;
    int IC_PUBLISH_SUMMARY = 7273;
    int IC_SUBSCRIBE_ORB = 7274;
    int IC_UNSUBSCRIBE_ORB = 7275;
    int IC_PROCESS_WATCHER = 7276;
    int IC_SESSION_CLEANUP = 7277;

    // AlarmDefinitionService
    int IC_PUBLISH_CONDITION = 7278;
    int IC_CREATE_CONDITION = 7279;
    int IC_UPDATE_CONDITION = 7280;
    int IC_DELETE_CONDITION = 7281;
    int IC_PUBLISH_DEFINITION = 7282;
    int IC_CREATE_DEFINITION = 7283;
    int IC_UPDATE_DEFINITION = 7284;
    int IC_DELETE_DEFINITION = 7285;

    // AlarmActivationService
    int IC_PUBLISH_ACTIVATION = 7286;
    int IC_CREATE_ACTIVATION = 7287;
    int IC_UPDATE_ACTIVATION = 7288;
    int IC_DELETE_ACTIVATION = 7289;
    int IC_ALARM_ACTIVATE = 7290;
    int IC_ALARM_DEACTIVATE = 7291;

    // AlarmNotificationService
    int IC_ALARM_NOTIFICATION = 7292;

    // AlarmActivationConsumer
    int IC_ACCEPT_NEW_ACTIVATION = 7293;
    int IC_ACCEPT_CHANGED_ACTIVATION = 7294;
    int IC_ACCEPT_DELETE_ACTIVATION = 7295;
    int IC_ACCEPT_ALARM_ACTIVATION = 7296;
    int IC_ACCEPT_ALARM_ACTIVATIONS = 7297;

    // AlarmDefinitionConsumer
    int IC_ACCEPT_CONDITIONS = 7298;
    int IC_ACCEPT_NEW_CONDITION = 7299;
    int IC_ACCEPT_CHANGED_CONDITION = 7300;
    int IC_ACCEPT_DELETED_CONDITION = 7301;
    int IC_ACCEPT_DEFINITIONS = 7302;
    int IC_ACCEPT_NEW_DEFINITION = 7303;
    int IC_ACCEPT_CHANGED_DEFINITION = 7304;
    int IC_ACCEPT_DELETE_DEFINITION = 7305;

    // Exceptions
    int IC_ACCEPT_ALREADY_EXISTS_EXCEPTION = 7306;
    int IC_ACCEPT_DATA_VALIDATION_EXCEPTION = 7307;
    int IC_ACCEPT_NOT_ACCEPTED_EXCEPTION = 7308;
    int IC_ACCEPT_NOT_FOUND_EXCEPTION = 7309;
    int IC_ACCEPT_SYSTEM_EXCEPTION = 7310;
    int IC_ACCEPT_TRANSACTION_FAILED_EXCEPTION = 7311;

    // SHM Notification
    int IC_NEW_ALARM_NOTIFICATION = 7312;
    int IC_EXPIRED_ALARM_NOTIFICATION = 7313;
    int IC_VISUAL_EXPIRED_ALARM_NOTIFICATION = 7314;

    int IC_ALARM_ACTIVATION_STATUS = 7315;

    int MEMORY_USAGE = 7316;
    int IC_EXPIRED_NOTIFICATIONS_MEMORY_THRESHOLD_EXCEEDED = 7317;

    //XTP Alert Notification
    int XTP_ALERT_NOTIFICATION_NEW_UPDATE = 7318;

    //Alarm notification watchdog consumer
    int IC_ACCEPT_WATCHDOGS  = 7319;
    int IC_ACCEPT_NEW_WATCHDOG  = 7320;
    int IC_ACCEPT_CHANGED_WATCHDOG  = 7321;
    int IC_ACCEPT_DELETE_WATCHDOG  = 7322;

    //Alarm notification watchdog service
    int IC_WATCHDOGS  = 7323;
    int IC_NEW_WATCHDOG  = 7324;
    int IC_CHANGED_WATCHDOG  = 7325;
    int IC_DELETE_WATCHDOG  = 7326;
    int IC_PUBLISH_WATCHDOG = 7327;

    //Orb Name Alias consumer
    int IC_ACCEPT_ORB_NAME_ALIASES  = 7328;
    int IC_ACCEPT_NEW_ORB_NAME_ALIAS  = 7329;
    int IC_ACCEPT_CHANGED_ORB_NAME_ALIAS  = 7330;
    int IC_ACCEPT_DELETE_ORB_NAME_ALIAS  = 7331;

    //Orb Name Alias service
    int IC_ORB_NAME_ALIASES  = 7332;
    int IC_NEW_ORB_NAME_ALIAS  = 7333;
    int IC_CHANGED_ORB_NAME_ALIAS  = 7334;
    int IC_DELETE_ORB_NAME_ALIAS  = 7335;
    int IC_PUBLISH_ORB_NAME_ALIAS = 7336;

    // AlarmDefinitionService Calculations
    int IC_PUBLISH_CALCULATION = 7367;
    int IC_CREATE_CALCULATION  = 7368;
    int IC_UPDATE_CALCULATION  = 7369;
    int IC_DELETE_CALCULATION  = 7370;

    // AlarmDefinitionConsumer Calculations
    int IC_ACCEPT_CALCULATION = 7371;
    int IC_ACCEPT_NEW_CALCULATION = 7372;
    int IC_ACCEPT_CHANGED_CALCULATION = 7373;
    int IC_ACCEPT_DELETED_CALCULATION = 7374;

    //ICS GroupElement event handling
    int IC_ACCEPT_GROUP_ELEMENTS = 73930;
    int IC_ACCEPT_GROUP_ADD_ELEMENT = 73931;
    int IC_ACCEPT_GROUP_UPDATE_ELEMENT = 73932;
    int IC_ACCEPT_GROUP_REMOVE_ELEMENT = 73933;
    int IC_ACCEPT_GROUP_ELEMENT_RESULTS = 73940;
    int IC_CREATE_ELEMENTS_FOR_GROUP = 73934;
    int IC_ADD_ELEMENTS_TO_GROUP = 73935;
    int IC_UPDATE_ELEMENT = 73936;
    int IC_REMOVE_ELEMENTS_FROM_GROUP = 73937;
    int IC_PUBLISH_ROOT_ELEMENT_FOR_GROUP = 73938;
    int IC_PUBLISH_ELEMENTS_FOR_GROUP = 73939;
    int IC_MOVE_ELEMENTS_TO_GROUP = 73941;
    int IC_COPY_ELEMENTS_TO_GROUP = 73942;



    // AlarmActivationService ActivationAssignments
    int IC_PUBLISH_ACTIVATION_ASSIGNMENT = 7375;
    int IC_CREATE_ACTIVATION_ASSIGNMENT = 7376;
    int IC_UPDATE_ACTIVATION_ASSIGNMENT = 7377;
    int IC_DELETE_ACTIVATION_ASSIGNMENT = 7378;

    // AlarmActivationConsumer ActivationAssignments
    int IC_ACCEPT_NEW_ACTIVATION_ASSIGNMENT = 7379;
    int IC_ACCEPT_CHANGED_ACTIVATION_ASSIGNMENT = 7380;
    int IC_ACCEPT_DELETE_ACTIVATION_ASSIGNMENT = 7381;
    int IC_ACCEPT_ALARM_ACTIVATION_ASSIGNMENT = 7382;
    int IC_ACCEPT_ALARM_ACTIVATION_ASSIGNMENTS = 7383;

    //Logical Orb Name consumer
    int IC_ACCEPT_LOGICAL_ORB_NAMES = 7384;
    int IC_ACCEPT_NEW_LOGICAL_ORB_NAME = 7385;
    int IC_ACCEPT_DELETE_LOGICAL_ORB_NAME = 7386;
    int IC_ACCEPT_CHANGED_LOGICAL_ORB_NAME = 7387;

    //Logical Orb Name service
    int IC_LOGICAL_ORB_NAMES = 7388;
    int IC_NEW_LOGICAL_ORB_NAME = 7389;
    int IC_DELETE_LOGICAL_ORB_NAME = 7390;
    int IC_CHANGED_LOGICAL_ORB_NAME = 7391;
    int IC_PUBLISH_LOGICAL_ORB_NAME = 7392;

    // MDX event channel health IEC types
    int MARKET_DATA_ADMIN_HEALTH = 7400;
    int CURRENT_MARKET_HEALTH = 7401;
    int LAST_SALE_HEALTH = 7402;
    int RECAP_HEALTH = 7403;
    int TICKER_HEALTH = 7404;

    //GroupElement event handling 
    int GROUP_ADD_ELEMENT = 7510;
    int GROUP_UPDATE_ELEMENT = 7511;
    int GROUP_REMOVE_ELEMENT = 7512;
    int CB_GROUP_ADD_ELEMENT = 7520;
    int CB_GROUP_UPDATE_ELEMENT = 7521;
    int CB_GROUP_REMOVE_ELEMENT = 7522;

    //GroupService CancelOrder event handling
    int GROUP_CANCEL = 7530;
    int CB_GROUP_CANCEL = 7540;

    // Trade Status 
    int TRADE_STATUS_BY_GROUP = 7600;
    
    // Market buffer admin filtering (for Book Depth)
    int MARKET_BUFFER_ADMIN_BY_GROUP = 7700;

    //New events to handle FIX Message events
    int FIX_SESSION_MSG_EVENT = 8001;
    int FIX_APPLICATION_MSG_EVENT = 8002;

    // IEC events to signal SAGUI session browser coming up and going down
    int SMS_CONSUMER_START = 8100;
    int SMS_CONSUMER_STOP = 8101;
    // IEC events for SMS component external events used by SAGUI session browser
    int SMS_COMP_ALL_NOT_MASTER = 8110;
    int SMS_COMP_ALL_FAILED = 8111;
    int SMS_COMP_COMPONENT_FAILED = 8112;
    int SMS_COMP_COMPONENT_ESTABLISHED = 8113;
    int SMS_COMP_COMPONENT_MASTER_STATE = 8114;
    int SMS_COMP_COMPONENT_REMOVED = 8115;
    int SMS_COMP_COMPONENT_ADDED = 8116;
    // IEC events for SMS user external events used by SAGUI session browser
    int SMS_USER_LOGIN = 8130;
    int SMS_USER_LOGOUT = 8131;
    int SMS_USER_SESSION_OPENED = 8132;
    int SMS_USER_SESSION_CLOSED = 8133;
    int SMS_USER_OPEN_SESSIONS = 8134;

    // IEC events for callback and internal event dispatched for V4 type struct.
    int CB_CURRENT_MARKET_BY_PRODUCT_V4 = 8200;
    int DISPATCH_CURRENT_MARKET_BY_PRODUCT_V4 = 8220;
    int CB_NBBO_BY_PRODUCT_V4 = 8201;
    int DISPATCH_NBBO_BY_PRODUCT_V4 = 8221;
    int CB_LAST_SALE_BY_PRODUCT_V4 = 8202;
    int DISPATCH_LAST_SALE_BY_PRODUCT_V4 = 8222;
    int CB_RECAP_BY_PRODUCT_V4 = 8203;
    int DISPATCH_RECAP_BY_PRODUCT_V4 = 8223;
    int CB_TICKER_BY_PRODUCT_V4 = 8204;
    int DISPATCH_TICKER_BY_PRODUCT_V4 = 8224;

    int DSM_MARKET_DATA = 8300;
}