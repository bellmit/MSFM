#if ( ${KEY_TYPE} == "Int" )
#set ( $KEY_TYPE = "int" )
#elseif ( ${KEY_TYPE} == "Long" )
#set ( $KEY_TYPE = "long" )
#end
#if ( ${KEY_TYPE} == "int" )
    #set ( $__dont_fill_in_key_name           = "Int" )
    #set ( $__dont_fill_in_key_visitor_name   = "Int" )
#elseif ( ${KEY_TYPE} == "long" )
    #set ( $__dont_fill_in_key_name           = "Long" )
    #set ( $__dont_fill_in_key_visitor_name   = "Long" )
#else
    #set ( $__dont_fill_in_key_name           = "${KEY_TYPE}" )
    #set ( $__dont_fill_in_key_visitor_name   = "Object" )
#end
#set ( $__dont_fill_in_visitor = "${__dont_fill_in_key_visitor_name}VisitorIF" )
package com.cboe.client.util.collections;

/**
 * ${__dont_fill_in_key_name}ArrayHolder.java
 *
 * @author Dmitry Volpyansky
 *
 * FILE GENERATED BY VELOCITY TEMPLATE ENGINE FROM /vobs/dte/client/generator/DV_XArrayHolder.java (KEY_TYPE=${KEY_TYPE})
 *
 */

import com.cboe.client.util.*;

public class ${__dont_fill_in_key_name}ArrayHolder implements ${__dont_fill_in_key_name}ArrayHolderIF
{
    public ${KEY_TYPE}[] keys;
    public int   size;

    public static final ${__dont_fill_in_key_name}ArrayHolderIF EmptyArrayHolder = new ${__dont_fill_in_key_name}ArrayHolder()
    {
        public void add(${KEY_TYPE} key) {}
        public void add(${KEY_TYPE}[] keyArray) {}
        public void add(${KEY_TYPE}[] keyArray, int offset, int length) {}
    };

    public ${__dont_fill_in_key_name}ArrayHolder()
    {
        this(0);
    }

    public ${__dont_fill_in_key_name}ArrayHolder(int capacity)
    {
        keys = new ${KEY_TYPE}[capacity];
    }

    public int size()
    {
        return size;
    }

    public boolean isEmpty()
    {
        return size == 0;
    }

    public int capacity()
    {
        return keys.length;
    }

    public int ensureCapacity(int capacity)
    {
        if (keys.length < capacity)
        {
            keys = CollectionHelper.arrayclone(keys, 0, keys.length, capacity);
        }

        return keys.length;
    }

    public ${KEY_TYPE}[] keys()
    {
        return keys;
    }

    public ${KEY_TYPE}[] getKeys()
    {
        return CollectionHelper.arrayclone(keys, size);
    }

    public void add(${KEY_TYPE} key)
    {
        int newSize = size + 1;

        if (newSize >= keys.length)
        {
            keys = CollectionHelper.arrayclone(keys, 0, keys.length, newSize);
        }

        keys[size] = key;

        size = newSize;
    }

    public void add(${KEY_TYPE}[] keyArray)
    {
        int newSize = size + keyArray.length;

        if (newSize >= keys.length)
        {
            keys = CollectionHelper.arrayclone(keys, 0, keys.length, newSize);
        }

        System.arraycopy(keyArray, 0, keys, size, keyArray.length);

        size = newSize;
    }

    public void add(${KEY_TYPE}[] keyArray, int offset, int length)
    {
        int newSize = size + length;

        if (newSize >= keys.length)
        {
            keys = CollectionHelper.arrayclone(keys, 0, keys.length, newSize);
        }

        System.arraycopy(keyArray, offset, keys, size, length);

        size = newSize;
    }

    public ${KEY_TYPE} getKey(int index)
    {
        if (index < size)
        {
            return keys[index];
        }

#if ( ${KEY_TYPE} == "int" || ${KEY_TYPE} == "long" )
        return IntegerHelper.INVALID_VALUE;
#else
        return null;
#end
    }

    public boolean containsKey(${KEY_TYPE} object)
    {
        for (int i = 0; i < size; i++)
        {
            if (keys[i] == object)
            {
                return true;
            }
        }

        return false;
    }

    public ${__dont_fill_in_visitor} acceptVisitor(${__dont_fill_in_visitor} visitor)
    {
        for (int i = 0; i < size; i++)
        {
            visitor.visit(keys[i]);
        }

        return visitor;
    }

    public ${__dont_fill_in_key_name}ArrayHolderIF clear()
    {
#if ( ${KEY_TYPE} != "int" && ${KEY_TYPE} != "long" )
        for (int i = 0; i < size; i++)
        {
            keys[i] = null;
        }
#end

        size = 0;

        return this;
    }
}
