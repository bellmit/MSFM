#if ( ${KEY_TYPE} == "Int" )
#set ( $KEY_TYPE = "int" )
#elseif ( ${KEY_TYPE} == "Long" )
#set ( $KEY_TYPE = "long" )
#end
#if ( ${VALUE_TYPE} == "Int" )
#set ( $VALUE_TYPE = "int" )
#elseif ( ${VALUE_TYPE} == "Long" )
#set ( $VALUE_TYPE = "long" )
#end
#if ( ${KEY_TYPE} == "int" )
    #set ( $__dont_fill_in_key_name           = "Int" )
    #set ( $__dont_fill_in_key_visitor_name   = "Int" )
#elseif ( ${KEY_TYPE} == "long" )
    #set ( $__dont_fill_in_key_name           = "Long" )
    #set ( $__dont_fill_in_key_visitor_name   = "Long" )
#else
    #set ( $__dont_fill_in_key_name           = "${KEY_TYPE}" )
    #set ( $__dont_fill_in_key_visitor_name   = "Object" )
#end
#if ( ${VALUE_TYPE} == "int" )
    #set ( $__dont_fill_in_value_name         = "Int" )
    #set ( $__dont_fill_in_value_visitor_name = "Int" )
#elseif ( ${VALUE_TYPE} == "long" )
    #set ( $__dont_fill_in_value_name         = "Long" )
    #set ( $__dont_fill_in_value_visitor_name = "Long" )
#else
    #set ( $__dont_fill_in_value_name         = "${VALUE_TYPE}" )
    #set ( $__dont_fill_in_value_visitor_name = "Object" )
#end
#set ( $__dont_fill_in_visitor = "${__dont_fill_in_key_visitor_name}${__dont_fill_in_value_visitor_name}VisitorIF" )
package com.cboe.client.util.collections;

/**
 * ${__dont_fill_in_key_name}${__dont_fill_in_value_name}ArrayHolder.java
 *
 * @author Dmitry Volpyansky
 *
 * FILE GENERATED BY VELOCITY TEMPLATE ENGINE FROM /vobs/dte/client/generator/DV_XYArrayHolder.java (KEY_TYPE=${KEY_TYPE}, VALUE_TYPE=${VALUE_TYPE})
 *
 */

import com.cboe.client.util.*;

public class ${__dont_fill_in_key_name}${__dont_fill_in_value_name}ArrayHolder implements ${__dont_fill_in_key_name}${__dont_fill_in_value_name}ArrayHolderIF
{
    public ${KEY_TYPE}[]   keys;
    public ${VALUE_TYPE}[] values;
    public int      size;

    public static final ${__dont_fill_in_key_name}${__dont_fill_in_value_name}ArrayHolderIF EmptyArrayHolder = new ${__dont_fill_in_key_name}${__dont_fill_in_value_name}ArrayHolder()
    {
        public void add(${KEY_TYPE} key, ${VALUE_TYPE} value) {}
    };

    public ${__dont_fill_in_key_name}${__dont_fill_in_value_name}ArrayHolder()
    {
        this(0);
    }

    public ${__dont_fill_in_key_name}${__dont_fill_in_value_name}ArrayHolder(int capacity)
    {
        keys   = new ${KEY_TYPE}[capacity];
        values = new ${VALUE_TYPE}[capacity];
    }

    public int size()
    {
        return size;
    }

    public boolean isEmpty()
    {
        return size == 0;
    }

    public int capacity()
    {
        return keys.length;
    }

    public int ensureCapacity(int capacity)
    {
        if (keys.length < capacity)
        {
            keys   = CollectionHelper.arrayclone(keys,   0, keys.length,   capacity);
            values = CollectionHelper.arrayclone(values, 0, values.length, capacity);
        }

        return keys.length;
    }

    public ${KEY_TYPE}[] keys()
    {
        return keys;
    }

    public ${KEY_TYPE}[] getKeys()
    {
        return CollectionHelper.arrayclone(keys, size);
    }

    public ${VALUE_TYPE}[] values()
    {
        return values;
    }

    public ${VALUE_TYPE}[] getValues()
    {
        return CollectionHelper.arrayclone(values, size);
    }

    public void add(${KEY_TYPE} key, ${VALUE_TYPE} value)
    {
        int newSize = size + 1;

        if (newSize >= keys.length)
        {
            keys   = CollectionHelper.arrayclone(keys,   0, keys.length,   newSize);
            values = CollectionHelper.arrayclone(values, 0, values.length, newSize);
        }

        keys[size]   = key;
        values[size] = value;

        size = newSize;
    }

    public ${KEY_TYPE} getKey(int index)
    {
        if (index < size)
        {
            return keys[index];
        }

#if ( ${KEY_TYPE} == "int" || ${KEY_TYPE} == "long" )
        return IntegerHelper.INVALID_VALUE;
#else
        return null;
#end
    }

    public ${VALUE_TYPE} getValue(int index)
    {
        if (index < size)
        {
            return values[index];
        }

#if ( ${VALUE_TYPE} == "int" || ${VALUE_TYPE} == "long" )
        return IntegerHelper.INVALID_VALUE;
#else
        return null;
#end
    }

    public boolean containsKey(${KEY_TYPE} key)
    {
        for (int i = 0; i < size; i++)
        {
#if ( ${KEY_TYPE} == "int" || ${KEY_TYPE} == "long" )
            if (keys[i] == key)
#else
            if (keys[i] == key || key.equals(keys[i]))
#end
            {
                return true;
            }
        }

        return false;
    }

    public boolean containsValue(${VALUE_TYPE} value)
    {
        for (int i = 0; i < size; i++)
        {
#if ( ${VALUE_TYPE} == "int" || ${VALUE_TYPE} == "long" )
            if (values[i] == value)
#else
            if (values[i] == value || value.equals(values[i]))
#end
            {
                return true;
            }
        }

        return false;
    }

    public ${__dont_fill_in_visitor} acceptVisitor(${__dont_fill_in_visitor} visitor)
    {
        for (int i = 0; i < size; i++)
        {
            visitor.visit(keys[i], values[i]);
        }

        return visitor;
    }

    public ${__dont_fill_in_key_name}${__dont_fill_in_value_name}ArrayHolderIF clear()
    {
        for (int i = 0; i < size; i++)
        {
#if ( ${KEY_TYPE} == "int" || ${KEY_TYPE} == "long" )
            keys[i]   = 0;
#else
            keys[i]   = null;
#end
#if ( ${VALUE_TYPE} == "int" || ${VALUE_TYPE} == "long" )
            values[i] = 0;
#else
            values[i] = null;
#end
        }

        size = 0;

        return this;
    }
}
