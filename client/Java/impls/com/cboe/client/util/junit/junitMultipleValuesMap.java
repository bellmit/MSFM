package com.cboe.client.util.junit;

/**
 * junitMultipleValuesMap.java
 *
 * @author Dmitry Volpyansky
 *
 * FILE GENERATED BY VELOCITY TEMPLATE ENGINE FROM /vobs/dte/client/generator/DV_junitMultipleValuesMap.java
 *
 */

import com.cboe.client.util.*;
import com.cboe.client.util.collections.*;

public class junitMultipleValuesMap extends JunitTestCase
{
    static final int[]    iNumbers = new int[10000];
    static final int[]    rNumbers = new int[10000];
    static final String[] sNumbers = new String[10000];
    static final int[]    bad_iNumbers = new int[10000];
    static final String[] bad_sNumbers = new String[10000];
    static final int[]    bad_rNumbers = new int[10000];
    static final int[]    multi_iNumbers = new int[100];
    static final String[] multi_sNumbers = new String[100];

    static
    {
        for (int i = 0; i < iNumbers.length; i++)
        {
            iNumbers[i] = i;
            rNumbers[i] = i + 1000000;
            sNumbers[i] = Integer.toString(i);
            bad_iNumbers[i] = i + 5000000;
            bad_rNumbers[i] = i + 6000000;
            bad_sNumbers[i] = Integer.toString(i + 5000000);
        }

        for (int i = 0; i < multi_iNumbers.length; i++)
        {
            multi_iNumbers[i] = 2 * i;
            multi_sNumbers[i] = Integer.toString(2 * i);
        }
    }

    public void testIntStringMultipleValuesMap() throws Exception
    {
        IntStringMultipleValuesMap map = IntStringMultipleValuesMap.unsynchronizedMap();

        int i;
        int[]    goodKeyMap    = iNumbers;
        String[] goodValueMap  = sNumbers;
        int[]    badKeyMap     = bad_iNumbers;
        String[] badValueMap   = bad_sNumbers;
        String[] multiValueMap = multi_sNumbers;
        String[] tempValueMap  = new String[multiValueMap.length];
        String[] tempValueMap2 = new String[10];
        IntArrayHolder keyHolder = new IntArrayHolder();
        StringArrayHolder valueHolder = new StringArrayHolder();

        assertEquals(0, map.size());

//-----------

        map.putKeyValue(goodKeyMap[0], multiValueMap[0]);
        map.putKeyValue(goodKeyMap[0], multiValueMap[1]);
        map.putKeyValue(goodKeyMap[0], multiValueMap[2]);
        map.putKeyValue(goodKeyMap[0], multiValueMap[3]);
        map.putKeyValue(goodKeyMap[0], multiValueMap[4]);

        assertEquals(5, map.size());

        valueHolder.clear();

        map.getValuesForKey(goodKeyMap[0], valueHolder);

        assertEquals(5, valueHolder.size());

        assertEquals(multiValueMap[0], valueHolder.getKey(0));
        assertEquals(multiValueMap[1], valueHolder.getKey(1));
        assertEquals(multiValueMap[2], valueHolder.getKey(2));
        assertEquals(multiValueMap[3], valueHolder.getKey(3));
        assertEquals(multiValueMap[4], valueHolder.getKey(4));
        assertNotFoundInMap(valueHolder.getKey(5));

        valueHolder.clear();

        assertEquals(0, valueHolder.size());
        assertNotFoundInMap(valueHolder.getKey(0));

        map.clear();
        valueHolder.clear();

        assertEquals(0, map.size());

        map.getValuesForKey(goodKeyMap[0], valueHolder);

        assertEquals(0, valueHolder.size());

        assertNotFoundInMap(valueHolder.getKey(0));
        assertNotFoundInMap(valueHolder.getKey(1));
        assertNotFoundInMap(valueHolder.getKey(2));
        assertNotFoundInMap(valueHolder.getKey(3));
        assertNotFoundInMap(valueHolder.getKey(4));
        assertNotFoundInMap(valueHolder.getKey(5));

//-----------

        map.clear();

        for (i = 0; i < multiValueMap.length; i++)
        {
            map.putKeyValue(goodKeyMap[0], multiValueMap[i]);
        }

        assertEquals(multiValueMap.length, map.countValues(goodKeyMap[0]));

        map.getValuesForKey(goodKeyMap[0], valueHolder.clear());

//TODO        assertEquals(multiValueMap.length, map.getAll(goodKeyMap[0], tempValueMap));
//TODO        assertEquals(tempValueMap2.length, map.getAll(goodKeyMap[0], tempValueMap2));
//TODO        assertEquals(tempValueMap.length,  map.getAll(goodKeyMap[0]).length);
//TODO        assertEquals(tempValueMap,         map.getAll(goodKeyMap[0]));
        assertEquals(multiValueMap,        valueHolder.getKeys(), 0, valueHolder.size());

        map.clear();

        assertEquals(0, map.size());

        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[2], 0));
        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[0], 0));
        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[0], 1));
        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[0], 2));
        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[0], 3));
        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[0], 4));
        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[0], 5));


        map.clear();

        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[2], 0));

        for (i = 0; i < goodValueMap.length; i++)
        {
            assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[i], 0));
            map.putKeyValue(goodKeyMap[i], goodValueMap[i]);
        }

        assertEquals(goodValueMap.length, map.size());

        for (i = 0; i < goodValueMap.length; i++)
        {
            assertNotFoundInMap(map.getValueForKeyAt(badKeyMap[i], 0));
            assertEquals(goodValueMap[i], map.getValueForKeyAt(goodKeyMap[i], 0));
        }

        map.removeKey(goodKeyMap[2]);

        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[2], 0));

        assertEquals(goodValueMap.length - 1, map.size());

        for (i = 0; i < 10; i++)
        {
            map.putKeyValue(goodKeyMap[2], goodValueMap[2]);
        }

        assertEquals(goodValueMap.length, map.size());
        assertEquals(goodValueMap[2], map.getValueForKeyAt(goodKeyMap[2], 0));

        for (i = 0; i < goodValueMap.length; i++)
        {
            assertEquals(goodValueMap[i], map.getValueForKeyAt(goodKeyMap[i], 0));
            assertTrue(map.containsKey(goodKeyMap[i]));
            assertTrue(map.containsValue(goodValueMap[i]));
            assertFalse(map.containsKey(badKeyMap[i]));
            assertFalse(map.containsValue(badValueMap[i]));
        }

        assertFalse(map.isEmpty());

        map.clear();

        assertTrue(map.isEmpty());

        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[2], 0));

        assertEquals(0, map.size());
    }

    public void testIntIntMultipleValuesMap() throws Exception
    {
        IntIntMultipleValuesMap map = IntIntMultipleValuesMap.unsynchronizedMap();

        int i;
        int[] goodKeyMap    = iNumbers;
        int[] goodValueMap  = rNumbers;
        int[] badKeyMap     = bad_iNumbers;
        int[] badValueMap   = bad_rNumbers;
        int[] multiValueMap = multi_iNumbers;
        int[] tempValueMap  = new int[multiValueMap.length];
        int[] tempValueMap2 = new int[10];
        IntArrayHolder keyHolder = new IntArrayHolder();
        IntArrayHolder valueHolder = new IntArrayHolder();

        assertEquals(0, map.size());

//-----------

        map.putKeyValue(goodKeyMap[0], multiValueMap[0]);
        map.putKeyValue(goodKeyMap[0], multiValueMap[1]);
        map.putKeyValue(goodKeyMap[0], multiValueMap[2]);
        map.putKeyValue(goodKeyMap[0], multiValueMap[3]);
        map.putKeyValue(goodKeyMap[0], multiValueMap[4]);

        assertEquals(5, map.size());

        valueHolder.clear();

        map.getValuesForKey(goodKeyMap[0], valueHolder);

        assertEquals(5, valueHolder.size());

        assertEquals(multiValueMap[0], valueHolder.getKey(0));
        assertEquals(multiValueMap[1], valueHolder.getKey(1));
        assertEquals(multiValueMap[2], valueHolder.getKey(2));
        assertEquals(multiValueMap[3], valueHolder.getKey(3));
        assertEquals(multiValueMap[4], valueHolder.getKey(4));
        assertNotFoundInMap(valueHolder.getKey(5));

        valueHolder.clear();

        assertEquals(0, valueHolder.size());
        assertNotFoundInMap(valueHolder.getKey(0));

        map.clear();
        valueHolder.clear();

        assertEquals(0, map.size());

        map.getValuesForKey(goodKeyMap[0], valueHolder);

        assertEquals(0, valueHolder.size());

        assertNotFoundInMap(valueHolder.getKey(0));
        assertNotFoundInMap(valueHolder.getKey(1));
        assertNotFoundInMap(valueHolder.getKey(2));
        assertNotFoundInMap(valueHolder.getKey(3));
        assertNotFoundInMap(valueHolder.getKey(4));
        assertNotFoundInMap(valueHolder.getKey(5));

//-----------

        map.clear();

        for (i = 0; i < multiValueMap.length; i++)
        {
            map.putKeyValue(goodKeyMap[0], multiValueMap[i]);
        }

        assertEquals(multiValueMap.length, map.countValues(goodKeyMap[0]));

        map.getValuesForKey(goodKeyMap[0], valueHolder.clear());

//TODO        assertEquals(multiValueMap.length, map.getAll(goodKeyMap[0], tempValueMap));
//TODO        assertEquals(tempValueMap2.length, map.getAll(goodKeyMap[0], tempValueMap2));
//TODO        assertEquals(tempValueMap.length,  map.getAll(goodKeyMap[0]).length);
//TODO        assertEquals(tempValueMap,         map.getAll(goodKeyMap[0]));
        assertEquals(multiValueMap,        valueHolder.getKeys(), 0, valueHolder.size());

        map.clear();

        assertEquals(0, map.size());

        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[2], 0));
        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[0], 0));
        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[0], 1));
        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[0], 2));
        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[0], 3));
        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[0], 4));
        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[0], 5));


        map.clear();

        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[2], 0));

        for (i = 0; i < goodValueMap.length; i++)
        {
            assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[i], 0));
            map.putKeyValue(goodKeyMap[i], goodValueMap[i]);
        }

        assertEquals(goodValueMap.length, map.size());

        for (i = 0; i < goodValueMap.length; i++)
        {
            assertNotFoundInMap(map.getValueForKeyAt(badKeyMap[i], 0));
            assertEquals(goodValueMap[i], map.getValueForKeyAt(goodKeyMap[i], 0));
        }

        map.removeKey(goodKeyMap[2]);

        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[2], 0));

        assertEquals(goodValueMap.length - 1, map.size());

        for (i = 0; i < 10; i++)
        {
            map.putKeyValue(goodKeyMap[2], goodValueMap[2]);
        }

        assertEquals(goodValueMap.length, map.size());
        assertEquals(goodValueMap[2], map.getValueForKeyAt(goodKeyMap[2], 0));

        for (i = 0; i < goodValueMap.length; i++)
        {
            assertEquals(goodValueMap[i], map.getValueForKeyAt(goodKeyMap[i], 0));
            assertTrue(map.containsKey(goodKeyMap[i]));
            assertTrue(map.containsValue(goodValueMap[i]));
            assertFalse(map.containsKey(badKeyMap[i]));
            assertFalse(map.containsValue(badValueMap[i]));
        }

        assertFalse(map.isEmpty());

        map.clear();

        assertTrue(map.isEmpty());

        assertNotFoundInMap(map.getValueForKeyAt(goodKeyMap[2], 0));

        assertEquals(0, map.size());
    }
}

