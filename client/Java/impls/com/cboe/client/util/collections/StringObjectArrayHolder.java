package com.cboe.client.util.collections;

/**
 * StringObjectArrayHolder.java
 *
 * @author Dmitry Volpyansky
 *
 * FILE GENERATED BY VELOCITY TEMPLATE ENGINE FROM /vobs/dte/client/generator/DV_XYArrayHolder.java (KEY_TYPE=String, VALUE_TYPE=Object)
 *
 */

import com.cboe.client.util.*;

public class StringObjectArrayHolder implements StringObjectArrayHolderIF
{
    public String[]   keys;
    public Object[] values;
    public int      size;

    public static final StringObjectArrayHolderIF EmptyArrayHolder = new StringObjectArrayHolder()
    {
        public void add(String key, Object value) {}
    };

    public StringObjectArrayHolder()
    {
        this(0);
    }

    public StringObjectArrayHolder(int capacity)
    {
        keys   = new String[capacity];
        values = new Object[capacity];
    }

    public int size()
    {
        return size;
    }

    public boolean isEmpty()
    {
        return size == 0;
    }

    public int capacity()
    {
        return keys.length;
    }

    public int ensureCapacity(int capacity)
    {
        if (keys.length < capacity)
        {
            keys   = CollectionHelper.arrayclone(keys,   0, keys.length,   capacity);
            values = CollectionHelper.arrayclone(values, 0, values.length, capacity);
        }

        return keys.length;
    }

    public String[] keys()
    {
        return keys;
    }

    public String[] getKeys()
    {
        return CollectionHelper.arrayclone(keys, size);
    }

    public Object[] values()
    {
        return values;
    }

    public Object[] getValues()
    {
        return CollectionHelper.arrayclone(values, size);
    }

    public void add(String key, Object value)
    {
        int newSize = size + 1;

        if (newSize >= keys.length)
        {
            keys   = CollectionHelper.arrayclone(keys,   0, keys.length,   newSize);
            values = CollectionHelper.arrayclone(values, 0, values.length, newSize);
        }

        keys[size]   = key;
        values[size] = value;

        size = newSize;
    }

    public String getKey(int index)
    {
        if (index < size)
        {
            return keys[index];
        }

        return null;
    }

    public Object getValue(int index)
    {
        if (index < size)
        {
            return values[index];
        }

        return null;
    }

    public boolean containsKey(String key)
    {
        for (int i = 0; i < size; i++)
        {
            if (keys[i] == key || key.equals(keys[i]))
            {
                return true;
            }
        }

        return false;
    }

    public boolean containsValue(Object value)
    {
        for (int i = 0; i < size; i++)
        {
            if (values[i] == value || value.equals(values[i]))
            {
                return true;
            }
        }

        return false;
    }

    public ObjectObjectVisitorIF acceptVisitor(ObjectObjectVisitorIF visitor)
    {
        for (int i = 0; i < size; i++)
        {
            visitor.visit(keys[i], values[i]);
        }

        return visitor;
    }

    public StringObjectArrayHolderIF clear()
    {
        for (int i = 0; i < size; i++)
        {
            keys[i]   = null;
            values[i] = null;
        }

        size = 0;

        return this;
    }
}

