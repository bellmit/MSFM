package com.cboe.client.util.collections;

/**
 * StringArrayHolder.java
 *
 * @author Dmitry Volpyansky
 *
 * FILE GENERATED BY VELOCITY TEMPLATE ENGINE FROM /vobs/dte/client/generator/DV_XArrayHolder.java (KEY_TYPE=String)
 *
 */

import com.cboe.client.util.*;

public class StringArrayHolder implements StringArrayHolderIF
{
    public String[] keys;
    public int   size;

    public static final StringArrayHolderIF EmptyArrayHolder = new StringArrayHolder()
    {
        public void add(String key) {}
        public void add(String[] keyArray) {}
        public void add(String[] keyArray, int offset, int length) {}
    };

    public StringArrayHolder()
    {
        this(0);
    }

    public StringArrayHolder(int capacity)
    {
        keys = new String[capacity];
    }

    public int size()
    {
        return size;
    }

    public boolean isEmpty()
    {
        return size == 0;
    }

    public int capacity()
    {
        return keys.length;
    }

    public int ensureCapacity(int capacity)
    {
        if (keys.length < capacity)
        {
            keys = CollectionHelper.arrayclone(keys, 0, keys.length, capacity);
        }

        return keys.length;
    }

    public String[] keys()
    {
        return keys;
    }

    public String[] getKeys()
    {
        return CollectionHelper.arrayclone(keys, size);
    }

    public void add(String key)
    {
        int newSize = size + 1;

        if (newSize >= keys.length)
        {
            keys = CollectionHelper.arrayclone(keys, 0, keys.length, newSize);
        }

        keys[size] = key;

        size = newSize;
    }

    public void add(String[] keyArray)
    {
        int newSize = size + keyArray.length;

        if (newSize >= keys.length)
        {
            keys = CollectionHelper.arrayclone(keys, 0, keys.length, newSize);
        }

        System.arraycopy(keyArray, 0, keys, size, keyArray.length);

        size = newSize;
    }

    public void add(String[] keyArray, int offset, int length)
    {
        int newSize = size + length;

        if (newSize >= keys.length)
        {
            keys = CollectionHelper.arrayclone(keys, 0, keys.length, newSize);
        }

        System.arraycopy(keyArray, offset, keys, size, length);

        size = newSize;
    }

    public String getKey(int index)
    {
        if (index < size)
        {
            return keys[index];
        }

        return null;
    }

    public boolean containsKey(String object)
    {
        for (int i = 0; i < size; i++)
        {
            if (keys[i] == object)
            {
                return true;
            }
        }

        return false;
    }

    public ObjectVisitorIF acceptVisitor(ObjectVisitorIF visitor)
    {
        for (int i = 0; i < size; i++)
        {
            visitor.visit(keys[i]);
        }

        return visitor;
    }

    public StringArrayHolderIF clear()
    {
        for (int i = 0; i < size; i++)
        {
            keys[i] = null;
        }

        size = 0;

        return this;
    }
}

