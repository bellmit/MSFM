package com.cboe.application.supplier.proxy;

import com.cboe.domain.instrumentorExtension.MethodInstrumentorExtension;
import com.cboe.domain.instrumentorExtension.MethodInstrumentorExtensionFactory;
import com.cboe.domain.instrumentorExtension.QueueInstrumentorExtension;
import com.cboe.domain.supplier.proxy.CallbackInterceptor;
import com.cboe.idl.cmiCallbackV2.CMILockedQuoteStatusConsumer;
import com.cboe.infrastructureServices.foundationFramework.utilities.Log;
import com.cboe.instrumentationService.factories.InstrumentorAlreadyCreatedException;
import com.cboe.instrumentationService.instrumentors.Instrumentor;
import com.cboe.interfaces.callback.LockedQuoteStatusV2Consumer;

/**
 * Generated by Java Grinder
 * @author Java Grinder
 */
public class QuoteNotificationConsumerInterceptor extends CallbackInterceptor implements LockedQuoteStatusV2Consumer
{

    MethodInstrumentorExtension acceptQuoteLockedNotification0;
    CMILockedQuoteStatusConsumer cmiObject;

    /**
     * Create a new instance of ths interceptor for the provided BObject.
     * Create a cache of the instrumentors necessary for instrumentation.
     */
    public QuoteNotificationConsumerInterceptor(CMILockedQuoteStatusConsumer o)
    {
        this.cmiObject = o;
    }

    /**
     */
    public void startInstrumentation(String prefix, boolean privateOnly)
    {
        try
        {
            StringBuilder name = new StringBuilder(prefix.length()+Instrumentor.NAME_DELIMITER.length()+30);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptQuoteLockedNotification0");
            acceptQuoteLockedNotification0 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
        } catch (InstrumentorAlreadyCreatedException e)
        {
            Log.exception(e);
        }
    }

    /**
     *
     */
    public void removeInstrumentation()
    {
        if(acceptQuoteLockedNotification0 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptQuoteLockedNotification0.getName());
            acceptQuoteLockedNotification0 = null;
        }
    }

    /**
     *
     */
    public void addQueueInstrumentorRelation(QueueInstrumentorExtension queueInstrumentorExtension)
    {
        if(acceptQuoteLockedNotification0 != null)
        {
            acceptQuoteLockedNotification0.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
    }

    /**
     */
    public void acceptQuoteLockedReport(com.cboe.idl.cmiQuote.LockNotificationStruct[] param0, int param1)
    {
        boolean exception = false;
        if (acceptQuoteLockedNotification0 != null)
        {
            acceptQuoteLockedNotification0.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptQuoteLockedReport(param0, param1);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptQuoteLockedNotification0 != null)
            {
                acceptQuoteLockedNotification0.incCalls(1);
                acceptQuoteLockedNotification0.afterMethodCall();
                if (exception)
                {
                    acceptQuoteLockedNotification0.incExceptions(1);
                }
            }
        }
    }
}