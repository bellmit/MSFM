package com.cboe.application.supplier.proxy;

import com.cboe.domain.instrumentorExtension.MethodInstrumentorExtension;
import com.cboe.domain.instrumentorExtension.MethodInstrumentorExtensionFactory;
import com.cboe.domain.instrumentorExtension.QueueInstrumentorExtension;
import com.cboe.domain.supplier.proxy.CallbackInterceptor;
import com.cboe.idl.cmiIntermarketCallback.CMIIntermarketOrderStatusConsumer;
import com.cboe.infrastructureServices.foundationFramework.utilities.Log;
import com.cboe.instrumentationService.factories.InstrumentorAlreadyCreatedException;
import com.cboe.instrumentationService.instrumentors.Instrumentor;
import com.cboe.interfaces.intermarketCallback.IntermarketOrderStatusConsumer;

/**
 * Generated by Java Grinder
 * @author Java Grinder
 */
public class IntermarketOrderStatusConsumerInterceptor extends CallbackInterceptor implements IntermarketOrderStatusConsumer
{


    MethodInstrumentorExtension acceptNewHeldOrder5;


    MethodInstrumentorExtension acceptHeldOrderStatus4;


    MethodInstrumentorExtension acceptHeldOrderFilledReport3;


    MethodInstrumentorExtension acceptHeldOrderCanceledReport2;


    MethodInstrumentorExtension acceptFillRejectReport1;

    MethodInstrumentorExtension acceptCancelHeldOrderRequest0;
    CMIIntermarketOrderStatusConsumer cmiObject;

    /**
     * Create a new instance of ths interceptor for the provided BObject.
     * Create a cache of the instrumentors necessary for instrumentation.
     */
    public IntermarketOrderStatusConsumerInterceptor(CMIIntermarketOrderStatusConsumer o)
    {
        this.cmiObject = o;
    }

    /**
     */
    public void startInstrumentation(String prefix, boolean privateOnly)
    {
        try
        {
            StringBuilder name = new StringBuilder(prefix.length()+Instrumentor.NAME_DELIMITER.length()+30);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptCancelHeldOrderRequest0");
            acceptCancelHeldOrderRequest0 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
            name.setLength(0);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptFillRejectReport1");
            acceptFillRejectReport1 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
            name.setLength(0);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptHeldOrderCanceledReport2");
            acceptHeldOrderCanceledReport2 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
            name.setLength(0);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptHeldOrderFilledReport3");
            acceptHeldOrderFilledReport3 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
            name.setLength(0);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptHeldOrderStatus4");
            acceptHeldOrderStatus4 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
            name.setLength(0);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptNewHeldOrder5");
            acceptNewHeldOrder5 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
        } catch (InstrumentorAlreadyCreatedException e)
        {
            Log.exception(e);
        }
    }

    /**
     *
     */
    public void removeInstrumentation()
    {
        if(acceptCancelHeldOrderRequest0 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptCancelHeldOrderRequest0.getName());
            acceptCancelHeldOrderRequest0 = null;
        }
        if(acceptFillRejectReport1 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptFillRejectReport1.getName());
            acceptFillRejectReport1 = null;
        }
        if(acceptHeldOrderCanceledReport2 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptHeldOrderCanceledReport2.getName());
            acceptHeldOrderCanceledReport2 = null;
        }
        if(acceptHeldOrderFilledReport3 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptHeldOrderFilledReport3.getName());
            acceptHeldOrderFilledReport3 = null;
        }
        if(acceptHeldOrderStatus4 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptHeldOrderStatus4.getName());
            acceptHeldOrderStatus4 = null;
        }
        if(acceptNewHeldOrder5 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptNewHeldOrder5.getName());
            acceptNewHeldOrder5 = null;
        }
    }

    /**
     *
     */
    public void addQueueInstrumentorRelation(QueueInstrumentorExtension queueInstrumentorExtension)
    {
        if(acceptCancelHeldOrderRequest0!=null)
        {
            acceptCancelHeldOrderRequest0.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
        if(acceptFillRejectReport1 != null)
        {
            acceptFillRejectReport1.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
        if(acceptHeldOrderCanceledReport2 != null)
        {
            acceptHeldOrderCanceledReport2.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
        if(acceptHeldOrderFilledReport3 != null)
        {
            acceptHeldOrderFilledReport3.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
        if(acceptHeldOrderStatus4 != null)
        {
            acceptHeldOrderStatus4.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
        if(acceptNewHeldOrder5 != null)
        {
            acceptNewHeldOrder5.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
    }

    /**
     */
    public void acceptCancelHeldOrderRequest(com.cboe.idl.cmiProduct.ProductKeysStruct param0, com.cboe.idl.cmiIntermarketMessages.HeldOrderCancelRequestStruct param1)
    {
        boolean exception = false;
        if (acceptCancelHeldOrderRequest0 != null)
        {
            acceptCancelHeldOrderRequest0.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptCancelHeldOrderRequest(param0, param1);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptCancelHeldOrderRequest0 != null)
            {
                acceptCancelHeldOrderRequest0.incCalls(1);
                acceptCancelHeldOrderRequest0.afterMethodCall();
                if (exception)
                {
                    acceptCancelHeldOrderRequest0.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void acceptFillRejectReport(com.cboe.idl.cmiIntermarketMessages.OrderFillRejectStruct param0)
    {
        boolean exception = false;
        if (acceptFillRejectReport1 != null)
        {
            acceptFillRejectReport1.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptFillRejectReport(param0);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptFillRejectReport1 != null)
            {
                acceptFillRejectReport1.incCalls(1);
                acceptFillRejectReport1.afterMethodCall();
                if (exception)
                {
                    acceptFillRejectReport1.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void acceptHeldOrderCanceledReport(com.cboe.idl.cmiIntermarketMessages.HeldOrderCancelReportStruct param0)
    {
        boolean exception = false;
        if (acceptHeldOrderCanceledReport2 != null)
        {
            acceptHeldOrderCanceledReport2.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptHeldOrderCanceledReport(param0);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptHeldOrderCanceledReport2 != null)
            {
                acceptHeldOrderCanceledReport2.incCalls(1);
                acceptHeldOrderCanceledReport2.afterMethodCall();
                if (exception)
                {
                    acceptHeldOrderCanceledReport2.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void acceptHeldOrderFilledReport(com.cboe.idl.cmiIntermarketMessages.HeldOrderFilledReportStruct param0)
    {
        boolean exception = false;
        if (acceptHeldOrderFilledReport3 != null)
        {
            acceptHeldOrderFilledReport3.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptHeldOrderFilledReport(param0);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptHeldOrderFilledReport3 != null)
            {
                acceptHeldOrderFilledReport3.incCalls(1);
                acceptHeldOrderFilledReport3.afterMethodCall();
                if (exception)
                {
                    acceptHeldOrderFilledReport3.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void acceptHeldOrderStatus(com.cboe.idl.cmiIntermarketMessages.HeldOrderDetailStruct[] param0)
    {
        boolean exception = false;
        if (acceptHeldOrderStatus4 != null)
        {
            acceptHeldOrderStatus4.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptHeldOrderStatus(param0);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptHeldOrderStatus4 != null)
            {
                acceptHeldOrderStatus4.incCalls(1);
                acceptHeldOrderStatus4.afterMethodCall();
                if (exception)
                {
                    acceptHeldOrderStatus4.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void acceptNewHeldOrder(com.cboe.idl.cmiIntermarketMessages.HeldOrderDetailStruct param0)
    {
        boolean exception = false;
        if (acceptNewHeldOrder5 != null)
        {
            acceptNewHeldOrder5.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptNewHeldOrder(param0);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptNewHeldOrder5 != null)
            {
                acceptNewHeldOrder5.incCalls(1);
                acceptNewHeldOrder5.afterMethodCall();
                if (exception)
                {
                    acceptNewHeldOrder5.incExceptions(1);
                }
            }
        }
    }
}