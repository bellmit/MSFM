package com.cboe.application.supplier.proxy;

import com.cboe.domain.instrumentorExtension.MethodInstrumentorExtension;
import com.cboe.domain.instrumentorExtension.MethodInstrumentorExtensionFactory;
import com.cboe.domain.instrumentorExtension.QueueInstrumentorExtension;
import com.cboe.domain.supplier.proxy.CallbackInterceptor;
import com.cboe.idl.cmiCallback.CMIUserSessionAdmin;
import com.cboe.infrastructureServices.foundationFramework.utilities.Log;
import com.cboe.instrumentationService.factories.InstrumentorAlreadyCreatedException;
import com.cboe.instrumentationService.instrumentors.Instrumentor;
import com.cboe.interfaces.callback.UserSessionAdminConsumer;

/**
 * Generated by Java Grinder
 * @author Java Grinder
 */
public class UserSessionAdminConsumerInterceptor extends CallbackInterceptor implements UserSessionAdminConsumer
{


    MethodInstrumentorExtension acceptTextMessage4;


    MethodInstrumentorExtension acceptLogout3;


    MethodInstrumentorExtension acceptHeartBeat2;


    MethodInstrumentorExtension acceptCallbackRemoval1;

    MethodInstrumentorExtension acceptAuthenticationNotice0;
    CMIUserSessionAdmin cmiObject;

    /**
     * Create a new instance of ths interceptor for the provided BObject.
     * Create a cache of the instrumentors necessary for instrumentation.
     */
    public UserSessionAdminConsumerInterceptor(CMIUserSessionAdmin o)
    {
        this.cmiObject = o;
    }

    /**
     */
    public void startInstrumentation(String prefix, boolean privateOnly)
    {
        try
        {
            StringBuilder name = new StringBuilder(prefix.length()+Instrumentor.NAME_DELIMITER.length()+27);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptAuthenticationNotice0");
            acceptAuthenticationNotice0 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
            name.setLength(0);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptCallbackRemoval1");
            acceptCallbackRemoval1 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
            name.setLength(0);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptHeartBeat2");
            acceptHeartBeat2 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
            name.setLength(0);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptLogout3");
            acceptLogout3 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
            name.setLength(0);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptTextMessage4");
            acceptTextMessage4 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
        } catch (InstrumentorAlreadyCreatedException e)
        {
            Log.exception(e);
        }
    }

    /**
     *
     */
    public void removeInstrumentation()
    {
        if(acceptAuthenticationNotice0 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptAuthenticationNotice0.getName());
            acceptAuthenticationNotice0 = null;
        }
        if(acceptCallbackRemoval1 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptCallbackRemoval1.getName());
            acceptCallbackRemoval1 = null;
        }
        if(acceptHeartBeat2 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptHeartBeat2.getName());
            acceptHeartBeat2 = null;
        }
        if(acceptLogout3 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptLogout3.getName());
            acceptLogout3 = null;
        }
        if(acceptTextMessage4 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptTextMessage4.getName());
            acceptTextMessage4 = null;
        }
    }

    /**
     *
     */
    public void addQueueInstrumentorRelation(QueueInstrumentorExtension queueInstrumentorExtension)
    {
        if(acceptAuthenticationNotice0 != null)
        {
            acceptAuthenticationNotice0.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
        if(acceptCallbackRemoval1 != null)
        {
            acceptCallbackRemoval1.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
        if(acceptHeartBeat2 != null)
        {
            acceptHeartBeat2.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
        if(acceptLogout3 != null)
        {
            acceptLogout3.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
        if(acceptTextMessage4 != null)
        {
            acceptTextMessage4.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
    }

    /**
     */
    public void acceptAuthenticationNotice()
    {
        boolean exception = false;
        if (acceptAuthenticationNotice0 != null)
        {
            acceptAuthenticationNotice0.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptAuthenticationNotice();
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptAuthenticationNotice0 != null)
            {
                acceptAuthenticationNotice0.incCalls(1);
                acceptAuthenticationNotice0.afterMethodCall();
                if (exception)
                {
                    acceptAuthenticationNotice0.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void acceptCallbackRemoval(com.cboe.idl.cmiUtil.CallbackInformationStruct param0, java.lang.String param1, int param2)
    {
        boolean exception = false;
        if (acceptCallbackRemoval1 != null)
        {
            acceptCallbackRemoval1.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptCallbackRemoval(param0, param1, param2);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptCallbackRemoval1 != null)
            {
                acceptCallbackRemoval1.incCalls(1);
                acceptCallbackRemoval1.afterMethodCall();
                if (exception)
                {
                    acceptCallbackRemoval1.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public com.cboe.idl.cmiAdmin.HeartBeatStruct acceptHeartBeat(com.cboe.idl.cmiAdmin.HeartBeatStruct param0)
    {
        boolean exception = false;
        if (acceptHeartBeat2 != null)
        {
            acceptHeartBeat2.beforeMethodCall();
        }
        try
        {
            return cmiObject.acceptHeartBeat(param0);
        } catch (RuntimeException ex)
        {
            exception = true;
            Log.exception(ex);
            throw ex;
        } finally
        {
            if (acceptHeartBeat2 != null)
            {
                acceptHeartBeat2.incCalls(1);
                acceptHeartBeat2.afterMethodCall();
                if (exception)
                {
                    acceptHeartBeat2.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void acceptLogout(java.lang.String param0)
    {
        boolean exception = false;
        if (acceptLogout3 != null)
        {
            acceptLogout3.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptLogout(param0);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptLogout3 != null)
            {
                acceptLogout3.incCalls(1);
                acceptLogout3.afterMethodCall();
                if (exception)
                {
                    acceptLogout3.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void acceptTextMessage(com.cboe.idl.cmiAdmin.MessageStruct param0)
    {
        boolean exception = false;
        if (acceptTextMessage4 != null)
        {
            acceptTextMessage4.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptTextMessage(param0);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptTextMessage4 != null)
            {
                acceptTextMessage4.incCalls(1);
                acceptTextMessage4.afterMethodCall();
                if (exception)
                {
                    acceptTextMessage4.incExceptions(1);
                }
            }
        }
    }
}