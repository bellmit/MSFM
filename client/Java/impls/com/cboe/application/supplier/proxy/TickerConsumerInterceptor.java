package com.cboe.application.supplier.proxy;

import com.cboe.domain.instrumentorExtension.MethodInstrumentorExtension;
import com.cboe.domain.instrumentorExtension.MethodInstrumentorExtensionFactory;
import com.cboe.domain.instrumentorExtension.QueueInstrumentorExtension;
import com.cboe.domain.supplier.proxy.CallbackInterceptor;
import com.cboe.idl.cmiCallback.CMITickerConsumer;
import com.cboe.infrastructureServices.foundationFramework.utilities.Log;
import com.cboe.instrumentationService.factories.InstrumentorAlreadyCreatedException;
import com.cboe.instrumentationService.instrumentors.Instrumentor;
import com.cboe.interfaces.callback.TickerConsumer;

/**
 * Generated by Java Grinder
 * @author Java Grinder
 */
public class TickerConsumerInterceptor extends CallbackInterceptor implements TickerConsumer
{

    MethodInstrumentorExtension acceptTicker0;
    CMITickerConsumer cmiObject;

    /**
     * Create a new instance of ths interceptor for the provided BObject.
     * Create a cache of the instrumentors necessary for instrumentation.
     */
    public TickerConsumerInterceptor(CMITickerConsumer o)
    {
        this.cmiObject = o;
    }

    /**
     */
    public void startInstrumentation(String prefix, boolean privateOnly)
    {
        try
        {
            StringBuilder name = new StringBuilder(prefix.length()+Instrumentor.NAME_DELIMITER.length()+13);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptTicker0");
            acceptTicker0 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
        } catch (InstrumentorAlreadyCreatedException e)
        {
            Log.exception(e);
        }
    }

    /**
     *
     */
    public void removeInstrumentation()
    {
        if(acceptTicker0 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptTicker0.getName());
            acceptTicker0 = null;
        }
    }

    /**
     *
     */
    public void addQueueInstrumentorRelation(QueueInstrumentorExtension queueInstrumentorExtension)
    {
        if(acceptTicker0 != null)
        {
            acceptTicker0.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
    }

    /**
     */
    public void acceptTicker(com.cboe.idl.cmiMarketData.TickerStruct[] param0)
    {
        boolean exception = false;
        if (acceptTicker0 != null)
        {
            acceptTicker0.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptTicker(param0);
        }
        catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptTicker0 != null)
            {
                acceptTicker0.incCalls(1);
                acceptTicker0.afterMethodCall();
                if (exception)
                {
                    acceptTicker0.incExceptions(1);
                }
            }
        }
    }
}