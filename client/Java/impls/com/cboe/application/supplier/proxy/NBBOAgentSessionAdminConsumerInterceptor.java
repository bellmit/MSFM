package com.cboe.application.supplier.proxy;

import com.cboe.domain.instrumentorExtension.MethodInstrumentorExtension;
import com.cboe.domain.instrumentorExtension.MethodInstrumentorExtensionFactory;
import com.cboe.domain.instrumentorExtension.QueueInstrumentorExtension;
import com.cboe.domain.supplier.proxy.CallbackInterceptor;
import com.cboe.idl.cmiIntermarketCallback.CMINBBOAgentSessionAdmin;
import com.cboe.infrastructureServices.foundationFramework.utilities.Log;
import com.cboe.instrumentationService.factories.InstrumentorAlreadyCreatedException;
import com.cboe.instrumentationService.instrumentors.Instrumentor;
import com.cboe.interfaces.intermarketCallback.NBBOAgentSessionAdminConsumer;

/**
 * Generated by Java Grinder
 * @author Java Grinder
 */
public class NBBOAgentSessionAdminConsumerInterceptor extends CallbackInterceptor implements NBBOAgentSessionAdminConsumer
{


    MethodInstrumentorExtension acceptReminder1;

    MethodInstrumentorExtension acceptForcedOut0;

    MethodInstrumentorExtension acceptSatisfactionAlert2;

    MethodInstrumentorExtension acceptIntermarketAdminMessage3;

    MethodInstrumentorExtension acceptBroadcastIntermarketAdminMessage4;

    org.omg.CORBA.Object corbaObject;
    CMINBBOAgentSessionAdmin cmiObject;

    /**
     * Create a new instance of ths interceptor for the provided BObject.
     * Create a cache of the instrumentors necessary for instrumentation.
     */
    public NBBOAgentSessionAdminConsumerInterceptor(CMINBBOAgentSessionAdmin o)
    {
        this.cmiObject = o;
    }

    /**
     */
    public void startInstrumentation(String prefix, boolean privateOnly)
    {
        try
        {
            StringBuilder name = new StringBuilder(prefix.length()+Instrumentor.NAME_DELIMITER.length()+40);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptForcedOut0");
            acceptForcedOut0 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
            name.setLength(0);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptReminder1");
            acceptReminder1 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
            name.setLength(0);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptSatisfactionAlert2");
            acceptSatisfactionAlert2 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
            name.setLength(0);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptIntermarketAdminMessage3");
            acceptIntermarketAdminMessage3 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
            name.setLength(0);
            name.append(prefix).append(Instrumentor.NAME_DELIMITER).append("acceptBroadcastIntermarketAdminMessage4");
            acceptBroadcastIntermarketAdminMessage4 = MethodInstrumentorExtensionFactory.createMethodInstrumentor(name.toString(), null, privateOnly);
        } catch (InstrumentorAlreadyCreatedException e)
        {
            Log.exception(e);
        }
    }

    /**
     *
     */
    public void removeInstrumentation()
    {
        if (acceptForcedOut0 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptForcedOut0.getName());
        }
        acceptForcedOut0 = null;
        if (acceptReminder1 != null )
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptReminder1.getName());
        }
        acceptReminder1 = null;
        if (acceptSatisfactionAlert2 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptSatisfactionAlert2.getName());
        }
        acceptSatisfactionAlert2 = null;
        if (acceptIntermarketAdminMessage3 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptIntermarketAdminMessage3.getName());
        }
        acceptIntermarketAdminMessage3 = null;
        if (acceptBroadcastIntermarketAdminMessage4 != null)
        {
            MethodInstrumentorExtensionFactory.removeMethodInstrumentor(acceptBroadcastIntermarketAdminMessage4.getName());
        }
        acceptBroadcastIntermarketAdminMessage4 = null;
    }

    /**
     *
     */
    public void addQueueInstrumentorRelation(QueueInstrumentorExtension queueInstrumentorExtension)
    {
        if(acceptForcedOut0 != null)
        {
            acceptForcedOut0.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
        if(acceptReminder1 != null)
        {
            acceptReminder1.addQueueInstrumentorRelation(queueInstrumentorExtension);
        }
    }

    /**
     */
    public void acceptForcedOut(java.lang.String param0, int param1, java.lang.String param2)
    {
        boolean exception = false;
        if (acceptForcedOut0 != null)
        {
            acceptForcedOut0.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptForcedOut(param0, param1, param2);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptForcedOut0 != null)
            {
                acceptForcedOut0.incCalls(1);
                acceptForcedOut0.afterMethodCall();
                if (exception)
                {
                    acceptForcedOut0.incExceptions(1);
                }
            }
        }
    }

    /**
     */
    public void acceptReminder(com.cboe.idl.cmiIntermarketMessages.OrderReminderStruct param0, int param1, java.lang.String param2)
    {
        boolean exception = false;
        if (acceptReminder1 != null)
        {
            acceptReminder1.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptReminder(param0, param1, param2);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptReminder1 != null)
            {
                acceptReminder1.incCalls(1);
                acceptReminder1.afterMethodCall();
                if (exception)
                {
                    acceptReminder1.incExceptions(1);
                }
            }
        }
    }

    public void acceptSatisfactionAlert(com.cboe.idl.cmiIntermarketMessages.SatisfactionAlertStruct param0, int param1, java.lang.String param2)
    {
        boolean exception = false;
        if (acceptSatisfactionAlert2 != null)
        {
            acceptSatisfactionAlert2.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptSatisfactionAlert(param0, param1, param2);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptSatisfactionAlert2 != null)
            {
                acceptSatisfactionAlert2.incCalls(1);
                acceptSatisfactionAlert2.afterMethodCall();
                if (exception)
                {
                    acceptSatisfactionAlert2.incExceptions(1);
                }
            }
        }
    }

    public void acceptIntermarketAdminMessage(java.lang.String param0, java.lang.String param1, com.cboe.idl.cmiProduct.ProductKeysStruct param2, com.cboe.idl.cmiIntermarketMessages.AdminStruct param3)
    {
        boolean exception = false;
        if (acceptIntermarketAdminMessage3 != null)
        {
            acceptIntermarketAdminMessage3.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptIntermarketAdminMessage(param0, param1, param2, param3);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptIntermarketAdminMessage3 != null)
            {
                acceptIntermarketAdminMessage3.incCalls(1);
                acceptIntermarketAdminMessage3.afterMethodCall();
                if (exception)
                {
                    acceptIntermarketAdminMessage3.incExceptions(1);
                }
            }
        }
    }

    public void acceptBroadcastIntermarketAdminMessage(java.lang.String param0, java.lang.String param1, com.cboe.idl.cmiIntermarketMessages.AdminStruct param2)
    {
        boolean exception = false;
        if (acceptBroadcastIntermarketAdminMessage4 != null)
        {
            acceptBroadcastIntermarketAdminMessage4.beforeMethodCall();
        }
        try
        {
            cmiObject.acceptBroadcastIntermarketAdminMessage(param0, param1, param2);
        } catch (RuntimeException ex)
        {
            exception = true;
            throw ex;
        } finally
        {
            if (acceptBroadcastIntermarketAdminMessage4 != null)
            {
                acceptBroadcastIntermarketAdminMessage4.incCalls(1);
                acceptBroadcastIntermarketAdminMessage4.afterMethodCall();
                if (exception)
                {
                    acceptBroadcastIntermarketAdminMessage4.incExceptions(1);
                }
            }
        }
    }
}