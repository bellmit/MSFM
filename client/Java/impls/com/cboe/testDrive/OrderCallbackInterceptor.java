package com.cboe.testDrive;
import com.cboe.interfaces.callback.OrderStatusConsumer;
import com.cboe.infrastructureServices.instrumentationService.*;
import com.cboe.infrastructureServices.foundationFramework.*;
/**
* Generated by Java Grinder
* @author Java Grinder
*/
public class OrderCallbackInterceptor extends BOInterceptor implements OrderStatusConsumer
{


    Instrumentor acceptOrderStatus5;


    Instrumentor acceptOrderFilledReport4;


    Instrumentor acceptOrderCanceledReport3;


    Instrumentor acceptOrderBustReport2;


    Instrumentor acceptOrderBustReinstateReport1;
    

    Instrumentor acceptNewOrder0;
    OrderStatusConsumer bObjectImpl = (OrderStatusConsumer)getBObject();
    /**
     * Create a new instance of ths interceptor for the provided BObject.
     * Create a cache of the instrumentors necessary for instrumentation.
     */
    public OrderCallbackInterceptor(BObject bo)
    {
        super(bo);
        String className = bo.getClass().getName();
        acceptNewOrder0 = createInstrumentor("acceptNewOrder0", className +"::acceptNewOrder(Lcom.cboe.idl.cmiOrder.OrderDetailStruct;)V");
        acceptOrderBustReinstateReport1 = createInstrumentor("acceptOrderBustReinstateReport1", className +"::acceptOrderBustReinstateReport(Lcom.cboe.idl.cmiOrder.OrderBustReinstateReportStruct;)V");
        acceptOrderBustReport2 = createInstrumentor("acceptOrderBustReport2", className +"::acceptOrderBustReport(Lcom.cboe.idl.cmiOrder.OrderBustReportStruct;)V");
        acceptOrderCanceledReport3 = createInstrumentor("acceptOrderCanceledReport3", className +"::acceptOrderCanceledReport(Lcom.cboe.idl.cmiOrder.OrderCancelReportStruct;)V");
        acceptOrderFilledReport4 = createInstrumentor("acceptOrderFilledReport4", className +"::acceptOrderFilledReport(Lcom.cboe.idl.cmiOrder.OrderFilledReportStruct;)V");
        acceptOrderStatus5 = createInstrumentor("acceptOrderStatus5", className +"::acceptOrderStatus(Lcom.cboe.idl.cmiOrder.OrderDetailStruct;)V");
    }
    /**
     */
    public void acceptNewOrder( com.cboe.idl.cmiOrder.OrderDetailStruct param0)
    {
        long time = 0;
        boolean exception = false;
        String methodID = "acceptNewOrder0";
        Instrumentor in = acceptNewOrder0;
        try
        {
            time = System.currentTimeMillis();
            preProcess(in);
            bObjectImpl.acceptNewOrder(param0);
        }
        catch(RuntimeException ex)
        {
            in.incError(ex);
            systemLog(ex, methodID);
            exception = true;
            throw ex;
        }
        finally
        {
            postProcess(time, methodID, acceptNewOrder0, exception);
        }
    }
    /**
     */
    public void acceptOrderBustReinstateReport( com.cboe.idl.cmiOrder.OrderBustReinstateReportStruct param0)
    {
        long time = 0;
        boolean exception = false;
        String methodID = "acceptOrderBustReinstateReport1";
        Instrumentor in = acceptOrderBustReinstateReport1;
        try
        {
            time = System.currentTimeMillis();
            preProcess(in);
            bObjectImpl.acceptOrderBustReinstateReport(param0);
        }
        catch(RuntimeException ex)
        {
            in.incError(ex);
            systemLog(ex, methodID);
            exception = true;
            throw ex;
        }
        finally
        {
            postProcess(time, methodID, acceptOrderBustReinstateReport1, exception);
        }
    }
    /**
     */
    public void acceptOrderBustReport( com.cboe.idl.cmiOrder.OrderBustReportStruct param0)
    {
        long time = 0;
        boolean exception = false;
        String methodID = "acceptOrderBustReport2";
        Instrumentor in = acceptOrderBustReport2;
        try
        {
            time = System.currentTimeMillis();
            preProcess(in);
            bObjectImpl.acceptOrderBustReport(param0);
        }
        catch(RuntimeException ex)
        {
            in.incError(ex);
            systemLog(ex, methodID);
            exception = true;
            throw ex;
        }
        finally
        {
            postProcess(time, methodID, acceptOrderBustReport2, exception);
        }
    }
    /**
     */
    public void acceptOrderCanceledReport( com.cboe.idl.cmiOrder.OrderCancelReportStruct param0)
    {
        long time = 0;
        boolean exception = false;
        String methodID = "acceptOrderCanceledReport3";
        Instrumentor in = acceptOrderCanceledReport3;
        try
        {
            time = System.currentTimeMillis();
            preProcess(in);
            bObjectImpl.acceptOrderCanceledReport(param0);
        }
        catch(RuntimeException ex)
        {
            in.incError(ex);
            systemLog(ex, methodID);
            exception = true;
            throw ex;
        }
        finally
        {
            postProcess(time, methodID, acceptOrderCanceledReport3, exception);
        }
    }
    /**
     */
    public void acceptOrderFilledReport( com.cboe.idl.cmiOrder.OrderFilledReportStruct param0)
    {
        long time = 0;
        boolean exception = false;
        String methodID = "acceptOrderFilledReport4";
        Instrumentor in = acceptOrderFilledReport4;
        try
        {
            time = System.currentTimeMillis();
            preProcess(in);
            bObjectImpl.acceptOrderFilledReport(param0);
        }
        catch(RuntimeException ex)
        {
            in.incError(ex);
            systemLog(ex, methodID);
            exception = true;
            throw ex;
        }
        finally
        {
            postProcess(time, methodID, acceptOrderFilledReport4, exception);
        }
    }
    /**
     */
    public void acceptOrderStatus( com.cboe.idl.cmiOrder.OrderDetailStruct [] param0)
    {
        long time = 0;
        boolean exception = false;
        String methodID = "acceptOrderStatus5";
        Instrumentor in = acceptOrderStatus5;
        try
        {
            time = System.currentTimeMillis();
            preProcess(in);
            bObjectImpl.acceptOrderStatus(param0);
        }
        catch(RuntimeException ex)
        {
            in.incError(ex);
            systemLog(ex, methodID);
            exception = true;
            throw ex;
        }
        finally
        {
            postProcess(time, methodID, acceptOrderStatus5, exception);
        }
    }
}