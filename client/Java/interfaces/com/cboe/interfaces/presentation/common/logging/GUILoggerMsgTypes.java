//
// -----------------------------------------------------------------------------------
// Source file: GUILoggerMsgTypes.java
//
// PACKAGE: com.cboe.interfaces.presentation.common.logging;
//
// -----------------------------------------------------------------------------------
// Copyright (c) 2001-2007 The Chicago Board Options Exchange. All Rights Reserved.
// -----------------------------------------------------------------------------------
package com.cboe.interfaces.presentation.common.logging;

@SuppressWarnings({"PointlessArithmeticExpression"})
public interface GUILoggerMsgTypes
{
    int LOG_MIN = 0;

    // Log message severity types
    int LOG_SEVERITY_MIN = LOG_MIN;

    int LOG_ALARM = LOG_SEVERITY_MIN;
    int LOG_AUDIT = LOG_ALARM + 1;
    int LOG_DEBUG = LOG_AUDIT + 1;
    int LOG_EXCEPTION = LOG_DEBUG + 1;
    int LOG_INFORMATION = LOG_EXCEPTION + 1;

    int LOG_SEVERITY_MAX = LOG_INFORMATION;

    // Log Message Business Types
    // Trader and common
    int LOG_BUSINESS_MIN = LOG_SEVERITY_MAX + 1;
    int LOG_TRADER_BUSINESS_MIN = LOG_BUSINESS_MIN;

    int LOG_COMMON = LOG_TRADER_BUSINESS_MIN;
    int LOG_WINDOW_MANAGEMENT = LOG_COMMON + 1;
    int LOG_TEXT_MESSAGE = LOG_WINDOW_MANAGEMENT + 1;
    int LOG_USER_SESSION = LOG_TEXT_MESSAGE + 1;
    int LOG_USER_MANAGEMENT = LOG_USER_SESSION + 1;
    int LOG_MARKET_QUERY = LOG_USER_MANAGEMENT + 1;
    int LOG_ORDER_ENTRY = LOG_MARKET_QUERY + 1;
    int LOG_ORDER_QUERY = LOG_ORDER_ENTRY + 1;
    int LOG_ORDER_BOOK = LOG_ORDER_QUERY + 1;
    int LOG_PRODUCT_DEFINITION = LOG_ORDER_BOOK + 1;
    int LOG_PRODUCT_QUERY = LOG_PRODUCT_DEFINITION + 1;
    int LOG_QUOTE = LOG_PRODUCT_QUERY + 1;
    int LOG_RFQ = LOG_QUOTE + 1;
    int LOG_AUCTION = LOG_RFQ + 1;
    int LOG_TRADING_SESSION = LOG_AUCTION + 1;
    int LOG_USER_HISTORY = LOG_TRADING_SESSION + 1;
    int LOG_USER_PREFERENCES = LOG_USER_HISTORY + 1;
    int LOG_QRM = LOG_USER_PREFERENCES + 1;
    int LOG_PRODUCT_SELECTOR = LOG_QRM + 1;
    int LOG_TICKER = LOG_PRODUCT_SELECTOR + 1;
    int LOG_PREFERENCE_CONVERSION = LOG_TICKER + 1;
    int LOG_INTERMARKET_HELD_ORDER_ENTRY = LOG_PREFERENCE_CONVERSION + 1;
    int LOG_INTERMARKET_HELD_ORDER_QUERY = LOG_INTERMARKET_HELD_ORDER_ENTRY + 1;
    int LOG_INTERMARKET_NBBO_AGENT = LOG_INTERMARKET_HELD_ORDER_QUERY + 1;
    int LOG_REPORT_GENERATION = LOG_INTERMARKET_NBBO_AGENT + 1;
    int LOG_DATABASE_QUERY_BUILDER = LOG_REPORT_GENERATION + 1;
    int LOG_PERMISSION_MATRIX = LOG_DATABASE_QUERY_BUILDER + 1;
    int LOG_MANUAL_REPORTING = LOG_PERMISSION_MATRIX + 1;
    int LOG_OMT = LOG_PERMISSION_MATRIX + 1;
    int LOG_STRATEGY_DSM = LOG_OMT + 1;

    // int LOG_TRADER_BUSINESS_MAX = LOG_MANUAL_REPORTING;
    int LOG_TRADER_BUSINESS_MAX = LOG_STRATEGY_DSM;

    int LOG_SA_BUSINESS_MIN = LOG_TRADER_BUSINESS_MAX + 1;
 

    // Log Message Business Types
    // SA only
    int LOG_PRODUCT_MAINTENANCE = LOG_SA_BUSINESS_MIN;
    int LOG_TRADE_MAINTENANCE = LOG_PRODUCT_MAINTENANCE + 1;
    int LOG_FIRM_MAINTENANCE = LOG_TRADE_MAINTENANCE + 1;
    int LOG_SESSION_MANAGEMENT = LOG_FIRM_MAINTENANCE + 1;
    int LOG_SECURITY_ADMIN = LOG_SESSION_MANAGEMENT + 1;
    int LOG_TRADING_PROPERTY = LOG_SECURITY_ADMIN + 1;
    int LOG_ORDER_HANDLING = LOG_TRADING_PROPERTY + 1;
    int LOG_MM_QUOTE = LOG_ORDER_HANDLING + 1;
    int LOG_TRADE_QUERY = LOG_MM_QUOTE + 1;
    int LOG_PRODUCT_GROUPS = LOG_TRADE_QUERY + 1;
    int LOG_PROPERTY_SERVICE = LOG_PRODUCT_GROUPS + 1;
    int LOG_CALENDAR_ADMIN = LOG_PROPERTY_SERVICE + 1;
    int LOG_AGENT_QUERY = LOG_CALENDAR_ADMIN + 1;
    int LOG_ALERTS = LOG_AGENT_QUERY + 1;
    int LOG_ROUTING_PROPERTY = LOG_ALERTS + 1;

    int LOG_SA_BUSINESS_MAX = LOG_ROUTING_PROPERTY;


    int LOG_INSTRUMENTATION_MIN = LOG_SA_BUSINESS_MAX;

    int LOG_INSTRUMENTATION = LOG_INSTRUMENTATION_MIN + 1;
    int LOG_CONTEXT_DETAIL = LOG_INSTRUMENTATION + 1;
    int LOG_CAS_SUMMARY = LOG_CONTEXT_DETAIL + 1;
    int LOG_CAS_CONFIGURATION = LOG_CAS_SUMMARY + 1;
    int LOG_QUEUE_INSTRUMENTOR = LOG_CAS_CONFIGURATION + 1;
    int LOG_THREAD_INSTRUMENTOR = LOG_QUEUE_INSTRUMENTOR + 1;
    int LOG_METHOD_INSTRUMENTOR = LOG_THREAD_INSTRUMENTOR + 1;
    int LOG_COUNT_INSTRUMENTOR = LOG_METHOD_INSTRUMENTOR + 1;
    int LOG_EVENT_INSTRUMENTOR = LOG_COUNT_INSTRUMENTOR + 1;
    int LOG_HEAP_INSTRUMENTOR = LOG_EVENT_INSTRUMENTOR + 1;
    int LOG_NETWORK_INSTRUMENTOR = LOG_HEAP_INSTRUMENTOR + 1;
    int LOG_JMX_INSTRUMENTOR = LOG_NETWORK_INSTRUMENTOR + 1;
    int LOG_JSTAT_INSTRUMENTOR = LOG_JMX_INSTRUMENTOR + 1;
    int LOG_PROCESSES = LOG_JSTAT_INSTRUMENTOR + 1;
    int LOG_ALARM_CONDITION = LOG_PROCESSES + 1;
    int LOG_ALARM_CALCULATION = LOG_ALARM_CONDITION + 1;
    int LOG_ALARM_DEFINITION = LOG_ALARM_CALCULATION + 1;
    int LOG_ALARM_ACTIVATION = LOG_ALARM_DEFINITION + 1;
    int LOG_ALARM_WATCHDOG = LOG_ALARM_ACTIVATION + 1;
    int LOG_ALARM_NOTIFICATION = LOG_ALARM_WATCHDOG + 1;
    int LOG_ALARM_EXCEPTIONS = LOG_ALARM_NOTIFICATION + 1;
    int LOG_XTP = LOG_ALARM_EXCEPTIONS + 1;
    int LOG_ORB_NAME_ALIAS = LOG_XTP + 1;
    int LOG_ALARM_ASSIGNMENT = LOG_ORB_NAME_ALIAS + 1;
    int LOG_LOGICAL_ORB_NAME = LOG_ALARM_ASSIGNMENT + 1;
    int LOG_GROUPS = LOG_LOGICAL_ORB_NAME + 1;

    int LOG_INSTRUMENTATION_MAX = LOG_GROUPS;

    // Message Monitor
    int LOG_MESSAGEMON_MIN = LOG_INSTRUMENTATION_MAX;

    int LOG_MESSAGEMON      = LOG_MESSAGEMON_MIN + 1;
    int LOG_SUBJECTS        = LOG_MESSAGEMON + 1;
    int LOG_CHANNELS        = LOG_SUBJECTS + 1;
    int LOG_RECORDING       = LOG_CHANNELS + 1;
    int LOG_PROCESS_WATCHER = LOG_RECORDING + 1;
    int LOG_EXTENT_MAP      = LOG_PROCESS_WATCHER + 1;
    int LOG_MONITOR         = LOG_EXTENT_MAP + 1;
    int LOG_SNIFFER         = LOG_MONITOR + 1;

    int LOG_MESSAGEMON_MAX = LOG_SNIFFER;

    int LOG_BUSINESS_MAX = LOG_MESSAGEMON_MAX;

    // Verbose level
    int LOG_VERBOSE_LEVEL_MIN = LOG_BUSINESS_MAX + 1;
    int LOG_EXCEPTION_VERBOSE_LEVEL = LOG_VERBOSE_LEVEL_MIN;
    int LOG_DEBUG_VERBOSE_LEVEL = LOG_EXCEPTION_VERBOSE_LEVEL + 1;
    int LOG_VERBOSE_LEVEL_MAX = LOG_DEBUG_VERBOSE_LEVEL;

    // Overall max
    int LOG_MAX = LOG_VERBOSE_LEVEL_MAX;
}
