package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixTradSesMethodField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [338] (known as TradSesMethod).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixTradSesMethodField implements FixFieldIF, HasIntValueIF
{   
    public static final int    TagID         =  338;
    public static final String TagIDAsString = "338";
    public static final char[] TagIDAsChars  = {'3','3','8'};
    public static final String TagName       = "TradSesMethod";
    public static final String TagFixType    = "INT";
    public static final char[]  taggedchars_value0 = {'3','3','8', EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {'3','3','8', EQUALSchar, ONEchar,  SOHchar};

    public static final int     Electronic              = 1;
    public static final String  string_Electronic       = "1";
    public static final String  tagged_Electronic       = TagIDAsString + EQUALS + string_Electronic + SOH;
    public static final char[]  taggedchars_Electronic  = {'3','3','8', EQUALSchar, '1', SOHchar};
    public static final String  text_Electronic         = "Electronic";
    public static final int     OpenOutcry              = 2;
    public static final String  string_OpenOutcry       = "2";
    public static final String  tagged_OpenOutcry       = TagIDAsString + EQUALS + string_OpenOutcry + SOH;
    public static final char[]  taggedchars_OpenOutcry  = {'3','3','8', EQUALSchar, '2', SOHchar};
    public static final String  text_OpenOutcry         = "OpenOutcry";
    public static final int     TwoParty                = 3;
    public static final String  string_TwoParty         = "3";
    public static final String  tagged_TwoParty         = TagIDAsString + EQUALS + string_TwoParty + SOH;
    public static final char[]  taggedchars_TwoParty    = {'3','3','8', EQUALSchar, '3', SOHchar};
    public static final String  text_TwoParty           = "TwoParty";

    private static FixTradSesMethodField flyweightElectronic;
    public static final FixTradSesMethodField flyweightElectronic()
    {
        if (flyweightElectronic == null)
        {
            synchronized(FixTradSesMethodField.class)
            {
                if (flyweightElectronic == null)
                {
                    flyweightElectronic  = new FixTradSesMethodField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Electronic;}
                     public String  getValueDescription()             {return text_Electronic;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Electronic).append("|").append(text_Electronic).append("]").toString();}
                     public boolean isElectronic()                    {return true;}
                     public int     intValue()                        {return Electronic;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Electronic);}
                    };
                }
            }
        }

        return flyweightElectronic;
    }

    private static FixTradSesMethodField flyweightOpenOutcry;
    public static final FixTradSesMethodField flyweightOpenOutcry()
    {
        if (flyweightOpenOutcry == null)
        {
            synchronized(FixTradSesMethodField.class)
            {
                if (flyweightOpenOutcry == null)
                {
                    flyweightOpenOutcry  = new FixTradSesMethodField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_OpenOutcry;}
                     public String  getValueDescription()             {return text_OpenOutcry;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OpenOutcry).append("|").append(text_OpenOutcry).append("]").toString();}
                     public boolean isOpenOutcry()                    {return true;}
                     public int     intValue()                        {return OpenOutcry;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OpenOutcry);}
                    };
                }
            }
        }

        return flyweightOpenOutcry;
    }

    private static FixTradSesMethodField flyweightTwoParty;
    public static final FixTradSesMethodField flyweightTwoParty()
    {
        if (flyweightTwoParty == null)
        {
            synchronized(FixTradSesMethodField.class)
            {
                if (flyweightTwoParty == null)
                {
                    flyweightTwoParty  = new FixTradSesMethodField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_TwoParty;}
                     public String  getValueDescription()             {return text_TwoParty;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_TwoParty).append("|").append(text_TwoParty).append("]").toString();}
                     public boolean isTwoParty()                      {return true;}
                     public int     intValue()                        {return TwoParty;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_TwoParty);}
                    };
                }
            }
        }

        return flyweightTwoParty;
    }


    public boolean isElectronic()   {return false;}
    public boolean isOpenOutcry()   {return false;}
    public boolean isTwoParty()     {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixTradSesMethodField create(char[] array, int offset, int length)
    {
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static FixTradSesMethodField create(final int param)
    {
        switch (param)
        {                                                                                           
            case Electronic: return flyweightElectronic();
            case OpenOutcry: return flyweightOpenOutcry();
            case TwoParty:   return flyweightTwoParty();
        }
                                                                                                    
        return null;
    }                                                                                               
}
