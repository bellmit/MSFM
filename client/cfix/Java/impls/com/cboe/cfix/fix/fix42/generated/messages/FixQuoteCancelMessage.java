package com.cboe.cfix.fix.fix42.generated.messages;

/**
 * FixQuoteCancelMessage.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's QuoteCancel Message.
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import java.util.*;

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.cfix.fix.fix42.field.*;
import com.cboe.cfix.fix.fix42.generated.fields.*;
import com.cboe.cfix.fix.fix42.generated.helpers.*;
import com.cboe.cfix.fix.util.*;
import com.cboe.client.util.*;
import com.cboe.infrastructureServices.foundationFramework.utilities.*;

public class FixQuoteCancelMessage extends FixMessage
{   
    public static final String MsgType        = "Z";
    public static final char   MsgTypeAsChar  = 'Z';
    public static final char[] MsgTypeAsChars = {'Z'};
    public static final String MsgTypeName    = "QuoteCancel";

    public FixQuoteReqIDField            fieldQuoteReqID;
    public FixQuoteIDField               fieldQuoteID;
    public FixQuoteCancelTypeField       fieldQuoteCancelType;
    public FixQuoteResponseLevelField    fieldQuoteResponseLevel;
    public FixTradingSessionIDField      fieldTradingSessionID;
    public FixNoQuoteEntriesField        fieldNoQuoteEntries;
    public QuoteEntriesGroup[]           groupQuoteEntries;
    public List                          additionalUserFields;

    public static class QuoteEntriesGroup implements PrettyPrintWriterVisitorIF
    {   
        public FixSymbolField                fieldSymbol;
        public FixSymbolSfxField             fieldSymbolSfx;
        public FixSecurityIDField            fieldSecurityID;
        public FixIDSourceField              fieldIDSource;
        public FixSecurityTypeField          fieldSecurityType;
        public FixMaturityMonthYearField     fieldMaturityMonthYear;
        public FixMaturityDayField           fieldMaturityDay;
        public FixPutOrCallField             fieldPutOrCall;
        public FixStrikePriceField           fieldStrikePrice;
        public FixOptAttributeField          fieldOptAttribute;
        public FixContractMultiplierField    fieldContractMultiplier;
        public FixCouponRateField            fieldCouponRate;
        public FixSecurityExchangeField      fieldSecurityExchange;
        public FixIssuerField                fieldIssuer;
        //     FixEncodedIssuerLenField      fieldEncodedIssuerLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        //     FixEncodedIssuerField         fieldEncodedIssuer;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        public FixSecurityDescField          fieldSecurityDesc;
        //     FixEncodedSecurityDescLenField fieldEncodedSecurityDescLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        //     FixEncodedSecurityDescField   fieldEncodedSecurityDesc;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        public FixUnderlyingSymbolField      fieldUnderlyingSymbol;

        public String toString()
        {
            PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

            accept(prettyPrintWriter);

            return prettyPrintWriter.toString();
        }

        public void accept(PrettyPrintWriterIF prettyPrintWriter)
        {
            prettyPrintWriter.startPrintingGroup("QuoteEntriesGroup");  
            prettyPrintWriter.printGroupItem(fieldSymbol);
            prettyPrintWriter.printGroupItem(fieldSymbolSfx);
            prettyPrintWriter.printGroupItem(fieldSecurityID);
            prettyPrintWriter.printGroupItem(fieldIDSource);
            prettyPrintWriter.printGroupItem(fieldSecurityType);
            prettyPrintWriter.printGroupItem(fieldMaturityMonthYear);
            prettyPrintWriter.printGroupItem(fieldMaturityDay);
            prettyPrintWriter.printGroupItem(fieldPutOrCall);
            prettyPrintWriter.printGroupItem(fieldStrikePrice);
            prettyPrintWriter.printGroupItem(fieldOptAttribute);
            prettyPrintWriter.printGroupItem(fieldContractMultiplier);
            prettyPrintWriter.printGroupItem(fieldCouponRate);
            prettyPrintWriter.printGroupItem(fieldSecurityExchange);
            prettyPrintWriter.printGroupItem(fieldIssuer);
            prettyPrintWriter.printGroupItem(fieldSecurityDesc);
            prettyPrintWriter.printGroupItem(fieldUnderlyingSymbol);

            prettyPrintWriter.endPrintingGroup();
        }                                                                                                 

        public void accept(FixMessageBuilderIF fixMessageBuilder)
        {                                                                                             
            fixMessageBuilder.append(fieldSymbol);
            fixMessageBuilder.append(fieldSymbolSfx);
            fixMessageBuilder.append(fieldSecurityID);
            fixMessageBuilder.append(fieldIDSource);
            fixMessageBuilder.append(fieldSecurityType);
            fixMessageBuilder.append(fieldMaturityMonthYear);
            fixMessageBuilder.append(fieldMaturityDay);
            fixMessageBuilder.append(fieldPutOrCall);
            fixMessageBuilder.append(fieldStrikePrice);
            fixMessageBuilder.append(fieldOptAttribute);
            fixMessageBuilder.append(fieldContractMultiplier);
            fixMessageBuilder.append(fieldCouponRate);
            fixMessageBuilder.append(fieldSecurityExchange);
            fixMessageBuilder.append(fieldIssuer);
            fixMessageBuilder.append(fieldSecurityDesc);
            fixMessageBuilder.append(fieldUnderlyingSymbol);
        }                                                                                                 
    }

    public FixQuoteCancelMessage()
    {

    }

    public boolean isFixQuoteCancelMessage() {return true;}
    public String getMsgType()        {return MsgType;}
    public char   getMsgTypeAsChar()  {return MsgTypeAsChar;}
    public char[] getMsgTypeAsChars() {return MsgTypeAsChars;}
    public String getMsgTypeName()    {return MsgTypeName;}
    
    public String toString()
    {
        PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

        accept(prettyPrintWriter);

        return prettyPrintWriter.toString();
    }

    public void accept(PrettyPrintWriterIF prettyPrintWriter)
    {
        prettyPrintWriter.startPrintingGroup(MsgTypeName);

        super.accept(prettyPrintWriter);
                                                                                                      
        prettyPrintWriter.printGroupItem(fieldQuoteReqID);
        prettyPrintWriter.printGroupItem(fieldQuoteID);
        prettyPrintWriter.printGroupItem(fieldQuoteCancelType);
        prettyPrintWriter.printGroupItem(fieldQuoteResponseLevel);
        prettyPrintWriter.printGroupItem(fieldTradingSessionID);
        prettyPrintWriter.printGroupItem(fieldNoQuoteEntries);
        if (groupQuoteEntries != null)
        {
            for (int i = 0; i < groupQuoteEntries.length; i++)
            {
                if (groupQuoteEntries[i] != null) groupQuoteEntries[i].accept(prettyPrintWriter);
            }
        }                                                                                             

        prettyPrintWriter.endPrintingGroup();
    }                                                                                                 

    public void accept(FixMessageBuilderIF fixMessageBuilder)
    {
        super.accept(fixMessageBuilder);
                                                                                                      
        fixMessageBuilder.append(fieldQuoteReqID);
        fixMessageBuilder.append(fieldQuoteID);
        fixMessageBuilder.append(fieldQuoteCancelType);
        fixMessageBuilder.append(fieldQuoteResponseLevel);
        fixMessageBuilder.append(fieldTradingSessionID);
        fixMessageBuilder.append(fieldNoQuoteEntries);
        if (groupQuoteEntries != null)
        {
            for (int i = 0; i < groupQuoteEntries.length; i++)
            {
                if (groupQuoteEntries[i] != null) groupQuoteEntries[i].accept(fixMessageBuilder);
            }
        }                                                                                             

        if (additionalUserFields != null)
        {
            for (Iterator iterator = additionalUserFields.iterator(); iterator.hasNext(); )
            {
                fixMessageBuilder.append((FixFieldIF) iterator.next());
            }
        }
    }                                                                                                 

    public PackedIntArrayIF validate(FixPacketIF fixPacket, PackedIntArrayIF foundErrors, int validationFlags, int debugFlags)
    {
        if (fieldSenderCompID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSenderCompIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldTargetCompID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixTargetCompIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldMsgSeqNum == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixMsgSeqNumField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldSendingTime == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSendingTimeField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldQuoteID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixQuoteIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldQuoteCancelType == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixQuoteCancelTypeField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldNoQuoteEntries == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixNoQuoteEntriesField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        for (int i = 0; i < groupQuoteEntries.length; i++)
        {
            if (groupQuoteEntries[i].fieldSymbol == null)
            {
                foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSymbolField.TagID));
                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                {
                    return foundErrors;
                }
            }
    
        }
               
        return foundErrors;
    }

    private static final int STATE_QuoteEntriesGroup = 2;

    private String toStateString(int state)
    {
        switch (state)
        {
            case STATE_Header: return "State[Header]";
            case STATE_Field:  return "State[Field]";
            case STATE_QuoteEntriesGroup: return "State[QuoteEntriesGroup]";
        }

        return "???";
    }
    
    public PackedIntArrayIF build(FixPacketIF fixPacket, PackedIntArrayIF foundErrors, int validationFlags, int debugFlags)
    {
        char[] array          = fixPacket.getArray();
        int    numTags        = fixPacket.getTagPositionLength();
        int    currentState   = STATE_Header;
        int    tag;
        int    offset;
        int    length;
        int    numInGroup;
        int    group;
        int    currentPosition;
        int    current_groupQuoteEntries = -1; // this group has a starting field which we have to find first

        for (currentPosition = 0; currentPosition < numTags; currentPosition++)
        {
            if (!foundErrors.isEmpty() && BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                break;
            }

            tag    = fixPacket.getTag(currentPosition);
            offset = fixPacket.getValueOffset(currentPosition);
            length = fixPacket.getValueLength(currentPosition);

            if ((BitHelper.isBitMaskSet(debugFlags, FixSessionDebugIF.MESSAGE_SHOW_BUILD_TRANSITIONS)))
            {
                String threadName = Thread.currentThread().getName();
                String stateString = toStateString(currentState);
                StringBuilder sb = new StringBuilder(threadName.length()+stateString.length()+50);
                if (currentPosition > 0)
                {
                    sb.append(threadName).append(" --> ").append(stateString);
                    Log.information(sb.toString());
                    sb.setLength(0);
                }

                sb.append(threadName).append("Tag[").append(currentPosition).append("] = ").append(FixFieldHelper.getTagName(tag)).append("(").append(tag).append(") ").append(stateString);
                Log.information(sb.toString());
            }

            switch (tag)
            {
                case FixQuoteReqIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldQuoteReqID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldQuoteReqID = FixQuoteReqIDField.create(array, offset, length);
                    if (fieldQuoteReqID == null || !fieldQuoteReqID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixQuoteIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldQuoteID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldQuoteID = FixQuoteIDField.create(array, offset, length);
                    if (fieldQuoteID == null || !fieldQuoteID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixQuoteCancelTypeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldQuoteCancelType != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldQuoteCancelType = FixQuoteCancelTypeField.create(array, offset, length);
                    if (fieldQuoteCancelType == null || !fieldQuoteCancelType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixQuoteResponseLevelField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldQuoteResponseLevel != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldQuoteResponseLevel = FixQuoteResponseLevelField.create(array, offset, length);
                    if (fieldQuoteResponseLevel == null || !fieldQuoteResponseLevel.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixTradingSessionIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldTradingSessionID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldTradingSessionID = FixTradingSessionIDField.create(array, offset, length);
                    if (fieldTradingSessionID == null || !fieldTradingSessionID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixNoQuoteEntriesField.TagID:
                {
                    if (fieldNoQuoteEntries != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldNoQuoteEntries = FixNoQuoteEntriesField.create(array, offset, length);
                    if (fieldNoQuoteEntries == null || !fieldNoQuoteEntries.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    currentState = STATE_QuoteEntriesGroup;

                    numInGroup = fieldNoQuoteEntries.intValue();

                    groupQuoteEntries = new QuoteEntriesGroup[numInGroup];
                    for (group = 0; group < numInGroup; group++)
                    {
                        groupQuoteEntries[group] = new QuoteEntriesGroup();
                    }

                    continue;
                }
                case FixSymbolField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    current_groupQuoteEntries++;

                    currentState = STATE_QuoteEntriesGroup;

                    if (current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldSymbol != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldSymbol = FixSymbolField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldSymbol == null || !groupQuoteEntries[current_groupQuoteEntries].fieldSymbol.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSymbolSfxField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldSymbolSfx != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldSymbolSfx = FixSymbolSfxField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldSymbolSfx == null || !groupQuoteEntries[current_groupQuoteEntries].fieldSymbolSfx.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSecurityIDField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldSecurityID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldSecurityID = FixSecurityIDField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldSecurityID == null || !groupQuoteEntries[current_groupQuoteEntries].fieldSecurityID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixIDSourceField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldIDSource != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldIDSource = FixIDSourceField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldIDSource == null || !groupQuoteEntries[current_groupQuoteEntries].fieldIDSource.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSecurityTypeField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldSecurityType != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldSecurityType = FixSecurityTypeField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldSecurityType == null || !groupQuoteEntries[current_groupQuoteEntries].fieldSecurityType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixMaturityMonthYearField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldMaturityMonthYear != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldMaturityMonthYear = FixMaturityMonthYearField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldMaturityMonthYear == null || !groupQuoteEntries[current_groupQuoteEntries].fieldMaturityMonthYear.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixMaturityDayField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldMaturityDay != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldMaturityDay = FixMaturityDayField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldMaturityDay == null || !groupQuoteEntries[current_groupQuoteEntries].fieldMaturityDay.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixPutOrCallField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldPutOrCall != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldPutOrCall = FixPutOrCallField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldPutOrCall == null || !groupQuoteEntries[current_groupQuoteEntries].fieldPutOrCall.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixStrikePriceField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldStrikePrice != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldStrikePrice = FixStrikePriceField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldStrikePrice == null || !groupQuoteEntries[current_groupQuoteEntries].fieldStrikePrice.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixOptAttributeField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldOptAttribute != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldOptAttribute = FixOptAttributeField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldOptAttribute == null || !groupQuoteEntries[current_groupQuoteEntries].fieldOptAttribute.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixContractMultiplierField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldContractMultiplier != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldContractMultiplier = FixContractMultiplierField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldContractMultiplier == null || !groupQuoteEntries[current_groupQuoteEntries].fieldContractMultiplier.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixCouponRateField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldCouponRate != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldCouponRate = FixCouponRateField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldCouponRate == null || !groupQuoteEntries[current_groupQuoteEntries].fieldCouponRate.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSecurityExchangeField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldSecurityExchange != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldSecurityExchange = FixSecurityExchangeField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldSecurityExchange == null || !groupQuoteEntries[current_groupQuoteEntries].fieldSecurityExchange.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixIssuerField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldIssuer != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldIssuer = FixIssuerField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldIssuer == null || !groupQuoteEntries[current_groupQuoteEntries].fieldIssuer.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixEncodedIssuerLenField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedIssuerLenField unusedByCboeField = FixEncodedIssuerLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixEncodedIssuerField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedIssuerField unusedByCboeField = FixEncodedIssuerField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixSecurityDescField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldSecurityDesc != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldSecurityDesc = FixSecurityDescField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldSecurityDesc == null || !groupQuoteEntries[current_groupQuoteEntries].fieldSecurityDesc.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixEncodedSecurityDescLenField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedSecurityDescLenField unusedByCboeField = FixEncodedSecurityDescLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixEncodedSecurityDescField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedSecurityDescField unusedByCboeField = FixEncodedSecurityDescField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixUnderlyingSymbolField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteEntries < 0 || current_groupQuoteEntries >= groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteEntries[current_groupQuoteEntries].fieldUnderlyingSymbol != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteEntries[current_groupQuoteEntries].fieldUnderlyingSymbol = FixUnderlyingSymbolField.create(array, offset, length);
                    if (groupQuoteEntries[current_groupQuoteEntries].fieldUnderlyingSymbol == null || !groupQuoteEntries[current_groupQuoteEntries].fieldUnderlyingSymbol.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
            }

            if (tag >= FixMessageIF.USER_DEFINED_TAGS_START)
            {
                if (currentState == STATE_Field || currentState == STATE_Header)
                {
                    if (additionalUserFields == null)
                    {
                        additionalUserFields = new ArrayList();
                    }

                    additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                    continue;
                }

                if (currentState == STATE_QuoteEntriesGroup)
                {
                    if (current_groupQuoteEntries == groupQuoteEntries.length - 1)
                    {
                        if (additionalUserFields == null)
                        {
                            additionalUserFields = new ArrayList();
                        }

                        additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                        continue;
                    }

                    foundErrors.add(BitHelper.packInt(FixException.UNEXPECTED_USER_DEFINED_TAG_WITHIN_GROUP, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return foundErrors;
                    }
                    continue;
                }
            }

            if (!buildHeaderTrailer(array, tag, offset, length, currentState, currentPosition, foundErrors, validationFlags, debugFlags))
            {
                foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG, currentPosition));

                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                {
                    return foundErrors;
                }

                continue;
            }
        }

        if (groupQuoteEntries != null && current_groupQuoteEntries != groupQuoteEntries.length - 1)
        {
            foundErrors.add(BitHelper.packInt(FixException.FEWER_GROUPS_THAN_SPECIFIED, currentPosition));

            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        if ((BitHelper.isBitMaskSet(debugFlags, FixSessionDebugIF.MESSAGE_SHOW_BUILD_TRANSITIONS)))
        {
            String threadName = Thread.currentThread().getName();
            String stateString = toStateString(currentState);
            StringBuilder sb = new StringBuilder(threadName.length()+stateString.length()+10);
            sb.append(threadName).append(" --> ").append(stateString);
            Log.information(sb.toString());
        }

        return foundErrors;
    }
}
