package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixScopeField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [9315] (known as Scope).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixScopeField implements FixFieldIF, HasIntValueIF
{   
    public static final int    TagID         =  9315;
    public static final String TagIDAsString = "9315";
    public static final char[] TagIDAsChars  = {'9','3','1','5'};
    public static final String TagName       = "Scope";
    public static final String TagFixType    = "INT";
    public static final char[]  taggedchars_value0 = {'9','3','1','5', EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {'9','3','1','5', EQUALSchar, ONEchar,  SOHchar};

    public static final int     Unknown               = 0;
    public static final String  string_Unknown        = "0";
    public static final String  tagged_Unknown        = TagIDAsString + EQUALS + string_Unknown + SOH;
    public static final char[]  taggedchars_Unknown   = {'9','3','1','5', EQUALSchar, '0', SOHchar};
    public static final String  text_Unknown          = "Unknown";
    public static final int     Local                 = 1;
    public static final String  string_Local          = "1";
    public static final String  tagged_Local          = TagIDAsString + EQUALS + string_Local + SOH;
    public static final char[]  taggedchars_Local     = {'9','3','1','5', EQUALSchar, '1', SOHchar};
    public static final String  text_Local            = "Local";
    public static final int     National              = 2;
    public static final String  string_National       = "2";
    public static final String  tagged_National       = TagIDAsString + EQUALS + string_National + SOH;
    public static final char[]  taggedchars_National  = {'9','3','1','5', EQUALSchar, '2', SOHchar};
    public static final String  text_National         = "National";
    public static final int     Global                = 3;
    public static final String  string_Global         = "3";
    public static final String  tagged_Global         = TagIDAsString + EQUALS + string_Global + SOH;
    public static final char[]  taggedchars_Global    = {'9','3','1','5', EQUALSchar, '3', SOHchar};
    public static final String  text_Global           = "Global";

    private static FixScopeField flyweightUnknown;
    public static final FixScopeField flyweightUnknown()
    {
        if (flyweightUnknown == null)
        {
            synchronized(FixScopeField.class)
            {
                if (flyweightUnknown == null)
                {
                    flyweightUnknown  = new FixScopeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Unknown;}
                     public String  getValueDescription()             {return text_Unknown;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Unknown).append("|").append(text_Unknown).append("]").toString();}
                     public boolean isUnknown()                       {return true;}
                     public int     intValue()                        {return Unknown;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Unknown);}
                    };
                }
            }
        }

        return flyweightUnknown;
    }

    private static FixScopeField flyweightLocal;
    public static final FixScopeField flyweightLocal()
    {
        if (flyweightLocal == null)
        {
            synchronized(FixScopeField.class)
            {
                if (flyweightLocal == null)
                {
                    flyweightLocal  = new FixScopeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Local;}
                     public String  getValueDescription()             {return text_Local;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Local).append("|").append(text_Local).append("]").toString();}
                     public boolean isLocal()                         {return true;}
                     public int     intValue()                        {return Local;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Local);}
                    };
                }
            }
        }

        return flyweightLocal;
    }

    private static FixScopeField flyweightNational;
    public static final FixScopeField flyweightNational()
    {
        if (flyweightNational == null)
        {
            synchronized(FixScopeField.class)
            {
                if (flyweightNational == null)
                {
                    flyweightNational  = new FixScopeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_National;}
                     public String  getValueDescription()             {return text_National;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_National).append("|").append(text_National).append("]").toString();}
                     public boolean isNational()                      {return true;}
                     public int     intValue()                        {return National;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_National);}
                    };
                }
            }
        }

        return flyweightNational;
    }

    private static FixScopeField flyweightGlobal;
    public static final FixScopeField flyweightGlobal()
    {
        if (flyweightGlobal == null)
        {
            synchronized(FixScopeField.class)
            {
                if (flyweightGlobal == null)
                {
                    flyweightGlobal  = new FixScopeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Global;}
                     public String  getValueDescription()             {return text_Global;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Global).append("|").append(text_Global).append("]").toString();}
                     public boolean isGlobal()                        {return true;}
                     public int     intValue()                        {return Global;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Global);}
                    };
                }
            }
        }

        return flyweightGlobal;
    }


    public boolean isUnknown()    {return false;}
    public boolean isLocal()      {return false;}
    public boolean isNational()   {return false;}
    public boolean isGlobal()     {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixScopeField create(char[] array, int offset, int length)
    {
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static FixScopeField create(final int param)
    {
        switch (param)
        {                                                                                           
            case Unknown:  return flyweightUnknown();
            case Local:    return flyweightLocal();
            case National: return flyweightNational();
            case Global:   return flyweightGlobal();
        }
                                                                                                    
        return null;
    }                                                                                               
}
