package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixTradeConditionField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [277] (known as TradeCondition).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixTradeConditionField implements FixFieldIF
{   
    public static final int    TagID         =  277;
    public static final String TagIDAsString = "277";
    public static final char[] TagIDAsChars  = {'2','7','7'};
    public static final String TagName       = "TradeCondition";
    public static final String TagFixType    = "MULTIPLEVALUESTRING";

    public static final char    Cash                                     = 'A';
    public static final String  string_Cash                              = "A";
    public static final String  tagged_Cash                              = TagIDAsString + EQUALS + string_Cash + SOH;
    public static final char[]  taggedchars_Cash                         = {'2','7','7', EQUALSchar, 'A', SOHchar};
    public static final int     bitmask_Cash                             = 1 << 1;  public static final String text_Cash                              = "Cash";
    public static final char    AveragePriceTrade                        = 'B';
    public static final String  string_AveragePriceTrade                 = "B";
    public static final String  tagged_AveragePriceTrade                 = TagIDAsString + EQUALS + string_AveragePriceTrade + SOH;
    public static final char[]  taggedchars_AveragePriceTrade            = {'2','7','7', EQUALSchar, 'B', SOHchar};
    public static final int     bitmask_AveragePriceTrade                = 1 << 2;  public static final String text_AveragePriceTrade                 = "AveragePriceTrade";
    public static final char    CashTrade                                = 'C';
    public static final String  string_CashTrade                         = "C";
    public static final String  tagged_CashTrade                         = TagIDAsString + EQUALS + string_CashTrade + SOH;
    public static final char[]  taggedchars_CashTrade                    = {'2','7','7', EQUALSchar, 'C', SOHchar};
    public static final int     bitmask_CashTrade                        = 1 << 3;  public static final String text_CashTrade                         = "CashTrade";
    public static final char    NextDay                                  = 'D';
    public static final String  string_NextDay                           = "D";
    public static final String  tagged_NextDay                           = TagIDAsString + EQUALS + string_NextDay + SOH;
    public static final char[]  taggedchars_NextDay                      = {'2','7','7', EQUALSchar, 'D', SOHchar};
    public static final int     bitmask_NextDay                          = 1 << 4;  public static final String text_NextDay                           = "NextDay";
    public static final char    OpeningReOpeningTradeDetail              = 'E';
    public static final String  string_OpeningReOpeningTradeDetail       = "E";
    public static final String  tagged_OpeningReOpeningTradeDetail       = TagIDAsString + EQUALS + string_OpeningReOpeningTradeDetail + SOH;
    public static final char[]  taggedchars_OpeningReOpeningTradeDetail  = {'2','7','7', EQUALSchar, 'E', SOHchar};
    public static final int     bitmask_OpeningReOpeningTradeDetail      = 1 << 5;  public static final String text_OpeningReOpeningTradeDetail       = "OpeningReOpeningTradeDetail";
    public static final char    IntradayTradeDetail                      = 'F';
    public static final String  string_IntradayTradeDetail               = "F";
    public static final String  tagged_IntradayTradeDetail               = TagIDAsString + EQUALS + string_IntradayTradeDetail + SOH;
    public static final char[]  taggedchars_IntradayTradeDetail          = {'2','7','7', EQUALSchar, 'F', SOHchar};
    public static final int     bitmask_IntradayTradeDetail              = 1 << 6;  public static final String text_IntradayTradeDetail               = "IntradayTradeDetail";
    public static final char    Rule127Trade                             = 'G';
    public static final String  string_Rule127Trade                      = "G";
    public static final String  tagged_Rule127Trade                      = TagIDAsString + EQUALS + string_Rule127Trade + SOH;
    public static final char[]  taggedchars_Rule127Trade                 = {'2','7','7', EQUALSchar, 'G', SOHchar};
    public static final int     bitmask_Rule127Trade                     = 1 << 7;  public static final String text_Rule127Trade                      = "Rule127Trade";
    public static final char    Rule155Trade                             = 'H';
    public static final String  string_Rule155Trade                      = "H";
    public static final String  tagged_Rule155Trade                      = TagIDAsString + EQUALS + string_Rule155Trade + SOH;
    public static final char[]  taggedchars_Rule155Trade                 = {'2','7','7', EQUALSchar, 'H', SOHchar};
    public static final int     bitmask_Rule155Trade                     = 1 << 8;  public static final String text_Rule155Trade                      = "Rule155Trade";
    public static final char    SoldLast                                 = 'I';
    public static final String  string_SoldLast                          = "I";
    public static final String  tagged_SoldLast                          = TagIDAsString + EQUALS + string_SoldLast + SOH;
    public static final char[]  taggedchars_SoldLast                     = {'2','7','7', EQUALSchar, 'I', SOHchar};
    public static final int     bitmask_SoldLast                         = 1 << 9;  public static final String text_SoldLast                          = "SoldLast";
    public static final char    NextDayTrade                             = 'J';
    public static final String  string_NextDayTrade                      = "J";
    public static final String  tagged_NextDayTrade                      = TagIDAsString + EQUALS + string_NextDayTrade + SOH;
    public static final char[]  taggedchars_NextDayTrade                 = {'2','7','7', EQUALSchar, 'J', SOHchar};
    public static final int     bitmask_NextDayTrade                     = 1 << 10; public static final String text_NextDayTrade                      = "NextDayTrade";
    public static final char    Opened                                   = 'K';
    public static final String  string_Opened                            = "K";
    public static final String  tagged_Opened                            = TagIDAsString + EQUALS + string_Opened + SOH;
    public static final char[]  taggedchars_Opened                       = {'2','7','7', EQUALSchar, 'K', SOHchar};
    public static final int     bitmask_Opened                           = 1 << 11; public static final String text_Opened                            = "Opened";
    public static final char    Seller                                   = 'L';
    public static final String  string_Seller                            = "L";
    public static final String  tagged_Seller                            = TagIDAsString + EQUALS + string_Seller + SOH;
    public static final char[]  taggedchars_Seller                       = {'2','7','7', EQUALSchar, 'L', SOHchar};
    public static final int     bitmask_Seller                           = 1 << 12; public static final String text_Seller                            = "Seller";
    public static final char    Sold                                     = 'M';
    public static final String  string_Sold                              = "M";
    public static final String  tagged_Sold                              = TagIDAsString + EQUALS + string_Sold + SOH;
    public static final char[]  taggedchars_Sold                         = {'2','7','7', EQUALSchar, 'M', SOHchar};
    public static final int     bitmask_Sold                             = 1 << 13; public static final String text_Sold                              = "Sold";
    public static final char    StoppedStock                             = 'N';
    public static final String  string_StoppedStock                      = "N";
    public static final String  tagged_StoppedStock                      = TagIDAsString + EQUALS + string_StoppedStock + SOH;
    public static final char[]  taggedchars_StoppedStock                 = {'2','7','7', EQUALSchar, 'N', SOHchar};
    public static final int     bitmask_StoppedStock                     = 1 << 14; public static final String text_StoppedStock                      = "StoppedStock";
    public static final char    ImbalanceMoreBuyers                      = 'P';
    public static final String  string_ImbalanceMoreBuyers               = "P";
    public static final String  tagged_ImbalanceMoreBuyers               = TagIDAsString + EQUALS + string_ImbalanceMoreBuyers + SOH;
    public static final char[]  taggedchars_ImbalanceMoreBuyers          = {'2','7','7', EQUALSchar, 'P', SOHchar};
    public static final int     bitmask_ImbalanceMoreBuyers              = 1 << 15; public static final String text_ImbalanceMoreBuyers               = "ImbalanceMoreBuyers";
    public static final char    ImbalanceMoreSellers                     = 'Q';
    public static final String  string_ImbalanceMoreSellers              = "Q";
    public static final String  tagged_ImbalanceMoreSellers              = TagIDAsString + EQUALS + string_ImbalanceMoreSellers + SOH;
    public static final char[]  taggedchars_ImbalanceMoreSellers         = {'2','7','7', EQUALSchar, 'Q', SOHchar};
    public static final int     bitmask_ImbalanceMoreSellers             = 1 << 16; public static final String text_ImbalanceMoreSellers              = "ImbalanceMoreSellers";
    public static final char    OpeningPrice                             = 'R';
    public static final String  string_OpeningPrice                      = "R";
    public static final String  tagged_OpeningPrice                      = TagIDAsString + EQUALS + string_OpeningPrice + SOH;
    public static final char[]  taggedchars_OpeningPrice                 = {'2','7','7', EQUALSchar, 'R', SOHchar};
    public static final int     bitmask_OpeningPrice                     = 1 << 17; public static final String text_OpeningPrice                      = "OpeningPrice";
    public static final char    NoOpeningTrade                           = 'S';
    public static final String  string_NoOpeningTrade                    = "S";
    public static final String  tagged_NoOpeningTrade                    = TagIDAsString + EQUALS + string_NoOpeningTrade + SOH;
    public static final char[]  taggedchars_NoOpeningTrade               = {'2','7','7', EQUALSchar, 'S', SOHchar};
    public static final int     bitmask_NoOpeningTrade                   = 1 << 18; public static final String text_NoOpeningTrade                    = "NoOpeningTrade";
    public static final char    MultipleOpeningPrices                    = 'T';
    public static final String  string_MultipleOpeningPrices             = "T";
    public static final String  tagged_MultipleOpeningPrices             = TagIDAsString + EQUALS + string_MultipleOpeningPrices + SOH;
    public static final char[]  taggedchars_MultipleOpeningPrices        = {'2','7','7', EQUALSchar, 'T', SOHchar};
    public static final int     bitmask_MultipleOpeningPrices            = 1 << 19; public static final String text_MultipleOpeningPrices             = "MultipleOpeningPrices";
    public static final char    NeedQuoteToOpen                          = 'U';
    public static final String  string_NeedQuoteToOpen                   = "U";
    public static final String  tagged_NeedQuoteToOpen                   = TagIDAsString + EQUALS + string_NeedQuoteToOpen + SOH;
    public static final char[]  taggedchars_NeedQuoteToOpen              = {'2','7','7', EQUALSchar, 'U', SOHchar};
    public static final int     bitmask_NeedQuoteToOpen                  = 1 << 20; public static final String text_NeedQuoteToOpen                   = "NeedQuoteToOpen";
    public static final char    PriceNotInQuoteRange                     = 'V';
    public static final String  string_PriceNotInQuoteRange              = "V";
    public static final String  tagged_PriceNotInQuoteRange              = TagIDAsString + EQUALS + string_PriceNotInQuoteRange + SOH;
    public static final char[]  taggedchars_PriceNotInQuoteRange         = {'2','7','7', EQUALSchar, 'V', SOHchar};
    public static final int     bitmask_PriceNotInQuoteRange             = 1 << 21; public static final String text_PriceNotInQuoteRange              = "PriceNotInQuoteRange";
    public static final char    NeedDpmQuoteToOpen                       = 'W';
    public static final String  string_NeedDpmQuoteToOpen                = "W";
    public static final String  tagged_NeedDpmQuoteToOpen                = TagIDAsString + EQUALS + string_NeedDpmQuoteToOpen + SOH;
    public static final char[]  taggedchars_NeedDpmQuoteToOpen           = {'2','7','7', EQUALSchar, 'W', SOHchar};
    public static final int     bitmask_NeedDpmQuoteToOpen               = 1 << 22; public static final String text_NeedDpmQuoteToOpen                = "NeedDpmQuoteToOpen";
    public static final char    PriceNotInBOTRRange                      = 'X';
    public static final String  string_PriceNotInBOTRRange               = "X";
    public static final String  tagged_PriceNotInBOTRRange               = TagIDAsString + EQUALS + string_PriceNotInBOTRRange + SOH;
    public static final char[]  taggedchars_PriceNotInBOTRRange          = {'2','7','7', EQUALSchar, 'X', SOHchar};
    public static final int     bitmask_PriceNotInBOTRRange              = 1 << 23; public static final String text_PriceNotInBOTRRange               = "PriceNotInBOTRRange";

    private static FixTradeConditionField flyweightCash;
    public static final FixTradeConditionField flyweightCash()
    {
        if (flyweightCash == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightCash == null)
                {
                    flyweightCash  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Cash;}
                     public String  getValueDescription()             {return text_Cash;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Cash).append("|").append(text_Cash).append("]").toString();}
                     public boolean isCash()                          {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Cash);}
                    };
                }
            }
        }

        return flyweightCash;
    }

    private static FixTradeConditionField flyweightAveragePriceTrade;
    public static final FixTradeConditionField flyweightAveragePriceTrade()
    {
        if (flyweightAveragePriceTrade == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightAveragePriceTrade == null)
                {
                    flyweightAveragePriceTrade  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AveragePriceTrade;}
                     public String  getValueDescription()             {return text_AveragePriceTrade;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AveragePriceTrade).append("|").append(text_AveragePriceTrade).append("]").toString();}
                     public boolean isAveragePriceTrade()             {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AveragePriceTrade);}
                    };
                }
            }
        }

        return flyweightAveragePriceTrade;
    }

    private static FixTradeConditionField flyweightCashTrade;
    public static final FixTradeConditionField flyweightCashTrade()
    {
        if (flyweightCashTrade == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightCashTrade == null)
                {
                    flyweightCashTrade  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_CashTrade;}
                     public String  getValueDescription()             {return text_CashTrade;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CashTrade).append("|").append(text_CashTrade).append("]").toString();}
                     public boolean isCashTrade()                     {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_CashTrade);}
                    };
                }
            }
        }

        return flyweightCashTrade;
    }

    private static FixTradeConditionField flyweightNextDay;
    public static final FixTradeConditionField flyweightNextDay()
    {
        if (flyweightNextDay == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightNextDay == null)
                {
                    flyweightNextDay  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NextDay;}
                     public String  getValueDescription()             {return text_NextDay;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NextDay).append("|").append(text_NextDay).append("]").toString();}
                     public boolean isNextDay()                       {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NextDay);}
                    };
                }
            }
        }

        return flyweightNextDay;
    }

    private static FixTradeConditionField flyweightOpeningReOpeningTradeDetail;
    public static final FixTradeConditionField flyweightOpeningReOpeningTradeDetail()
    {
        if (flyweightOpeningReOpeningTradeDetail == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightOpeningReOpeningTradeDetail == null)
                {
                    flyweightOpeningReOpeningTradeDetail  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_OpeningReOpeningTradeDetail;}
                     public String  getValueDescription()             {return text_OpeningReOpeningTradeDetail;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OpeningReOpeningTradeDetail).append("|").append(text_OpeningReOpeningTradeDetail).append("]").toString();}
                     public boolean isOpeningReOpeningTradeDetail()   {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OpeningReOpeningTradeDetail);}
                    };
                }
            }
        }

        return flyweightOpeningReOpeningTradeDetail;
    }

    private static FixTradeConditionField flyweightIntradayTradeDetail;
    public static final FixTradeConditionField flyweightIntradayTradeDetail()
    {
        if (flyweightIntradayTradeDetail == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightIntradayTradeDetail == null)
                {
                    flyweightIntradayTradeDetail  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_IntradayTradeDetail;}
                     public String  getValueDescription()             {return text_IntradayTradeDetail;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_IntradayTradeDetail).append("|").append(text_IntradayTradeDetail).append("]").toString();}
                     public boolean isIntradayTradeDetail()           {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_IntradayTradeDetail);}
                    };
                }
            }
        }

        return flyweightIntradayTradeDetail;
    }

    private static FixTradeConditionField flyweightRule127Trade;
    public static final FixTradeConditionField flyweightRule127Trade()
    {
        if (flyweightRule127Trade == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightRule127Trade == null)
                {
                    flyweightRule127Trade  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Rule127Trade;}
                     public String  getValueDescription()             {return text_Rule127Trade;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Rule127Trade).append("|").append(text_Rule127Trade).append("]").toString();}
                     public boolean isRule127Trade()                  {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Rule127Trade);}
                    };
                }
            }
        }

        return flyweightRule127Trade;
    }

    private static FixTradeConditionField flyweightRule155Trade;
    public static final FixTradeConditionField flyweightRule155Trade()
    {
        if (flyweightRule155Trade == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightRule155Trade == null)
                {
                    flyweightRule155Trade  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Rule155Trade;}
                     public String  getValueDescription()             {return text_Rule155Trade;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Rule155Trade).append("|").append(text_Rule155Trade).append("]").toString();}
                     public boolean isRule155Trade()                  {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Rule155Trade);}
                    };
                }
            }
        }

        return flyweightRule155Trade;
    }

    private static FixTradeConditionField flyweightSoldLast;
    public static final FixTradeConditionField flyweightSoldLast()
    {
        if (flyweightSoldLast == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightSoldLast == null)
                {
                    flyweightSoldLast  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_SoldLast;}
                     public String  getValueDescription()             {return text_SoldLast;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_SoldLast).append("|").append(text_SoldLast).append("]").toString();}
                     public boolean isSoldLast()                      {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_SoldLast);}
                    };
                }
            }
        }

        return flyweightSoldLast;
    }

    private static FixTradeConditionField flyweightNextDayTrade;
    public static final FixTradeConditionField flyweightNextDayTrade()
    {
        if (flyweightNextDayTrade == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightNextDayTrade == null)
                {
                    flyweightNextDayTrade  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NextDayTrade;}
                     public String  getValueDescription()             {return text_NextDayTrade;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NextDayTrade).append("|").append(text_NextDayTrade).append("]").toString();}
                     public boolean isNextDayTrade()                  {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NextDayTrade);}
                    };
                }
            }
        }

        return flyweightNextDayTrade;
    }

    private static FixTradeConditionField flyweightOpened;
    public static final FixTradeConditionField flyweightOpened()
    {
        if (flyweightOpened == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightOpened == null)
                {
                    flyweightOpened  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Opened;}
                     public String  getValueDescription()             {return text_Opened;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Opened).append("|").append(text_Opened).append("]").toString();}
                     public boolean isOpened()                        {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Opened);}
                    };
                }
            }
        }

        return flyweightOpened;
    }

    private static FixTradeConditionField flyweightSeller;
    public static final FixTradeConditionField flyweightSeller()
    {
        if (flyweightSeller == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightSeller == null)
                {
                    flyweightSeller  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Seller;}
                     public String  getValueDescription()             {return text_Seller;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Seller).append("|").append(text_Seller).append("]").toString();}
                     public boolean isSeller()                        {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Seller);}
                    };
                }
            }
        }

        return flyweightSeller;
    }

    private static FixTradeConditionField flyweightSold;
    public static final FixTradeConditionField flyweightSold()
    {
        if (flyweightSold == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightSold == null)
                {
                    flyweightSold  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Sold;}
                     public String  getValueDescription()             {return text_Sold;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Sold).append("|").append(text_Sold).append("]").toString();}
                     public boolean isSold()                          {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Sold);}
                    };
                }
            }
        }

        return flyweightSold;
    }

    private static FixTradeConditionField flyweightStoppedStock;
    public static final FixTradeConditionField flyweightStoppedStock()
    {
        if (flyweightStoppedStock == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightStoppedStock == null)
                {
                    flyweightStoppedStock  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_StoppedStock;}
                     public String  getValueDescription()             {return text_StoppedStock;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_StoppedStock).append("|").append(text_StoppedStock).append("]").toString();}
                     public boolean isStoppedStock()                  {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_StoppedStock);}
                    };
                }
            }
        }

        return flyweightStoppedStock;
    }

    private static FixTradeConditionField flyweightImbalanceMoreBuyers;
    public static final FixTradeConditionField flyweightImbalanceMoreBuyers()
    {
        if (flyweightImbalanceMoreBuyers == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightImbalanceMoreBuyers == null)
                {
                    flyweightImbalanceMoreBuyers  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ImbalanceMoreBuyers;}
                     public String  getValueDescription()             {return text_ImbalanceMoreBuyers;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ImbalanceMoreBuyers).append("|").append(text_ImbalanceMoreBuyers).append("]").toString();}
                     public boolean isImbalanceMoreBuyers()           {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ImbalanceMoreBuyers);}
                    };
                }
            }
        }

        return flyweightImbalanceMoreBuyers;
    }

    private static FixTradeConditionField flyweightImbalanceMoreSellers;
    public static final FixTradeConditionField flyweightImbalanceMoreSellers()
    {
        if (flyweightImbalanceMoreSellers == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightImbalanceMoreSellers == null)
                {
                    flyweightImbalanceMoreSellers  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ImbalanceMoreSellers;}
                     public String  getValueDescription()             {return text_ImbalanceMoreSellers;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ImbalanceMoreSellers).append("|").append(text_ImbalanceMoreSellers).append("]").toString();}
                     public boolean isImbalanceMoreSellers()          {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ImbalanceMoreSellers);}
                    };
                }
            }
        }

        return flyweightImbalanceMoreSellers;
    }

    private static FixTradeConditionField flyweightOpeningPrice;
    public static final FixTradeConditionField flyweightOpeningPrice()
    {
        if (flyweightOpeningPrice == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightOpeningPrice == null)
                {
                    flyweightOpeningPrice  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_OpeningPrice;}
                     public String  getValueDescription()             {return text_OpeningPrice;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OpeningPrice).append("|").append(text_OpeningPrice).append("]").toString();}
                     public boolean isOpeningPrice()                  {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OpeningPrice);}
                    };
                }
            }
        }

        return flyweightOpeningPrice;
    }

    private static FixTradeConditionField flyweightNoOpeningTrade;
    public static final FixTradeConditionField flyweightNoOpeningTrade()
    {
        if (flyweightNoOpeningTrade == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightNoOpeningTrade == null)
                {
                    flyweightNoOpeningTrade  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NoOpeningTrade;}
                     public String  getValueDescription()             {return text_NoOpeningTrade;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NoOpeningTrade).append("|").append(text_NoOpeningTrade).append("]").toString();}
                     public boolean isNoOpeningTrade()                {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NoOpeningTrade);}
                    };
                }
            }
        }

        return flyweightNoOpeningTrade;
    }

    private static FixTradeConditionField flyweightMultipleOpeningPrices;
    public static final FixTradeConditionField flyweightMultipleOpeningPrices()
    {
        if (flyweightMultipleOpeningPrices == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightMultipleOpeningPrices == null)
                {
                    flyweightMultipleOpeningPrices  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_MultipleOpeningPrices;}
                     public String  getValueDescription()             {return text_MultipleOpeningPrices;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_MultipleOpeningPrices).append("|").append(text_MultipleOpeningPrices).append("]").toString();}
                     public boolean isMultipleOpeningPrices()         {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_MultipleOpeningPrices);}
                    };
                }
            }
        }

        return flyweightMultipleOpeningPrices;
    }

    private static FixTradeConditionField flyweightNeedQuoteToOpen;
    public static final FixTradeConditionField flyweightNeedQuoteToOpen()
    {
        if (flyweightNeedQuoteToOpen == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightNeedQuoteToOpen == null)
                {
                    flyweightNeedQuoteToOpen  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NeedQuoteToOpen;}
                     public String  getValueDescription()             {return text_NeedQuoteToOpen;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NeedQuoteToOpen).append("|").append(text_NeedQuoteToOpen).append("]").toString();}
                     public boolean isNeedQuoteToOpen()               {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NeedQuoteToOpen);}
                    };
                }
            }
        }

        return flyweightNeedQuoteToOpen;
    }

    private static FixTradeConditionField flyweightPriceNotInQuoteRange;
    public static final FixTradeConditionField flyweightPriceNotInQuoteRange()
    {
        if (flyweightPriceNotInQuoteRange == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightPriceNotInQuoteRange == null)
                {
                    flyweightPriceNotInQuoteRange  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PriceNotInQuoteRange;}
                     public String  getValueDescription()             {return text_PriceNotInQuoteRange;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PriceNotInQuoteRange).append("|").append(text_PriceNotInQuoteRange).append("]").toString();}
                     public boolean isPriceNotInQuoteRange()          {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PriceNotInQuoteRange);}
                    };
                }
            }
        }

        return flyweightPriceNotInQuoteRange;
    }

    private static FixTradeConditionField flyweightNeedDpmQuoteToOpen;
    public static final FixTradeConditionField flyweightNeedDpmQuoteToOpen()
    {
        if (flyweightNeedDpmQuoteToOpen == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightNeedDpmQuoteToOpen == null)
                {
                    flyweightNeedDpmQuoteToOpen  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NeedDpmQuoteToOpen;}
                     public String  getValueDescription()             {return text_NeedDpmQuoteToOpen;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NeedDpmQuoteToOpen).append("|").append(text_NeedDpmQuoteToOpen).append("]").toString();}
                     public boolean isNeedDpmQuoteToOpen()            {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NeedDpmQuoteToOpen);}
                    };
                }
            }
        }

        return flyweightNeedDpmQuoteToOpen;
    }

    private static FixTradeConditionField flyweightPriceNotInBOTRRange;
    public static final FixTradeConditionField flyweightPriceNotInBOTRRange()
    {
        if (flyweightPriceNotInBOTRRange == null)
        {
            synchronized(FixTradeConditionField.class)
            {
                if (flyweightPriceNotInBOTRRange == null)
                {
                    flyweightPriceNotInBOTRRange  = new FixTradeConditionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PriceNotInBOTRRange;}
                     public String  getValueDescription()             {return text_PriceNotInBOTRRange;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PriceNotInBOTRRange).append("|").append(text_PriceNotInBOTRRange).append("]").toString();}
                     public boolean isPriceNotInBOTRRange()           {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PriceNotInBOTRRange);}
                    };
                }
            }
        }

        return flyweightPriceNotInBOTRRange;
    }


    public boolean isCash()                          {return false;}
    public boolean isAveragePriceTrade()             {return false;}
    public boolean isCashTrade()                     {return false;}
    public boolean isNextDay()                       {return false;}
    public boolean isOpeningReOpeningTradeDetail()   {return false;}
    public boolean isIntradayTradeDetail()           {return false;}
    public boolean isRule127Trade()                  {return false;}
    public boolean isRule155Trade()                  {return false;}
    public boolean isSoldLast()                      {return false;}
    public boolean isNextDayTrade()                  {return false;}
    public boolean isOpened()                        {return false;}
    public boolean isSeller()                        {return false;}
    public boolean isSold()                          {return false;}
    public boolean isStoppedStock()                  {return false;}
    public boolean isImbalanceMoreBuyers()           {return false;}
    public boolean isImbalanceMoreSellers()          {return false;}
    public boolean isOpeningPrice()                  {return false;}
    public boolean isNoOpeningTrade()                {return false;}
    public boolean isMultipleOpeningPrices()         {return false;}
    public boolean isNeedQuoteToOpen()               {return false;}
    public boolean isPriceNotInQuoteRange()          {return false;}
    public boolean isNeedDpmQuoteToOpen()            {return false;}
    public boolean isPriceNotInBOTRRange()           {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixTradeConditionField create(char[] array, int offset, int length)
    {
        return create(new String(array, offset, length));
    }

    public static FixTradeConditionField create(final String multiparam)
    {
        int bitmask = 0;

        for (int i = 0; i < multiparam.length(); i++)
        {
            switch (multiparam.charAt(i))
            {                                                                                           
                case Cash:
                    if (multiparam.length() == 1) return flyweightCash();
                    bitmask |= bitmask_Cash;
                    break;
                case AveragePriceTrade:
                    if (multiparam.length() == 1) return flyweightAveragePriceTrade();
                    bitmask |= bitmask_AveragePriceTrade;
                    break;
                case CashTrade:
                    if (multiparam.length() == 1) return flyweightCashTrade();
                    bitmask |= bitmask_CashTrade;
                    break;
                case NextDay:
                    if (multiparam.length() == 1) return flyweightNextDay();
                    bitmask |= bitmask_NextDay;
                    break;
                case OpeningReOpeningTradeDetail:
                    if (multiparam.length() == 1) return flyweightOpeningReOpeningTradeDetail();
                    bitmask |= bitmask_OpeningReOpeningTradeDetail;
                    break;
                case IntradayTradeDetail:
                    if (multiparam.length() == 1) return flyweightIntradayTradeDetail();
                    bitmask |= bitmask_IntradayTradeDetail;
                    break;
                case Rule127Trade:
                    if (multiparam.length() == 1) return flyweightRule127Trade();
                    bitmask |= bitmask_Rule127Trade;
                    break;
                case Rule155Trade:
                    if (multiparam.length() == 1) return flyweightRule155Trade();
                    bitmask |= bitmask_Rule155Trade;
                    break;
                case SoldLast:
                    if (multiparam.length() == 1) return flyweightSoldLast();
                    bitmask |= bitmask_SoldLast;
                    break;
                case NextDayTrade:
                    if (multiparam.length() == 1) return flyweightNextDayTrade();
                    bitmask |= bitmask_NextDayTrade;
                    break;
                case Opened:
                    if (multiparam.length() == 1) return flyweightOpened();
                    bitmask |= bitmask_Opened;
                    break;
                case Seller:
                    if (multiparam.length() == 1) return flyweightSeller();
                    bitmask |= bitmask_Seller;
                    break;
                case Sold:
                    if (multiparam.length() == 1) return flyweightSold();
                    bitmask |= bitmask_Sold;
                    break;
                case StoppedStock:
                    if (multiparam.length() == 1) return flyweightStoppedStock();
                    bitmask |= bitmask_StoppedStock;
                    break;
                case ImbalanceMoreBuyers:
                    if (multiparam.length() == 1) return flyweightImbalanceMoreBuyers();
                    bitmask |= bitmask_ImbalanceMoreBuyers;
                    break;
                case ImbalanceMoreSellers:
                    if (multiparam.length() == 1) return flyweightImbalanceMoreSellers();
                    bitmask |= bitmask_ImbalanceMoreSellers;
                    break;
                case OpeningPrice:
                    if (multiparam.length() == 1) return flyweightOpeningPrice();
                    bitmask |= bitmask_OpeningPrice;
                    break;
                case NoOpeningTrade:
                    if (multiparam.length() == 1) return flyweightNoOpeningTrade();
                    bitmask |= bitmask_NoOpeningTrade;
                    break;
                case MultipleOpeningPrices:
                    if (multiparam.length() == 1) return flyweightMultipleOpeningPrices();
                    bitmask |= bitmask_MultipleOpeningPrices;
                    break;
                case NeedQuoteToOpen:
                    if (multiparam.length() == 1) return flyweightNeedQuoteToOpen();
                    bitmask |= bitmask_NeedQuoteToOpen;
                    break;
                case PriceNotInQuoteRange:
                    if (multiparam.length() == 1) return flyweightPriceNotInQuoteRange();
                    bitmask |= bitmask_PriceNotInQuoteRange;
                    break;
                case NeedDpmQuoteToOpen:
                    if (multiparam.length() == 1) return flyweightNeedDpmQuoteToOpen();
                    bitmask |= bitmask_NeedDpmQuoteToOpen;
                    break;
                case PriceNotInBOTRRange:
                    if (multiparam.length() == 1) return flyweightPriceNotInBOTRRange();
                    bitmask |= bitmask_PriceNotInBOTRRange;
                    break;
                default:
                    return null;
            }
        }

        if (bitmask == 0)
        {
            return null;
        }

        final int bits = bitmask;

        return new FixTradeConditionField()
        {       public int value = bits;
                public boolean hasValue()                        {return bits != 0;}
                public String  getValue()                        {return this.toMultipleValueString(value);}
        };
    }                                                                                               
    public static String toMultipleValueString(int bitmask)
    {
        StringBuilder buffer = new StringBuilder();
                                                                                                        
        if (BitHelper.isBitMaskSet(bitmask, bitmask_Cash)) buffer.append(string_Cash).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_AveragePriceTrade)) buffer.append(string_AveragePriceTrade).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_CashTrade)) buffer.append(string_CashTrade).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_NextDay)) buffer.append(string_NextDay).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_OpeningReOpeningTradeDetail)) buffer.append(string_OpeningReOpeningTradeDetail).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_IntradayTradeDetail)) buffer.append(string_IntradayTradeDetail).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_Rule127Trade)) buffer.append(string_Rule127Trade).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_Rule155Trade)) buffer.append(string_Rule155Trade).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_SoldLast)) buffer.append(string_SoldLast).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_NextDayTrade)) buffer.append(string_NextDayTrade).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_Opened)) buffer.append(string_Opened).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_Seller)) buffer.append(string_Seller).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_Sold)) buffer.append(string_Sold).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_StoppedStock)) buffer.append(string_StoppedStock).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_ImbalanceMoreBuyers)) buffer.append(string_ImbalanceMoreBuyers).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_ImbalanceMoreSellers)) buffer.append(string_ImbalanceMoreSellers).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_OpeningPrice)) buffer.append(string_OpeningPrice).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_NoOpeningTrade)) buffer.append(string_NoOpeningTrade).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_MultipleOpeningPrices)) buffer.append(string_MultipleOpeningPrices).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_NeedQuoteToOpen)) buffer.append(string_NeedQuoteToOpen).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_PriceNotInQuoteRange)) buffer.append(string_PriceNotInQuoteRange).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_NeedDpmQuoteToOpen)) buffer.append(string_NeedDpmQuoteToOpen).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_PriceNotInBOTRRange)) buffer.append(string_PriceNotInBOTRRange).append(' ');

        if (buffer.charAt(buffer.length() - 1) == ' ') buffer.setLength(buffer.length() - 1);

        return buffer.toString();
    }                                                                                                   
}
