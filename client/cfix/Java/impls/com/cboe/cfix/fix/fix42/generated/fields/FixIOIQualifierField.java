package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixIOIQualifierField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [104] (known as IOIQualifier).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixIOIQualifierField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  104;
    public static final String TagIDAsString = "104";
    public static final char[] TagIDAsChars  = {'1','0','4'};
    public static final String TagName       = "IOIQualifier";
    public static final String TagFixType    = "CHAR";

    public static final char    AllOrNone                          = 'A';
    public static final String  string_AllOrNone                   = "A";
    public static final String  tagged_AllOrNone                   = TagIDAsString + EQUALS + string_AllOrNone + SOH;
    public static final char[]  taggedchars_AllOrNone              = {'1','0','4', EQUALSchar, 'A', SOHchar};
    public static final String  text_AllOrNone                     = "AllOrNone";
    public static final char    AtTheClose                         = 'C';
    public static final String  string_AtTheClose                  = "C";
    public static final String  tagged_AtTheClose                  = TagIDAsString + EQUALS + string_AtTheClose + SOH;
    public static final char[]  taggedchars_AtTheClose             = {'1','0','4', EQUALSchar, 'C', SOHchar};
    public static final String  text_AtTheClose                    = "AtTheClose";
    public static final char    InTouchWith                        = 'I';
    public static final String  string_InTouchWith                 = "I";
    public static final String  tagged_InTouchWith                 = TagIDAsString + EQUALS + string_InTouchWith + SOH;
    public static final char[]  taggedchars_InTouchWith            = {'1','0','4', EQUALSchar, 'I', SOHchar};
    public static final String  text_InTouchWith                   = "InTouchWith";
    public static final char    Limit                              = 'L';
    public static final String  string_Limit                       = "L";
    public static final String  tagged_Limit                       = TagIDAsString + EQUALS + string_Limit + SOH;
    public static final char[]  taggedchars_Limit                  = {'1','0','4', EQUALSchar, 'L', SOHchar};
    public static final String  text_Limit                         = "Limit";
    public static final char    MoreBehind                         = 'M';
    public static final String  string_MoreBehind                  = "M";
    public static final String  tagged_MoreBehind                  = TagIDAsString + EQUALS + string_MoreBehind + SOH;
    public static final char[]  taggedchars_MoreBehind             = {'1','0','4', EQUALSchar, 'M', SOHchar};
    public static final String  text_MoreBehind                    = "MoreBehind";
    public static final char    AtTheOpen                          = 'O';
    public static final String  string_AtTheOpen                   = "O";
    public static final String  tagged_AtTheOpen                   = TagIDAsString + EQUALS + string_AtTheOpen + SOH;
    public static final char[]  taggedchars_AtTheOpen              = {'1','0','4', EQUALSchar, 'O', SOHchar};
    public static final String  text_AtTheOpen                     = "AtTheOpen";
    public static final char    TakingAPosition                    = 'P';
    public static final String  string_TakingAPosition             = "P";
    public static final String  tagged_TakingAPosition             = TagIDAsString + EQUALS + string_TakingAPosition + SOH;
    public static final char[]  taggedchars_TakingAPosition        = {'1','0','4', EQUALSchar, 'P', SOHchar};
    public static final String  text_TakingAPosition               = "TakingAPosition";
    public static final char    AtTheMarket                        = 'Q';
    public static final String  string_AtTheMarket                 = "Q";
    public static final String  tagged_AtTheMarket                 = TagIDAsString + EQUALS + string_AtTheMarket + SOH;
    public static final char[]  taggedchars_AtTheMarket            = {'1','0','4', EQUALSchar, 'Q', SOHchar};
    public static final String  text_AtTheMarket                   = "AtTheMarket";
    public static final char    ReadyToTrade                       = 'R';
    public static final String  string_ReadyToTrade                = "R";
    public static final String  tagged_ReadyToTrade                = TagIDAsString + EQUALS + string_ReadyToTrade + SOH;
    public static final char[]  taggedchars_ReadyToTrade           = {'1','0','4', EQUALSchar, 'R', SOHchar};
    public static final String  text_ReadyToTrade                  = "ReadyToTrade";
    public static final char    PortfolioShown                     = 'S';
    public static final String  string_PortfolioShown              = "S";
    public static final String  tagged_PortfolioShown              = TagIDAsString + EQUALS + string_PortfolioShown + SOH;
    public static final char[]  taggedchars_PortfolioShown         = {'1','0','4', EQUALSchar, 'S', SOHchar};
    public static final String  text_PortfolioShown                = "PortfolioShown";
    public static final char    ThroughTheDay                      = 'T';
    public static final String  string_ThroughTheDay               = "T";
    public static final String  tagged_ThroughTheDay               = TagIDAsString + EQUALS + string_ThroughTheDay + SOH;
    public static final char[]  taggedchars_ThroughTheDay          = {'1','0','4', EQUALSchar, 'T', SOHchar};
    public static final String  text_ThroughTheDay                 = "ThroughTheDay";
    public static final char    Versus                             = 'V';
    public static final String  string_Versus                      = "V";
    public static final String  tagged_Versus                      = TagIDAsString + EQUALS + string_Versus + SOH;
    public static final char[]  taggedchars_Versus                 = {'1','0','4', EQUALSchar, 'V', SOHchar};
    public static final String  text_Versus                        = "Versus";
    public static final char    IndicationWorkingAway              = 'W';
    public static final String  string_IndicationWorkingAway       = "W";
    public static final String  tagged_IndicationWorkingAway       = TagIDAsString + EQUALS + string_IndicationWorkingAway + SOH;
    public static final char[]  taggedchars_IndicationWorkingAway  = {'1','0','4', EQUALSchar, 'W', SOHchar};
    public static final String  text_IndicationWorkingAway         = "IndicationWorkingAway";
    public static final char    CrossingOpportunity                = 'X';
    public static final String  string_CrossingOpportunity         = "X";
    public static final String  tagged_CrossingOpportunity         = TagIDAsString + EQUALS + string_CrossingOpportunity + SOH;
    public static final char[]  taggedchars_CrossingOpportunity    = {'1','0','4', EQUALSchar, 'X', SOHchar};
    public static final String  text_CrossingOpportunity           = "CrossingOpportunity";
    public static final char    AtTheMidpoint                      = 'Y';
    public static final String  string_AtTheMidpoint               = "Y";
    public static final String  tagged_AtTheMidpoint               = TagIDAsString + EQUALS + string_AtTheMidpoint + SOH;
    public static final char[]  taggedchars_AtTheMidpoint          = {'1','0','4', EQUALSchar, 'Y', SOHchar};
    public static final String  text_AtTheMidpoint                 = "AtTheMidpoint";
    public static final char    PreOpen                            = 'Z';
    public static final String  string_PreOpen                     = "Z";
    public static final String  tagged_PreOpen                     = TagIDAsString + EQUALS + string_PreOpen + SOH;
    public static final char[]  taggedchars_PreOpen                = {'1','0','4', EQUALSchar, 'Z', SOHchar};
    public static final String  text_PreOpen                       = "PreOpen";

    private static FixIOIQualifierField flyweightAllOrNone;
    public static final FixIOIQualifierField flyweightAllOrNone()
    {
        if (flyweightAllOrNone == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightAllOrNone == null)
                {
                    flyweightAllOrNone  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AllOrNone;}
                     public String  getValueDescription()             {return text_AllOrNone;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AllOrNone).append("|").append(text_AllOrNone).append("]").toString();}
                     public boolean isAllOrNone()                     {return true;}
                     public char    charValue()                       {return AllOrNone;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AllOrNone);}
                    };
                }
            }
        }

        return flyweightAllOrNone;
    }

    private static FixIOIQualifierField flyweightAtTheClose;
    public static final FixIOIQualifierField flyweightAtTheClose()
    {
        if (flyweightAtTheClose == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightAtTheClose == null)
                {
                    flyweightAtTheClose  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AtTheClose;}
                     public String  getValueDescription()             {return text_AtTheClose;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AtTheClose).append("|").append(text_AtTheClose).append("]").toString();}
                     public boolean isAtTheClose()                    {return true;}
                     public char    charValue()                       {return AtTheClose;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AtTheClose);}
                    };
                }
            }
        }

        return flyweightAtTheClose;
    }

    private static FixIOIQualifierField flyweightInTouchWith;
    public static final FixIOIQualifierField flyweightInTouchWith()
    {
        if (flyweightInTouchWith == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightInTouchWith == null)
                {
                    flyweightInTouchWith  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_InTouchWith;}
                     public String  getValueDescription()             {return text_InTouchWith;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_InTouchWith).append("|").append(text_InTouchWith).append("]").toString();}
                     public boolean isInTouchWith()                   {return true;}
                     public char    charValue()                       {return InTouchWith;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_InTouchWith);}
                    };
                }
            }
        }

        return flyweightInTouchWith;
    }

    private static FixIOIQualifierField flyweightLimit;
    public static final FixIOIQualifierField flyweightLimit()
    {
        if (flyweightLimit == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightLimit == null)
                {
                    flyweightLimit  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Limit;}
                     public String  getValueDescription()             {return text_Limit;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Limit).append("|").append(text_Limit).append("]").toString();}
                     public boolean isLimit()                         {return true;}
                     public char    charValue()                       {return Limit;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Limit);}
                    };
                }
            }
        }

        return flyweightLimit;
    }

    private static FixIOIQualifierField flyweightMoreBehind;
    public static final FixIOIQualifierField flyweightMoreBehind()
    {
        if (flyweightMoreBehind == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightMoreBehind == null)
                {
                    flyweightMoreBehind  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_MoreBehind;}
                     public String  getValueDescription()             {return text_MoreBehind;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_MoreBehind).append("|").append(text_MoreBehind).append("]").toString();}
                     public boolean isMoreBehind()                    {return true;}
                     public char    charValue()                       {return MoreBehind;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_MoreBehind);}
                    };
                }
            }
        }

        return flyweightMoreBehind;
    }

    private static FixIOIQualifierField flyweightAtTheOpen;
    public static final FixIOIQualifierField flyweightAtTheOpen()
    {
        if (flyweightAtTheOpen == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightAtTheOpen == null)
                {
                    flyweightAtTheOpen  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AtTheOpen;}
                     public String  getValueDescription()             {return text_AtTheOpen;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AtTheOpen).append("|").append(text_AtTheOpen).append("]").toString();}
                     public boolean isAtTheOpen()                     {return true;}
                     public char    charValue()                       {return AtTheOpen;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AtTheOpen);}
                    };
                }
            }
        }

        return flyweightAtTheOpen;
    }

    private static FixIOIQualifierField flyweightTakingAPosition;
    public static final FixIOIQualifierField flyweightTakingAPosition()
    {
        if (flyweightTakingAPosition == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightTakingAPosition == null)
                {
                    flyweightTakingAPosition  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_TakingAPosition;}
                     public String  getValueDescription()             {return text_TakingAPosition;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_TakingAPosition).append("|").append(text_TakingAPosition).append("]").toString();}
                     public boolean isTakingAPosition()               {return true;}
                     public char    charValue()                       {return TakingAPosition;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_TakingAPosition);}
                    };
                }
            }
        }

        return flyweightTakingAPosition;
    }

    private static FixIOIQualifierField flyweightAtTheMarket;
    public static final FixIOIQualifierField flyweightAtTheMarket()
    {
        if (flyweightAtTheMarket == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightAtTheMarket == null)
                {
                    flyweightAtTheMarket  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AtTheMarket;}
                     public String  getValueDescription()             {return text_AtTheMarket;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AtTheMarket).append("|").append(text_AtTheMarket).append("]").toString();}
                     public boolean isAtTheMarket()                   {return true;}
                     public char    charValue()                       {return AtTheMarket;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AtTheMarket);}
                    };
                }
            }
        }

        return flyweightAtTheMarket;
    }

    private static FixIOIQualifierField flyweightReadyToTrade;
    public static final FixIOIQualifierField flyweightReadyToTrade()
    {
        if (flyweightReadyToTrade == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightReadyToTrade == null)
                {
                    flyweightReadyToTrade  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ReadyToTrade;}
                     public String  getValueDescription()             {return text_ReadyToTrade;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ReadyToTrade).append("|").append(text_ReadyToTrade).append("]").toString();}
                     public boolean isReadyToTrade()                  {return true;}
                     public char    charValue()                       {return ReadyToTrade;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ReadyToTrade);}
                    };
                }
            }
        }

        return flyweightReadyToTrade;
    }

    private static FixIOIQualifierField flyweightPortfolioShown;
    public static final FixIOIQualifierField flyweightPortfolioShown()
    {
        if (flyweightPortfolioShown == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightPortfolioShown == null)
                {
                    flyweightPortfolioShown  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PortfolioShown;}
                     public String  getValueDescription()             {return text_PortfolioShown;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PortfolioShown).append("|").append(text_PortfolioShown).append("]").toString();}
                     public boolean isPortfolioShown()                {return true;}
                     public char    charValue()                       {return PortfolioShown;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PortfolioShown);}
                    };
                }
            }
        }

        return flyweightPortfolioShown;
    }

    private static FixIOIQualifierField flyweightThroughTheDay;
    public static final FixIOIQualifierField flyweightThroughTheDay()
    {
        if (flyweightThroughTheDay == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightThroughTheDay == null)
                {
                    flyweightThroughTheDay  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ThroughTheDay;}
                     public String  getValueDescription()             {return text_ThroughTheDay;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ThroughTheDay).append("|").append(text_ThroughTheDay).append("]").toString();}
                     public boolean isThroughTheDay()                 {return true;}
                     public char    charValue()                       {return ThroughTheDay;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ThroughTheDay);}
                    };
                }
            }
        }

        return flyweightThroughTheDay;
    }

    private static FixIOIQualifierField flyweightVersus;
    public static final FixIOIQualifierField flyweightVersus()
    {
        if (flyweightVersus == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightVersus == null)
                {
                    flyweightVersus  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Versus;}
                     public String  getValueDescription()             {return text_Versus;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Versus).append("|").append(text_Versus).append("]").toString();}
                     public boolean isVersus()                        {return true;}
                     public char    charValue()                       {return Versus;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Versus);}
                    };
                }
            }
        }

        return flyweightVersus;
    }

    private static FixIOIQualifierField flyweightIndicationWorkingAway;
    public static final FixIOIQualifierField flyweightIndicationWorkingAway()
    {
        if (flyweightIndicationWorkingAway == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightIndicationWorkingAway == null)
                {
                    flyweightIndicationWorkingAway  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_IndicationWorkingAway;}
                     public String  getValueDescription()             {return text_IndicationWorkingAway;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_IndicationWorkingAway).append("|").append(text_IndicationWorkingAway).append("]").toString();}
                     public boolean isIndicationWorkingAway()         {return true;}
                     public char    charValue()                       {return IndicationWorkingAway;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_IndicationWorkingAway);}
                    };
                }
            }
        }

        return flyweightIndicationWorkingAway;
    }

    private static FixIOIQualifierField flyweightCrossingOpportunity;
    public static final FixIOIQualifierField flyweightCrossingOpportunity()
    {
        if (flyweightCrossingOpportunity == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightCrossingOpportunity == null)
                {
                    flyweightCrossingOpportunity  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_CrossingOpportunity;}
                     public String  getValueDescription()             {return text_CrossingOpportunity;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CrossingOpportunity).append("|").append(text_CrossingOpportunity).append("]").toString();}
                     public boolean isCrossingOpportunity()           {return true;}
                     public char    charValue()                       {return CrossingOpportunity;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_CrossingOpportunity);}
                    };
                }
            }
        }

        return flyweightCrossingOpportunity;
    }

    private static FixIOIQualifierField flyweightAtTheMidpoint;
    public static final FixIOIQualifierField flyweightAtTheMidpoint()
    {
        if (flyweightAtTheMidpoint == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightAtTheMidpoint == null)
                {
                    flyweightAtTheMidpoint  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AtTheMidpoint;}
                     public String  getValueDescription()             {return text_AtTheMidpoint;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AtTheMidpoint).append("|").append(text_AtTheMidpoint).append("]").toString();}
                     public boolean isAtTheMidpoint()                 {return true;}
                     public char    charValue()                       {return AtTheMidpoint;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AtTheMidpoint);}
                    };
                }
            }
        }

        return flyweightAtTheMidpoint;
    }

    private static FixIOIQualifierField flyweightPreOpen;
    public static final FixIOIQualifierField flyweightPreOpen()
    {
        if (flyweightPreOpen == null)
        {
            synchronized(FixIOIQualifierField.class)
            {
                if (flyweightPreOpen == null)
                {
                    flyweightPreOpen  = new FixIOIQualifierField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PreOpen;}
                     public String  getValueDescription()             {return text_PreOpen;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PreOpen).append("|").append(text_PreOpen).append("]").toString();}
                     public boolean isPreOpen()                       {return true;}
                     public char    charValue()                       {return PreOpen;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PreOpen);}
                    };
                }
            }
        }

        return flyweightPreOpen;
    }


    public boolean isAllOrNone()               {return false;}
    public boolean isAtTheClose()              {return false;}
    public boolean isInTouchWith()             {return false;}
    public boolean isLimit()                   {return false;}
    public boolean isMoreBehind()              {return false;}
    public boolean isAtTheOpen()               {return false;}
    public boolean isTakingAPosition()         {return false;}
    public boolean isAtTheMarket()             {return false;}
    public boolean isReadyToTrade()            {return false;}
    public boolean isPortfolioShown()          {return false;}
    public boolean isThroughTheDay()           {return false;}
    public boolean isVersus()                  {return false;}
    public boolean isIndicationWorkingAway()   {return false;}
    public boolean isCrossingOpportunity()     {return false;}
    public boolean isAtTheMidpoint()           {return false;}
    public boolean isPreOpen()                 {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixIOIQualifierField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixIOIQualifierField create(final char param)
    {
        switch (param)
        {                                                                                           
            case AllOrNone:             return flyweightAllOrNone();
            case AtTheClose:            return flyweightAtTheClose();
            case InTouchWith:           return flyweightInTouchWith();
            case Limit:                 return flyweightLimit();
            case MoreBehind:            return flyweightMoreBehind();
            case AtTheOpen:             return flyweightAtTheOpen();
            case TakingAPosition:       return flyweightTakingAPosition();
            case AtTheMarket:           return flyweightAtTheMarket();
            case ReadyToTrade:          return flyweightReadyToTrade();
            case PortfolioShown:        return flyweightPortfolioShown();
            case ThroughTheDay:         return flyweightThroughTheDay();
            case Versus:                return flyweightVersus();
            case IndicationWorkingAway: return flyweightIndicationWorkingAway();
            case CrossingOpportunity:   return flyweightCrossingOpportunity();
            case AtTheMidpoint:         return flyweightAtTheMidpoint();
            case PreOpen:               return flyweightPreOpen();
        }
                                                                                                    
        return null;
    }                                                                                               
}
