package com.cboe.cfix.fix.fix42.generated.messages;

/**
 * FixIndicationOfInterestMessage.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's IndicationOfInterest Message.
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import java.util.*;

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.cfix.fix.fix42.field.*;
import com.cboe.cfix.fix.fix42.generated.fields.*;
import com.cboe.cfix.fix.fix42.generated.helpers.*;
import com.cboe.cfix.fix.util.*;
import com.cboe.client.util.*;
import com.cboe.infrastructureServices.foundationFramework.utilities.*;

public class FixIndicationOfInterestMessage extends FixMessage
{   
    public static final String MsgType        = "6";
    public static final char   MsgTypeAsChar  = '6';
    public static final char[] MsgTypeAsChars = {'6'};
    public static final String MsgTypeName    = "IndicationOfInterest";

    public FixIOIIdField                     fieldIOIId;
    public FixIOITransTypeField              fieldIOITransType;
    public FixIOIRefIDField                  fieldIOIRefID;
    public FixSymbolField                    fieldSymbol;
    public FixSymbolSfxField                 fieldSymbolSfx;
    public FixSecurityIDField                fieldSecurityID;
    public FixIDSourceField                  fieldIDSource;
    public FixSecurityTypeField              fieldSecurityType;
    public FixMaturityMonthYearField         fieldMaturityMonthYear;
    public FixMaturityDayField               fieldMaturityDay;
    public FixPutOrCallField                 fieldPutOrCall;
    public FixStrikePriceField               fieldStrikePrice;
    public FixOptAttributeField              fieldOptAttribute;
    public FixContractMultiplierField        fieldContractMultiplier;
    public FixCouponRateField                fieldCouponRate;
    public FixSecurityExchangeField          fieldSecurityExchange;
    public FixIssuerField                    fieldIssuer;
    //     FixEncodedIssuerLenField          fieldEncodedIssuerLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    //     FixEncodedIssuerField             fieldEncodedIssuer;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    public FixSecurityDescField              fieldSecurityDesc;
    //     FixEncodedSecurityDescLenField    fieldEncodedSecurityDescLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    //     FixEncodedSecurityDescField       fieldEncodedSecurityDesc;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    public FixSideField                      fieldSide;
    public FixIOISharesField                 fieldIOIShares;
    public FixPriceField                     fieldPrice;
    public FixCurrencyField                  fieldCurrency;
    public FixValidUntilTimeField            fieldValidUntilTime;
    public FixIOIQltyIndField                fieldIOIQltyInd;
    public FixIOINaturalFlagField            fieldIOINaturalFlag;
    public FixNoIOIQualifiersField           fieldNoIOIQualifiers;
    public IOIQualifiersGroup[]              groupIOIQualifiers;
    public FixTextField                      fieldText;
    //     FixEncodedTextLenField            fieldEncodedTextLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    //     FixEncodedTextField               fieldEncodedText;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    public FixTransactTimeField              fieldTransactTime;
    public FixURLLinkField                   fieldURLLink;
    public FixNoRoutingIDsField              fieldNoRoutingIDs;
    public RoutingIDsGroup[]                 groupRoutingIDs;
    public FixSpreadToBenchmarkField         fieldSpreadToBenchmark;
    public FixBenchmarkField                 fieldBenchmark;
    public List                              additionalUserFields;

    public static class IOIQualifiersGroup implements PrettyPrintWriterVisitorIF
    {   
        public FixIOIQualifierField              fieldIOIQualifier;

        public String toString()
        {
            PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

            accept(prettyPrintWriter);

            return prettyPrintWriter.toString();
        }

        public void accept(PrettyPrintWriterIF prettyPrintWriter)
        {
            prettyPrintWriter.startPrintingGroup("IOIQualifiersGroup");  
            prettyPrintWriter.printGroupItem(fieldIOIQualifier);

            prettyPrintWriter.endPrintingGroup();
        }                                                                                                 

        public void accept(FixMessageBuilderIF fixMessageBuilder)
        {                                                                                             
            fixMessageBuilder.append(fieldIOIQualifier);
        }                                                                                                 
    }

    public static class RoutingIDsGroup implements PrettyPrintWriterVisitorIF
    {   
        public FixRoutingTypeField               fieldRoutingType;
        public FixRoutingIDField                 fieldRoutingID;

        public String toString()
        {
            PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

            accept(prettyPrintWriter);

            return prettyPrintWriter.toString();
        }

        public void accept(PrettyPrintWriterIF prettyPrintWriter)
        {
            prettyPrintWriter.startPrintingGroup("RoutingIDsGroup");  
            prettyPrintWriter.printGroupItem(fieldRoutingType);
            prettyPrintWriter.printGroupItem(fieldRoutingID);

            prettyPrintWriter.endPrintingGroup();
        }                                                                                                 

        public void accept(FixMessageBuilderIF fixMessageBuilder)
        {                                                                                             
            fixMessageBuilder.append(fieldRoutingType);
            fixMessageBuilder.append(fieldRoutingID);
        }                                                                                                 
    }

    public FixIndicationOfInterestMessage()
    {

    }

    public boolean isFixIndicationOfInterestMessage() {return true;}
    public String getMsgType()        {return MsgType;}
    public char   getMsgTypeAsChar()  {return MsgTypeAsChar;}
    public char[] getMsgTypeAsChars() {return MsgTypeAsChars;}
    public String getMsgTypeName()    {return MsgTypeName;}
    
    public String toString()
    {
        PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

        accept(prettyPrintWriter);

        return prettyPrintWriter.toString();
    }

    public void accept(PrettyPrintWriterIF prettyPrintWriter)
    {
        prettyPrintWriter.startPrintingGroup(MsgTypeName);

        super.accept(prettyPrintWriter);
                                                                                                      
        prettyPrintWriter.printGroupItem(fieldIOIId);
        prettyPrintWriter.printGroupItem(fieldIOITransType);
        prettyPrintWriter.printGroupItem(fieldIOIRefID);
        prettyPrintWriter.printGroupItem(fieldSymbol);
        prettyPrintWriter.printGroupItem(fieldSymbolSfx);
        prettyPrintWriter.printGroupItem(fieldSecurityID);
        prettyPrintWriter.printGroupItem(fieldIDSource);
        prettyPrintWriter.printGroupItem(fieldSecurityType);
        prettyPrintWriter.printGroupItem(fieldMaturityMonthYear);
        prettyPrintWriter.printGroupItem(fieldMaturityDay);
        prettyPrintWriter.printGroupItem(fieldPutOrCall);
        prettyPrintWriter.printGroupItem(fieldStrikePrice);
        prettyPrintWriter.printGroupItem(fieldOptAttribute);
        prettyPrintWriter.printGroupItem(fieldContractMultiplier);
        prettyPrintWriter.printGroupItem(fieldCouponRate);
        prettyPrintWriter.printGroupItem(fieldSecurityExchange);
        prettyPrintWriter.printGroupItem(fieldIssuer);
        prettyPrintWriter.printGroupItem(fieldSecurityDesc);
        prettyPrintWriter.printGroupItem(fieldSide);
        prettyPrintWriter.printGroupItem(fieldIOIShares);
        prettyPrintWriter.printGroupItem(fieldPrice);
        prettyPrintWriter.printGroupItem(fieldCurrency);
        prettyPrintWriter.printGroupItem(fieldValidUntilTime);
        prettyPrintWriter.printGroupItem(fieldIOIQltyInd);
        prettyPrintWriter.printGroupItem(fieldIOINaturalFlag);
        prettyPrintWriter.printGroupItem(fieldNoIOIQualifiers);
        if (groupIOIQualifiers != null)
        {
            for (int i = 0; i < groupIOIQualifiers.length; i++)
            {
                if (groupIOIQualifiers[i] != null) groupIOIQualifiers[i].accept(prettyPrintWriter);
            }
        }                                                                                             
        prettyPrintWriter.printGroupItem(fieldText);
        prettyPrintWriter.printGroupItem(fieldTransactTime);
        prettyPrintWriter.printGroupItem(fieldURLLink);
        prettyPrintWriter.printGroupItem(fieldNoRoutingIDs);
        if (groupRoutingIDs != null)
        {
            for (int i = 0; i < groupRoutingIDs.length; i++)
            {
                if (groupRoutingIDs[i] != null) groupRoutingIDs[i].accept(prettyPrintWriter);
            }
        }                                                                                             
        prettyPrintWriter.printGroupItem(fieldSpreadToBenchmark);
        prettyPrintWriter.printGroupItem(fieldBenchmark);

        prettyPrintWriter.endPrintingGroup();
    }                                                                                                 

    public void accept(FixMessageBuilderIF fixMessageBuilder)
    {
        super.accept(fixMessageBuilder);
                                                                                                      
        fixMessageBuilder.append(fieldIOIId);
        fixMessageBuilder.append(fieldIOITransType);
        fixMessageBuilder.append(fieldIOIRefID);
        fixMessageBuilder.append(fieldSymbol);
        fixMessageBuilder.append(fieldSymbolSfx);
        fixMessageBuilder.append(fieldSecurityID);
        fixMessageBuilder.append(fieldIDSource);
        fixMessageBuilder.append(fieldSecurityType);
        fixMessageBuilder.append(fieldMaturityMonthYear);
        fixMessageBuilder.append(fieldMaturityDay);
        fixMessageBuilder.append(fieldPutOrCall);
        fixMessageBuilder.append(fieldStrikePrice);
        fixMessageBuilder.append(fieldOptAttribute);
        fixMessageBuilder.append(fieldContractMultiplier);
        fixMessageBuilder.append(fieldCouponRate);
        fixMessageBuilder.append(fieldSecurityExchange);
        fixMessageBuilder.append(fieldIssuer);
        fixMessageBuilder.append(fieldSecurityDesc);
        fixMessageBuilder.append(fieldSide);
        fixMessageBuilder.append(fieldIOIShares);
        fixMessageBuilder.append(fieldPrice);
        fixMessageBuilder.append(fieldCurrency);
        fixMessageBuilder.append(fieldValidUntilTime);
        fixMessageBuilder.append(fieldIOIQltyInd);
        fixMessageBuilder.append(fieldIOINaturalFlag);
        fixMessageBuilder.append(fieldNoIOIQualifiers);
        if (groupIOIQualifiers != null)
        {
            for (int i = 0; i < groupIOIQualifiers.length; i++)
            {
                if (groupIOIQualifiers[i] != null) groupIOIQualifiers[i].accept(fixMessageBuilder);
            }
        }                                                                                             
        fixMessageBuilder.append(fieldText);
        fixMessageBuilder.append(fieldTransactTime);
        fixMessageBuilder.append(fieldURLLink);
        fixMessageBuilder.append(fieldNoRoutingIDs);
        if (groupRoutingIDs != null)
        {
            for (int i = 0; i < groupRoutingIDs.length; i++)
            {
                if (groupRoutingIDs[i] != null) groupRoutingIDs[i].accept(fixMessageBuilder);
            }
        }                                                                                             
        fixMessageBuilder.append(fieldSpreadToBenchmark);
        fixMessageBuilder.append(fieldBenchmark);

        if (additionalUserFields != null)
        {
            for (Iterator iterator = additionalUserFields.iterator(); iterator.hasNext(); )
            {
                fixMessageBuilder.append((FixFieldIF) iterator.next());
            }
        }
    }                                                                                                 

    public PackedIntArrayIF validate(FixPacketIF fixPacket, PackedIntArrayIF foundErrors, int validationFlags, int debugFlags)
    {
        if (fieldSenderCompID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSenderCompIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldTargetCompID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixTargetCompIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldMsgSeqNum == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixMsgSeqNumField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldSendingTime == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSendingTimeField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldIOIId == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixIOIIdField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldIOITransType == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixIOITransTypeField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldSymbol == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSymbolField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldSide == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSideField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldIOIShares == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixIOISharesField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        return foundErrors;
    }

    private static final int STATE_IOIQualifiersGroup = 2;
    private static final int STATE_RoutingIDsGroup = 3;

    private String toStateString(int state)
    {
        switch (state)
        {
            case STATE_Header: return "State[Header]";
            case STATE_Field:  return "State[Field]";
            case STATE_IOIQualifiersGroup: return "State[IOIQualifiersGroup]";
            case STATE_RoutingIDsGroup: return "State[RoutingIDsGroup]";
        }

        return "???";
    }
    
    public PackedIntArrayIF build(FixPacketIF fixPacket, PackedIntArrayIF foundErrors, int validationFlags, int debugFlags)
    {
        char[] array          = fixPacket.getArray();
        int    numTags        = fixPacket.getTagPositionLength();
        int    currentState   = STATE_Header;
        int    tag;
        int    offset;
        int    length;
        int    numInGroup;
        int    group;
        int    currentPosition;
        int    current_groupIOIQualifiers = -1; // this group has a starting field which we have to find first
        int    current_groupRoutingIDs = 0; // this group does not have a starting field, so we want to populate it as we find its objects

        for (currentPosition = 0; currentPosition < numTags; currentPosition++)
        {
            if (!foundErrors.isEmpty() && BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                break;
            }

            tag    = fixPacket.getTag(currentPosition);
            offset = fixPacket.getValueOffset(currentPosition);
            length = fixPacket.getValueLength(currentPosition);

            if ((BitHelper.isBitMaskSet(debugFlags, FixSessionDebugIF.MESSAGE_SHOW_BUILD_TRANSITIONS)))
            {
                String threadName = Thread.currentThread().getName();
                String stateString = toStateString(currentState);
                StringBuilder sb = new StringBuilder(threadName.length()+stateString.length()+50);
                if (currentPosition > 0)
                {
                    sb.append(threadName).append(" --> ").append(stateString);
                    Log.information(sb.toString());
                    sb.setLength(0);
                }

                sb.append(threadName).append("Tag[").append(currentPosition).append("] = ").append(FixFieldHelper.getTagName(tag)).append("(").append(tag).append(") ").append(stateString);
                Log.information(sb.toString());
            }

            switch (tag)
            {
                case FixIOIIdField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldIOIId != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldIOIId = FixIOIIdField.create(array, offset, length);
                    if (fieldIOIId == null || !fieldIOIId.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixIOITransTypeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldIOITransType != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldIOITransType = FixIOITransTypeField.create(array, offset, length);
                    if (fieldIOITransType == null || !fieldIOITransType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixIOIRefIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldIOIRefID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldIOIRefID = FixIOIRefIDField.create(array, offset, length);
                    if (fieldIOIRefID == null || !fieldIOIRefID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSymbolField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSymbol != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSymbol = FixSymbolField.create(array, offset, length);
                    if (fieldSymbol == null || !fieldSymbol.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSymbolSfxField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSymbolSfx != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSymbolSfx = FixSymbolSfxField.create(array, offset, length);
                    if (fieldSymbolSfx == null || !fieldSymbolSfx.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSecurityIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSecurityID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSecurityID = FixSecurityIDField.create(array, offset, length);
                    if (fieldSecurityID == null || !fieldSecurityID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixIDSourceField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldIDSource != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldIDSource = FixIDSourceField.create(array, offset, length);
                    if (fieldIDSource == null || !fieldIDSource.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSecurityTypeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSecurityType != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSecurityType = FixSecurityTypeField.create(array, offset, length);
                    if (fieldSecurityType == null || !fieldSecurityType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixMaturityMonthYearField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldMaturityMonthYear != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldMaturityMonthYear = FixMaturityMonthYearField.create(array, offset, length);
                    if (fieldMaturityMonthYear == null || !fieldMaturityMonthYear.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixMaturityDayField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldMaturityDay != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldMaturityDay = FixMaturityDayField.create(array, offset, length);
                    if (fieldMaturityDay == null || !fieldMaturityDay.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixPutOrCallField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldPutOrCall != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldPutOrCall = FixPutOrCallField.create(array, offset, length);
                    if (fieldPutOrCall == null || !fieldPutOrCall.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixStrikePriceField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldStrikePrice != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldStrikePrice = FixStrikePriceField.create(array, offset, length);
                    if (fieldStrikePrice == null || !fieldStrikePrice.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixOptAttributeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldOptAttribute != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldOptAttribute = FixOptAttributeField.create(array, offset, length);
                    if (fieldOptAttribute == null || !fieldOptAttribute.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixContractMultiplierField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldContractMultiplier != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldContractMultiplier = FixContractMultiplierField.create(array, offset, length);
                    if (fieldContractMultiplier == null || !fieldContractMultiplier.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixCouponRateField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldCouponRate != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldCouponRate = FixCouponRateField.create(array, offset, length);
                    if (fieldCouponRate == null || !fieldCouponRate.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSecurityExchangeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSecurityExchange != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSecurityExchange = FixSecurityExchangeField.create(array, offset, length);
                    if (fieldSecurityExchange == null || !fieldSecurityExchange.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixIssuerField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldIssuer != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldIssuer = FixIssuerField.create(array, offset, length);
                    if (fieldIssuer == null || !fieldIssuer.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixEncodedIssuerLenField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedIssuerLenField unusedByCboeField = FixEncodedIssuerLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixEncodedIssuerField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedIssuerField unusedByCboeField = FixEncodedIssuerField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixSecurityDescField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSecurityDesc != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSecurityDesc = FixSecurityDescField.create(array, offset, length);
                    if (fieldSecurityDesc == null || !fieldSecurityDesc.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixEncodedSecurityDescLenField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedSecurityDescLenField unusedByCboeField = FixEncodedSecurityDescLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixEncodedSecurityDescField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedSecurityDescField unusedByCboeField = FixEncodedSecurityDescField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixSideField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSide != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSide = FixSideField.create(array, offset, length);
                    if (fieldSide == null || !fieldSide.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixIOISharesField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldIOIShares != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldIOIShares = FixIOISharesField.create(array, offset, length);
                    if (fieldIOIShares == null || !fieldIOIShares.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixPriceField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldPrice != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldPrice = FixPriceField.create(array, offset, length);
                    if (fieldPrice == null || !fieldPrice.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixCurrencyField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldCurrency != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldCurrency = FixCurrencyField.create(array, offset, length);
                    if (fieldCurrency == null || !fieldCurrency.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixValidUntilTimeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldValidUntilTime != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldValidUntilTime = FixValidUntilTimeField.create(array, offset, length);
                    if (fieldValidUntilTime == null || !fieldValidUntilTime.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixIOIQltyIndField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldIOIQltyInd != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldIOIQltyInd = FixIOIQltyIndField.create(array, offset, length);
                    if (fieldIOIQltyInd == null || !fieldIOIQltyInd.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixIOINaturalFlagField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldIOINaturalFlag != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldIOINaturalFlag = FixIOINaturalFlagField.create(array, offset, length);
                    if (fieldIOINaturalFlag == null || !fieldIOINaturalFlag.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixTextField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldText != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldText = FixTextField.create(array, offset, length);
                    if (fieldText == null || !fieldText.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixEncodedTextLenField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedTextLenField unusedByCboeField = FixEncodedTextLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixEncodedTextField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedTextField unusedByCboeField = FixEncodedTextField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixTransactTimeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldTransactTime != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldTransactTime = FixTransactTimeField.create(array, offset, length);
                    if (fieldTransactTime == null || !fieldTransactTime.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixURLLinkField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldURLLink != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldURLLink = FixURLLinkField.create(array, offset, length);
                    if (fieldURLLink == null || !fieldURLLink.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSpreadToBenchmarkField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSpreadToBenchmark != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSpreadToBenchmark = FixSpreadToBenchmarkField.create(array, offset, length);
                    if (fieldSpreadToBenchmark == null || !fieldSpreadToBenchmark.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixBenchmarkField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldBenchmark != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldBenchmark = FixBenchmarkField.create(array, offset, length);
                    if (fieldBenchmark == null || !fieldBenchmark.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixNoIOIQualifiersField.TagID:
                {
                    if (fieldNoIOIQualifiers != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupIOIQualifiers != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldNoIOIQualifiers = FixNoIOIQualifiersField.create(array, offset, length);
                    if (fieldNoIOIQualifiers == null || !fieldNoIOIQualifiers.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    currentState = STATE_IOIQualifiersGroup;

                    numInGroup = fieldNoIOIQualifiers.intValue();

                    groupIOIQualifiers = new IOIQualifiersGroup[numInGroup];
                    for (group = 0; group < numInGroup; group++)
                    {
                        groupIOIQualifiers[group] = new IOIQualifiersGroup();
                    }

                    continue;
                }
                case FixNoRoutingIDsField.TagID:
                {
                    if (fieldNoRoutingIDs != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRoutingIDs != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldNoRoutingIDs = FixNoRoutingIDsField.create(array, offset, length);
                    if (fieldNoRoutingIDs == null || !fieldNoRoutingIDs.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    currentState = STATE_RoutingIDsGroup;

                    numInGroup = fieldNoRoutingIDs.intValue();

                    groupRoutingIDs = new RoutingIDsGroup[numInGroup];
                    for (group = 0; group < numInGroup; group++)
                    {
                        groupRoutingIDs[group] = new RoutingIDsGroup();
                    }

                    continue;
                }
                case FixIOIQualifierField.TagID:
                {
                    if (currentState != STATE_IOIQualifiersGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    current_groupIOIQualifiers++;

                    currentState = STATE_IOIQualifiersGroup;

                    if (current_groupIOIQualifiers >= groupIOIQualifiers.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupIOIQualifiers[current_groupIOIQualifiers].fieldIOIQualifier != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupIOIQualifiers[current_groupIOIQualifiers].fieldIOIQualifier = FixIOIQualifierField.create(array, offset, length);
                    if (groupIOIQualifiers[current_groupIOIQualifiers].fieldIOIQualifier == null || !groupIOIQualifiers[current_groupIOIQualifiers].fieldIOIQualifier.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixRoutingTypeField.TagID:
                {
                    if (currentState != STATE_RoutingIDsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRoutingIDs >= groupRoutingIDs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRoutingIDs[current_groupRoutingIDs].fieldRoutingType != null)
                    {
                        current_groupRoutingIDs++;
                    }

                    groupRoutingIDs[current_groupRoutingIDs].fieldRoutingType = FixRoutingTypeField.create(array, offset, length);
                    if (groupRoutingIDs[current_groupRoutingIDs].fieldRoutingType == null || !groupRoutingIDs[current_groupRoutingIDs].fieldRoutingType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixRoutingIDField.TagID:
                {
                    if (currentState != STATE_RoutingIDsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRoutingIDs >= groupRoutingIDs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRoutingIDs[current_groupRoutingIDs].fieldRoutingID != null)
                    {
                        current_groupRoutingIDs++;
                    }

                    groupRoutingIDs[current_groupRoutingIDs].fieldRoutingID = FixRoutingIDField.create(array, offset, length);
                    if (groupRoutingIDs[current_groupRoutingIDs].fieldRoutingID == null || !groupRoutingIDs[current_groupRoutingIDs].fieldRoutingID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
            }

            if (tag >= FixMessageIF.USER_DEFINED_TAGS_START)
            {
                if (currentState == STATE_Field || currentState == STATE_Header)
                {
                    if (additionalUserFields == null)
                    {
                        additionalUserFields = new ArrayList();
                    }

                    additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                    continue;
                }

                if (currentState == STATE_IOIQualifiersGroup)
                {
                    if (current_groupIOIQualifiers == groupIOIQualifiers.length - 1)
                    {
                        if (additionalUserFields == null)
                        {
                            additionalUserFields = new ArrayList();
                        }

                        additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                        continue;
                    }

                    foundErrors.add(BitHelper.packInt(FixException.UNEXPECTED_USER_DEFINED_TAG_WITHIN_GROUP, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return foundErrors;
                    }
                    continue;
                }

                if (currentState == STATE_RoutingIDsGroup)
                {
                    if (current_groupRoutingIDs == groupRoutingIDs.length - 1)
                    {
                        if (additionalUserFields == null)
                        {
                            additionalUserFields = new ArrayList();
                        }

                        additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                        continue;
                    }

                    foundErrors.add(BitHelper.packInt(FixException.UNEXPECTED_USER_DEFINED_TAG_WITHIN_GROUP, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return foundErrors;
                    }
                    continue;
                }
            }

            if (!buildHeaderTrailer(array, tag, offset, length, currentState, currentPosition, foundErrors, validationFlags, debugFlags))
            {
                foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG, currentPosition));

                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                {
                    return foundErrors;
                }

                continue;
            }
        }

        if (groupIOIQualifiers != null && current_groupIOIQualifiers != groupIOIQualifiers.length - 1)
        {
            foundErrors.add(BitHelper.packInt(FixException.FEWER_GROUPS_THAN_SPECIFIED, currentPosition));

            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        if (groupRoutingIDs != null && current_groupRoutingIDs != groupRoutingIDs.length - 1)
        {
            foundErrors.add(BitHelper.packInt(FixException.FEWER_GROUPS_THAN_SPECIFIED, currentPosition));

            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        if ((BitHelper.isBitMaskSet(debugFlags, FixSessionDebugIF.MESSAGE_SHOW_BUILD_TRANSITIONS)))
        {
            String threadName = Thread.currentThread().getName();
            String stateString = toStateString(currentState);
            StringBuilder sb = new StringBuilder(threadName.length()+stateString.length()+10);
            sb.append(threadName).append(" --> ").append(stateString);
            Log.information(sb.toString());
        }

        return foundErrors;
    }
}
