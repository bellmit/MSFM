package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixMDReqRejReasonField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [281] (known as MDReqRejReason).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixMDReqRejReasonField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  281;
    public static final String TagIDAsString = "281";
    public static final char[] TagIDAsChars  = {'2','8','1'};
    public static final String TagName       = "MDReqRejReason";
    public static final String TagFixType    = "CHAR";

    public static final char    UnknownSymbol                                   = '0';
    public static final String  string_UnknownSymbol                            = "0";
    public static final String  tagged_UnknownSymbol                            = TagIDAsString + EQUALS + string_UnknownSymbol + SOH;
    public static final char[]  taggedchars_UnknownSymbol                       = {'2','8','1', EQUALSchar, '0', SOHchar};
    public static final String  text_UnknownSymbol                              = "UnknownSymbol";
    public static final char    DuplicateMdReqId                                = '1';
    public static final String  string_DuplicateMdReqId                         = "1";
    public static final String  tagged_DuplicateMdReqId                         = TagIDAsString + EQUALS + string_DuplicateMdReqId + SOH;
    public static final char[]  taggedchars_DuplicateMdReqId                    = {'2','8','1', EQUALSchar, '1', SOHchar};
    public static final String  text_DuplicateMdReqId                           = "DuplicateMdReqId";
    public static final char    InsufficientBandwidth                           = '2';
    public static final String  string_InsufficientBandwidth                    = "2";
    public static final String  tagged_InsufficientBandwidth                    = TagIDAsString + EQUALS + string_InsufficientBandwidth + SOH;
    public static final char[]  taggedchars_InsufficientBandwidth               = {'2','8','1', EQUALSchar, '2', SOHchar};
    public static final String  text_InsufficientBandwidth                      = "InsufficientBandwidth";
    public static final char    InsufficientPermissions                         = '3';
    public static final String  string_InsufficientPermissions                  = "3";
    public static final String  tagged_InsufficientPermissions                  = TagIDAsString + EQUALS + string_InsufficientPermissions + SOH;
    public static final char[]  taggedchars_InsufficientPermissions             = {'2','8','1', EQUALSchar, '3', SOHchar};
    public static final String  text_InsufficientPermissions                    = "InsufficientPermissions";
    public static final char    UnsupportedSubscriptionRequestType              = '4';
    public static final String  string_UnsupportedSubscriptionRequestType       = "4";
    public static final String  tagged_UnsupportedSubscriptionRequestType       = TagIDAsString + EQUALS + string_UnsupportedSubscriptionRequestType + SOH;
    public static final char[]  taggedchars_UnsupportedSubscriptionRequestType  = {'2','8','1', EQUALSchar, '4', SOHchar};
    public static final String  text_UnsupportedSubscriptionRequestType         = "UnsupportedSubscriptionRequestType";
    public static final char    UnsupportedMarketDepth                          = '5';
    public static final String  string_UnsupportedMarketDepth                   = "5";
    public static final String  tagged_UnsupportedMarketDepth                   = TagIDAsString + EQUALS + string_UnsupportedMarketDepth + SOH;
    public static final char[]  taggedchars_UnsupportedMarketDepth              = {'2','8','1', EQUALSchar, '5', SOHchar};
    public static final String  text_UnsupportedMarketDepth                     = "UnsupportedMarketDepth";
    public static final char    UnsupportedMdUpdateType                         = '6';
    public static final String  string_UnsupportedMdUpdateType                  = "6";
    public static final String  tagged_UnsupportedMdUpdateType                  = TagIDAsString + EQUALS + string_UnsupportedMdUpdateType + SOH;
    public static final char[]  taggedchars_UnsupportedMdUpdateType             = {'2','8','1', EQUALSchar, '6', SOHchar};
    public static final String  text_UnsupportedMdUpdateType                    = "UnsupportedMdUpdateType";
    public static final char    UnsupportedAggregatedBook                       = '7';
    public static final String  string_UnsupportedAggregatedBook                = "7";
    public static final String  tagged_UnsupportedAggregatedBook                = TagIDAsString + EQUALS + string_UnsupportedAggregatedBook + SOH;
    public static final char[]  taggedchars_UnsupportedAggregatedBook           = {'2','8','1', EQUALSchar, '7', SOHchar};
    public static final String  text_UnsupportedAggregatedBook                  = "UnsupportedAggregatedBook";
    public static final char    UnsupportedMdEntryType                          = '8';
    public static final String  string_UnsupportedMdEntryType                   = "8";
    public static final String  tagged_UnsupportedMdEntryType                   = TagIDAsString + EQUALS + string_UnsupportedMdEntryType + SOH;
    public static final char[]  taggedchars_UnsupportedMdEntryType              = {'2','8','1', EQUALSchar, '8', SOHchar};
    public static final String  text_UnsupportedMdEntryType                     = "UnsupportedMdEntryType";
    public static final char    UnsupportedTradingSessionID                     = '9';
    public static final String  string_UnsupportedTradingSessionID              = "9";
    public static final String  tagged_UnsupportedTradingSessionID              = TagIDAsString + EQUALS + string_UnsupportedTradingSessionID + SOH;
    public static final char[]  taggedchars_UnsupportedTradingSessionID         = {'2','8','1', EQUALSchar, '9', SOHchar};
    public static final String  text_UnsupportedTradingSessionID                = "UnsupportedTradingSessionID";
    public static final char    UnsupportedScope                                = 'A';
    public static final String  string_UnsupportedScope                         = "A";
    public static final String  tagged_UnsupportedScope                         = TagIDAsString + EQUALS + string_UnsupportedScope + SOH;
    public static final char[]  taggedchars_UnsupportedScope                    = {'2','8','1', EQUALSchar, 'A', SOHchar};
    public static final String  text_UnsupportedScope                           = "UnsupportedScope";
    public static final char    UnsupportedOpenCloseSettlementFlag              = 'B';
    public static final String  string_UnsupportedOpenCloseSettlementFlag       = "B";
    public static final String  tagged_UnsupportedOpenCloseSettlementFlag       = TagIDAsString + EQUALS + string_UnsupportedOpenCloseSettlementFlag + SOH;
    public static final char[]  taggedchars_UnsupportedOpenCloseSettlementFlag  = {'2','8','1', EQUALSchar, 'B', SOHchar};
    public static final String  text_UnsupportedOpenCloseSettlementFlag         = "UnsupportedOpenCloseSettlementFlag";
    public static final char    UnsupportedMDImplicitDelete                     = 'C';
    public static final String  string_UnsupportedMDImplicitDelete              = "C";
    public static final String  tagged_UnsupportedMDImplicitDelete              = TagIDAsString + EQUALS + string_UnsupportedMDImplicitDelete + SOH;
    public static final char[]  taggedchars_UnsupportedMDImplicitDelete         = {'2','8','1', EQUALSchar, 'C', SOHchar};
    public static final String  text_UnsupportedMDImplicitDelete                = "UnsupportedMDImplicitDelete";
    public static final char    UseSpecifiedEngine                              = 'D';
    public static final String  string_UseSpecifiedEngine                       = "D";
    public static final String  tagged_UseSpecifiedEngine                       = TagIDAsString + EQUALS + string_UseSpecifiedEngine + SOH;
    public static final char[]  taggedchars_UseSpecifiedEngine                  = {'2','8','1', EQUALSchar, 'D', SOHchar};
    public static final String  text_UseSpecifiedEngine                         = "UseSpecifiedEngine";
    public static final char    AlreadySubscribed                               = 'E';
    public static final String  string_AlreadySubscribed                        = "E";
    public static final String  tagged_AlreadySubscribed                        = TagIDAsString + EQUALS + string_AlreadySubscribed + SOH;
    public static final char[]  taggedchars_AlreadySubscribed                   = {'2','8','1', EQUALSchar, 'E', SOHchar};
    public static final String  text_AlreadySubscribed                          = "AlreadySubscribed";
    public static final char    SubscriptionReplaced                            = 'F';
    public static final String  string_SubscriptionReplaced                     = "F";
    public static final String  tagged_SubscriptionReplaced                     = TagIDAsString + EQUALS + string_SubscriptionReplaced + SOH;
    public static final char[]  taggedchars_SubscriptionReplaced                = {'2','8','1', EQUALSchar, 'F', SOHchar};
    public static final String  text_SubscriptionReplaced                       = "SubscriptionReplaced";
    public static final char    ForcedUnsubscribe                               = 'G';
    public static final String  string_ForcedUnsubscribe                        = "G";
    public static final String  tagged_ForcedUnsubscribe                        = TagIDAsString + EQUALS + string_ForcedUnsubscribe + SOH;
    public static final char[]  taggedchars_ForcedUnsubscribe                   = {'2','8','1', EQUALSchar, 'G', SOHchar};
    public static final String  text_ForcedUnsubscribe                          = "ForcedUnsubscribe";

    private static FixMDReqRejReasonField flyweightUnknownSymbol;
    public static final FixMDReqRejReasonField flyweightUnknownSymbol()
    {
        if (flyweightUnknownSymbol == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightUnknownSymbol == null)
                {
                    flyweightUnknownSymbol  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_UnknownSymbol;}
                     public String  getValueDescription()                    {return text_UnknownSymbol;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnknownSymbol).append("|").append(text_UnknownSymbol).append("]").toString();}
                     public boolean isUnknownSymbol()                        {return true;}
                     public char    charValue()                              {return UnknownSymbol;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnknownSymbol);}
                    };
                }
            }
        }

        return flyweightUnknownSymbol;
    }

    private static FixMDReqRejReasonField flyweightDuplicateMdReqId;
    public static final FixMDReqRejReasonField flyweightDuplicateMdReqId()
    {
        if (flyweightDuplicateMdReqId == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightDuplicateMdReqId == null)
                {
                    flyweightDuplicateMdReqId  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_DuplicateMdReqId;}
                     public String  getValueDescription()                    {return text_DuplicateMdReqId;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_DuplicateMdReqId).append("|").append(text_DuplicateMdReqId).append("]").toString();}
                     public boolean isDuplicateMdReqId()                     {return true;}
                     public char    charValue()                              {return DuplicateMdReqId;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_DuplicateMdReqId);}
                    };
                }
            }
        }

        return flyweightDuplicateMdReqId;
    }

    private static FixMDReqRejReasonField flyweightInsufficientBandwidth;
    public static final FixMDReqRejReasonField flyweightInsufficientBandwidth()
    {
        if (flyweightInsufficientBandwidth == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightInsufficientBandwidth == null)
                {
                    flyweightInsufficientBandwidth  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_InsufficientBandwidth;}
                     public String  getValueDescription()                    {return text_InsufficientBandwidth;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_InsufficientBandwidth).append("|").append(text_InsufficientBandwidth).append("]").toString();}
                     public boolean isInsufficientBandwidth()                {return true;}
                     public char    charValue()                              {return InsufficientBandwidth;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_InsufficientBandwidth);}
                    };
                }
            }
        }

        return flyweightInsufficientBandwidth;
    }

    private static FixMDReqRejReasonField flyweightInsufficientPermissions;
    public static final FixMDReqRejReasonField flyweightInsufficientPermissions()
    {
        if (flyweightInsufficientPermissions == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightInsufficientPermissions == null)
                {
                    flyweightInsufficientPermissions  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_InsufficientPermissions;}
                     public String  getValueDescription()                    {return text_InsufficientPermissions;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_InsufficientPermissions).append("|").append(text_InsufficientPermissions).append("]").toString();}
                     public boolean isInsufficientPermissions()              {return true;}
                     public char    charValue()                              {return InsufficientPermissions;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_InsufficientPermissions);}
                    };
                }
            }
        }

        return flyweightInsufficientPermissions;
    }

    private static FixMDReqRejReasonField flyweightUnsupportedSubscriptionRequestType;
    public static final FixMDReqRejReasonField flyweightUnsupportedSubscriptionRequestType()
    {
        if (flyweightUnsupportedSubscriptionRequestType == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightUnsupportedSubscriptionRequestType == null)
                {
                    flyweightUnsupportedSubscriptionRequestType  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_UnsupportedSubscriptionRequestType;}
                     public String  getValueDescription()                    {return text_UnsupportedSubscriptionRequestType;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnsupportedSubscriptionRequestType).append("|").append(text_UnsupportedSubscriptionRequestType).append("]").toString();}
                     public boolean isUnsupportedSubscriptionRequestType()   {return true;}
                     public char    charValue()                              {return UnsupportedSubscriptionRequestType;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnsupportedSubscriptionRequestType);}
                    };
                }
            }
        }

        return flyweightUnsupportedSubscriptionRequestType;
    }

    private static FixMDReqRejReasonField flyweightUnsupportedMarketDepth;
    public static final FixMDReqRejReasonField flyweightUnsupportedMarketDepth()
    {
        if (flyweightUnsupportedMarketDepth == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightUnsupportedMarketDepth == null)
                {
                    flyweightUnsupportedMarketDepth  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_UnsupportedMarketDepth;}
                     public String  getValueDescription()                    {return text_UnsupportedMarketDepth;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnsupportedMarketDepth).append("|").append(text_UnsupportedMarketDepth).append("]").toString();}
                     public boolean isUnsupportedMarketDepth()               {return true;}
                     public char    charValue()                              {return UnsupportedMarketDepth;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnsupportedMarketDepth);}
                    };
                }
            }
        }

        return flyweightUnsupportedMarketDepth;
    }

    private static FixMDReqRejReasonField flyweightUnsupportedMdUpdateType;
    public static final FixMDReqRejReasonField flyweightUnsupportedMdUpdateType()
    {
        if (flyweightUnsupportedMdUpdateType == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightUnsupportedMdUpdateType == null)
                {
                    flyweightUnsupportedMdUpdateType  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_UnsupportedMdUpdateType;}
                     public String  getValueDescription()                    {return text_UnsupportedMdUpdateType;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnsupportedMdUpdateType).append("|").append(text_UnsupportedMdUpdateType).append("]").toString();}
                     public boolean isUnsupportedMdUpdateType()              {return true;}
                     public char    charValue()                              {return UnsupportedMdUpdateType;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnsupportedMdUpdateType);}
                    };
                }
            }
        }

        return flyweightUnsupportedMdUpdateType;
    }

    private static FixMDReqRejReasonField flyweightUnsupportedAggregatedBook;
    public static final FixMDReqRejReasonField flyweightUnsupportedAggregatedBook()
    {
        if (flyweightUnsupportedAggregatedBook == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightUnsupportedAggregatedBook == null)
                {
                    flyweightUnsupportedAggregatedBook  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_UnsupportedAggregatedBook;}
                     public String  getValueDescription()                    {return text_UnsupportedAggregatedBook;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnsupportedAggregatedBook).append("|").append(text_UnsupportedAggregatedBook).append("]").toString();}
                     public boolean isUnsupportedAggregatedBook()            {return true;}
                     public char    charValue()                              {return UnsupportedAggregatedBook;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnsupportedAggregatedBook);}
                    };
                }
            }
        }

        return flyweightUnsupportedAggregatedBook;
    }

    private static FixMDReqRejReasonField flyweightUnsupportedMdEntryType;
    public static final FixMDReqRejReasonField flyweightUnsupportedMdEntryType()
    {
        if (flyweightUnsupportedMdEntryType == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightUnsupportedMdEntryType == null)
                {
                    flyweightUnsupportedMdEntryType  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_UnsupportedMdEntryType;}
                     public String  getValueDescription()                    {return text_UnsupportedMdEntryType;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnsupportedMdEntryType).append("|").append(text_UnsupportedMdEntryType).append("]").toString();}
                     public boolean isUnsupportedMdEntryType()               {return true;}
                     public char    charValue()                              {return UnsupportedMdEntryType;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnsupportedMdEntryType);}
                    };
                }
            }
        }

        return flyweightUnsupportedMdEntryType;
    }

    private static FixMDReqRejReasonField flyweightUnsupportedTradingSessionID;
    public static final FixMDReqRejReasonField flyweightUnsupportedTradingSessionID()
    {
        if (flyweightUnsupportedTradingSessionID == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightUnsupportedTradingSessionID == null)
                {
                    flyweightUnsupportedTradingSessionID  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_UnsupportedTradingSessionID;}
                     public String  getValueDescription()                    {return text_UnsupportedTradingSessionID;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnsupportedTradingSessionID).append("|").append(text_UnsupportedTradingSessionID).append("]").toString();}
                     public boolean isUnsupportedTradingSessionID()          {return true;}
                     public char    charValue()                              {return UnsupportedTradingSessionID;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnsupportedTradingSessionID);}
                    };
                }
            }
        }

        return flyweightUnsupportedTradingSessionID;
    }

    private static FixMDReqRejReasonField flyweightUnsupportedScope;
    public static final FixMDReqRejReasonField flyweightUnsupportedScope()
    {
        if (flyweightUnsupportedScope == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightUnsupportedScope == null)
                {
                    flyweightUnsupportedScope  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_UnsupportedScope;}
                     public String  getValueDescription()                    {return text_UnsupportedScope;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnsupportedScope).append("|").append(text_UnsupportedScope).append("]").toString();}
                     public boolean isUnsupportedScope()                     {return true;}
                     public char    charValue()                              {return UnsupportedScope;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnsupportedScope);}
                    };
                }
            }
        }

        return flyweightUnsupportedScope;
    }

    private static FixMDReqRejReasonField flyweightUnsupportedOpenCloseSettlementFlag;
    public static final FixMDReqRejReasonField flyweightUnsupportedOpenCloseSettlementFlag()
    {
        if (flyweightUnsupportedOpenCloseSettlementFlag == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightUnsupportedOpenCloseSettlementFlag == null)
                {
                    flyweightUnsupportedOpenCloseSettlementFlag  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_UnsupportedOpenCloseSettlementFlag;}
                     public String  getValueDescription()                    {return text_UnsupportedOpenCloseSettlementFlag;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnsupportedOpenCloseSettlementFlag).append("|").append(text_UnsupportedOpenCloseSettlementFlag).append("]").toString();}
                     public boolean isUnsupportedOpenCloseSettlementFlag()   {return true;}
                     public char    charValue()                              {return UnsupportedOpenCloseSettlementFlag;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnsupportedOpenCloseSettlementFlag);}
                    };
                }
            }
        }

        return flyweightUnsupportedOpenCloseSettlementFlag;
    }

    private static FixMDReqRejReasonField flyweightUnsupportedMDImplicitDelete;
    public static final FixMDReqRejReasonField flyweightUnsupportedMDImplicitDelete()
    {
        if (flyweightUnsupportedMDImplicitDelete == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightUnsupportedMDImplicitDelete == null)
                {
                    flyweightUnsupportedMDImplicitDelete  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_UnsupportedMDImplicitDelete;}
                     public String  getValueDescription()                    {return text_UnsupportedMDImplicitDelete;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnsupportedMDImplicitDelete).append("|").append(text_UnsupportedMDImplicitDelete).append("]").toString();}
                     public boolean isUnsupportedMDImplicitDelete()          {return true;}
                     public char    charValue()                              {return UnsupportedMDImplicitDelete;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnsupportedMDImplicitDelete);}
                    };
                }
            }
        }

        return flyweightUnsupportedMDImplicitDelete;
    }

    private static FixMDReqRejReasonField flyweightUseSpecifiedEngine;
    public static final FixMDReqRejReasonField flyweightUseSpecifiedEngine()
    {
        if (flyweightUseSpecifiedEngine == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightUseSpecifiedEngine == null)
                {
                    flyweightUseSpecifiedEngine  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_UseSpecifiedEngine;}
                     public String  getValueDescription()                    {return text_UseSpecifiedEngine;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UseSpecifiedEngine).append("|").append(text_UseSpecifiedEngine).append("]").toString();}
                     public boolean isUseSpecifiedEngine()                   {return true;}
                     public char    charValue()                              {return UseSpecifiedEngine;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UseSpecifiedEngine);}
                    };
                }
            }
        }

        return flyweightUseSpecifiedEngine;
    }

    private static FixMDReqRejReasonField flyweightAlreadySubscribed;
    public static final FixMDReqRejReasonField flyweightAlreadySubscribed()
    {
        if (flyweightAlreadySubscribed == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightAlreadySubscribed == null)
                {
                    flyweightAlreadySubscribed  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_AlreadySubscribed;}
                     public String  getValueDescription()                    {return text_AlreadySubscribed;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AlreadySubscribed).append("|").append(text_AlreadySubscribed).append("]").toString();}
                     public boolean isAlreadySubscribed()                    {return true;}
                     public char    charValue()                              {return AlreadySubscribed;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AlreadySubscribed);}
                    };
                }
            }
        }

        return flyweightAlreadySubscribed;
    }

    private static FixMDReqRejReasonField flyweightSubscriptionReplaced;
    public static final FixMDReqRejReasonField flyweightSubscriptionReplaced()
    {
        if (flyweightSubscriptionReplaced == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightSubscriptionReplaced == null)
                {
                    flyweightSubscriptionReplaced  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_SubscriptionReplaced;}
                     public String  getValueDescription()                    {return text_SubscriptionReplaced;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_SubscriptionReplaced).append("|").append(text_SubscriptionReplaced).append("]").toString();}
                     public boolean isSubscriptionReplaced()                 {return true;}
                     public char    charValue()                              {return SubscriptionReplaced;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_SubscriptionReplaced);}
                    };
                }
            }
        }

        return flyweightSubscriptionReplaced;
    }

    private static FixMDReqRejReasonField flyweightForcedUnsubscribe;
    public static final FixMDReqRejReasonField flyweightForcedUnsubscribe()
    {
        if (flyweightForcedUnsubscribe == null)
        {
            synchronized(FixMDReqRejReasonField.class)
            {
                if (flyweightForcedUnsubscribe == null)
                {
                    flyweightForcedUnsubscribe  = new FixMDReqRejReasonField()
                    {public boolean hasValue()                               {return true;}
                     public String  getValue()                               {return string_ForcedUnsubscribe;}
                     public String  getValueDescription()                    {return text_ForcedUnsubscribe;}
                     public String  toString()                               {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ForcedUnsubscribe).append("|").append(text_ForcedUnsubscribe).append("]").toString();}
                     public boolean isForcedUnsubscribe()                    {return true;}
                     public char    charValue()                              {return ForcedUnsubscribe;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ForcedUnsubscribe);}
                    };
                }
            }
        }

        return flyweightForcedUnsubscribe;
    }


    public boolean isUnknownSymbol()                        {return false;}
    public boolean isDuplicateMdReqId()                     {return false;}
    public boolean isInsufficientBandwidth()                {return false;}
    public boolean isInsufficientPermissions()              {return false;}
    public boolean isUnsupportedSubscriptionRequestType()   {return false;}
    public boolean isUnsupportedMarketDepth()               {return false;}
    public boolean isUnsupportedMdUpdateType()              {return false;}
    public boolean isUnsupportedAggregatedBook()            {return false;}
    public boolean isUnsupportedMdEntryType()               {return false;}
    public boolean isUnsupportedTradingSessionID()          {return false;}
    public boolean isUnsupportedScope()                     {return false;}
    public boolean isUnsupportedOpenCloseSettlementFlag()   {return false;}
    public boolean isUnsupportedMDImplicitDelete()          {return false;}
    public boolean isUseSpecifiedEngine()                   {return false;}
    public boolean isAlreadySubscribed()                    {return false;}
    public boolean isSubscriptionReplaced()                 {return false;}
    public boolean isForcedUnsubscribe()                    {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixMDReqRejReasonField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixMDReqRejReasonField create(final char param)
    {
        switch (param)
        {                                                                                           
            case UnknownSymbol:                      return flyweightUnknownSymbol();
            case DuplicateMdReqId:                   return flyweightDuplicateMdReqId();
            case InsufficientBandwidth:              return flyweightInsufficientBandwidth();
            case InsufficientPermissions:            return flyweightInsufficientPermissions();
            case UnsupportedSubscriptionRequestType: return flyweightUnsupportedSubscriptionRequestType();
            case UnsupportedMarketDepth:             return flyweightUnsupportedMarketDepth();
            case UnsupportedMdUpdateType:            return flyweightUnsupportedMdUpdateType();
            case UnsupportedAggregatedBook:          return flyweightUnsupportedAggregatedBook();
            case UnsupportedMdEntryType:             return flyweightUnsupportedMdEntryType();
            case UnsupportedTradingSessionID:        return flyweightUnsupportedTradingSessionID();
            case UnsupportedScope:                   return flyweightUnsupportedScope();
            case UnsupportedOpenCloseSettlementFlag: return flyweightUnsupportedOpenCloseSettlementFlag();
            case UnsupportedMDImplicitDelete:        return flyweightUnsupportedMDImplicitDelete();
            case UseSpecifiedEngine:                 return flyweightUseSpecifiedEngine();
            case AlreadySubscribed:                  return flyweightAlreadySubscribed();
            case SubscriptionReplaced:               return flyweightSubscriptionReplaced();
            case ForcedUnsubscribe:                  return flyweightForcedUnsubscribe();
        }
                                                                                                    
        return null;
    }                                                                                               
}
