package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixReportToExchField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [113] (known as ReportToExch).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;

public abstract class FixReportToExchField implements FixFieldIF, HasBooleanValueIF
{   
    public static final int    TagID         =  113;
    public static final String TagIDAsString = "113";
    public static final char[] TagIDAsChars  = {'1','1','3'};
    public static final String TagName       = "ReportToExch";
    public static final String TagFixType    = "BOOLEAN";

    public static final boolean Yes              = true;
    public static final String  string_Yes       = FIX_YES;
    public static final String  tagged_Yes       = TagIDAsString + EQUALS + string_Yes + SOH;
    public static final char    char_Yes         = 'Y';
    public static final char[]  taggedchars_Yes  = {'1','1','3', EQUALSchar, 'Y', SOHchar};
    public static final String  text_Yes         = "Yes";
    public static final boolean No               = false;
    public static final String  string_No        = FIX_NO;
    public static final String  tagged_No        = TagIDAsString + EQUALS + string_No + SOH;
    public static final char    char_No          = 'N';
    public static final char[]  taggedchars_No   = {'1','1','3', EQUALSchar, 'N', SOHchar};
    public static final String  text_No          = "No";

    private static FixReportToExchField flyweightYes;
    public static final FixReportToExchField flyweightYes()
    {
        if (flyweightYes == null)
        {
            synchronized(FixReportToExchField.class)
            {
                if (flyweightYes == null)
                {
                    flyweightYes  = new FixReportToExchField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Yes;}
                     public String  getValueDescription()             {return text_Yes;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Yes).append("|").append(text_Yes).append("]").toString();}
                     public boolean isYes()                           {return true;}
                     public boolean booleanValue()                    {return Yes;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Yes);}
                    };
                }
            }
        }

        return flyweightYes;
    }

    private static FixReportToExchField flyweightNo;
    public static final FixReportToExchField flyweightNo()
    {
        if (flyweightNo == null)
        {
            synchronized(FixReportToExchField.class)
            {
                if (flyweightNo == null)
                {
                    flyweightNo  = new FixReportToExchField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_No;}
                     public String  getValueDescription()             {return text_No;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_No).append("|").append(text_No).append("]").toString();}
                     public boolean isNo()                            {return true;}
                     public boolean booleanValue()                    {return No;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_No);}
                    };
                }
            }
        }

        return flyweightNo;
    }


    public boolean isYes()   {return false;}
    public boolean isNo()    {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixReportToExchField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {                                                                                           
            if (array[offset] == char_Yes) return flyweightYes();
            if (array[offset] == char_No)  return flyweightNo();
        }
        return null;
    }

    public static final char[] truefalse_Flyweight  = new char[] {FixFieldIF.FIX_YESchar, FixFieldIF.FIX_NOchar};
    public static FixReportToExchField create(boolean param)
    {
        return create(truefalse_Flyweight, param ? 0 : 1, 1);
    }                                                                                               
}
