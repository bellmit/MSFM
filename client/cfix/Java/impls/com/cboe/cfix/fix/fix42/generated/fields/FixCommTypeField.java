package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixCommTypeField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [13] (known as CommType).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixCommTypeField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  13;
    public static final String TagIDAsString = "13";
    public static final char[] TagIDAsChars  = {'1','3'};
    public static final String TagName       = "CommType";
    public static final String TagFixType    = "CHAR";

    public static final char    PerShare                = '1';
    public static final String  string_PerShare         = "1";
    public static final String  tagged_PerShare         = TagIDAsString + EQUALS + string_PerShare + SOH;
    public static final char[]  taggedchars_PerShare    = {'1','3', EQUALSchar, '1', SOHchar};
    public static final String  text_PerShare           = "PerShare";
    public static final char    Percentage              = '2';
    public static final String  string_Percentage       = "2";
    public static final String  tagged_Percentage       = TagIDAsString + EQUALS + string_Percentage + SOH;
    public static final char[]  taggedchars_Percentage  = {'1','3', EQUALSchar, '2', SOHchar};
    public static final String  text_Percentage         = "Percentage";
    public static final char    Absolute                = '3';
    public static final String  string_Absolute         = "3";
    public static final String  tagged_Absolute         = TagIDAsString + EQUALS + string_Absolute + SOH;
    public static final char[]  taggedchars_Absolute    = {'1','3', EQUALSchar, '3', SOHchar};
    public static final String  text_Absolute           = "Absolute";

    private static FixCommTypeField flyweightPerShare;
    public static final FixCommTypeField flyweightPerShare()
    {
        if (flyweightPerShare == null)
        {
            synchronized(FixCommTypeField.class)
            {
                if (flyweightPerShare == null)
                {
                    flyweightPerShare  = new FixCommTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PerShare;}
                     public String  getValueDescription()             {return text_PerShare;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PerShare).append("|").append(text_PerShare).append("]").toString();}
                     public boolean isPerShare()                      {return true;}
                     public char    charValue()                       {return PerShare;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PerShare);}
                    };
                }
            }
        }

        return flyweightPerShare;
    }

    private static FixCommTypeField flyweightPercentage;
    public static final FixCommTypeField flyweightPercentage()
    {
        if (flyweightPercentage == null)
        {
            synchronized(FixCommTypeField.class)
            {
                if (flyweightPercentage == null)
                {
                    flyweightPercentage  = new FixCommTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Percentage;}
                     public String  getValueDescription()             {return text_Percentage;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Percentage).append("|").append(text_Percentage).append("]").toString();}
                     public boolean isPercentage()                    {return true;}
                     public char    charValue()                       {return Percentage;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Percentage);}
                    };
                }
            }
        }

        return flyweightPercentage;
    }

    private static FixCommTypeField flyweightAbsolute;
    public static final FixCommTypeField flyweightAbsolute()
    {
        if (flyweightAbsolute == null)
        {
            synchronized(FixCommTypeField.class)
            {
                if (flyweightAbsolute == null)
                {
                    flyweightAbsolute  = new FixCommTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Absolute;}
                     public String  getValueDescription()             {return text_Absolute;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Absolute).append("|").append(text_Absolute).append("]").toString();}
                     public boolean isAbsolute()                      {return true;}
                     public char    charValue()                       {return Absolute;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Absolute);}
                    };
                }
            }
        }

        return flyweightAbsolute;
    }


    public boolean isPerShare()     {return false;}
    public boolean isPercentage()   {return false;}
    public boolean isAbsolute()     {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixCommTypeField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixCommTypeField create(final char param)
    {
        switch (param)
        {                                                                                           
            case PerShare:   return flyweightPerShare();
            case Percentage: return flyweightPercentage();
            case Absolute:   return flyweightAbsolute();
        }
                                                                                                    
        return null;
    }                                                                                               
}
