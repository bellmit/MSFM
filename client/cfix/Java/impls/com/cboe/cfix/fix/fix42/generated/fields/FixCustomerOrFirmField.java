package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixCustomerOrFirmField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [204] (known as CustomerOrFirm).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixCustomerOrFirmField implements FixFieldIF, HasIntValueIF
{   
    public static final int    TagID         =  204;
    public static final String TagIDAsString = "204";
    public static final char[] TagIDAsChars  = {'2','0','4'};
    public static final String TagName       = "CustomerOrFirm";
    public static final String TagFixType    = "INT";
    public static final char[]  taggedchars_value0 = {'2','0','4', EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {'2','0','4', EQUALSchar, ONEchar,  SOHchar};

    public static final int     Customer                                 = 0;
    public static final String  string_Customer                          = "0";
    public static final String  tagged_Customer                          = TagIDAsString + EQUALS + string_Customer + SOH;
    public static final char[]  taggedchars_Customer                     = {'2','0','4', EQUALSchar, '0', SOHchar};
    public static final String  text_Customer                            = "Customer";
    public static final int     Firm                                     = 1;
    public static final String  string_Firm                              = "1";
    public static final String  tagged_Firm                              = TagIDAsString + EQUALS + string_Firm + SOH;
    public static final char[]  taggedchars_Firm                         = {'2','0','4', EQUALSchar, '1', SOHchar};
    public static final String  text_Firm                                = "Firm";
    public static final int     BrokerDealer                             = 2;
    public static final String  string_BrokerDealer                      = "2";
    public static final String  tagged_BrokerDealer                      = TagIDAsString + EQUALS + string_BrokerDealer + SOH;
    public static final char[]  taggedchars_BrokerDealer                 = {'2','0','4', EQUALSchar, '2', SOHchar};
    public static final String  text_BrokerDealer                        = "BrokerDealer";
    public static final int     CustomerBrokerDealer                     = 3;
    public static final String  string_CustomerBrokerDealer              = "3";
    public static final String  tagged_CustomerBrokerDealer              = TagIDAsString + EQUALS + string_CustomerBrokerDealer + SOH;
    public static final char[]  taggedchars_CustomerBrokerDealer         = {'2','0','4', EQUALSchar, '3', SOHchar};
    public static final String  text_CustomerBrokerDealer                = "CustomerBrokerDealer";
    public static final int     MarketMaker                              = 4;
    public static final String  string_MarketMaker                       = "4";
    public static final String  tagged_MarketMaker                       = TagIDAsString + EQUALS + string_MarketMaker + SOH;
    public static final char[]  taggedchars_MarketMaker                  = {'2','0','4', EQUALSchar, '4', SOHchar};
    public static final String  text_MarketMaker                         = "MarketMaker";
    public static final int     NonMemberMarketmaker                     = 5;
    public static final String  string_NonMemberMarketmaker              = "5";
    public static final String  tagged_NonMemberMarketmaker              = TagIDAsString + EQUALS + string_NonMemberMarketmaker + SOH;
    public static final char[]  taggedchars_NonMemberMarketmaker         = {'2','0','4', EQUALSchar, '5', SOHchar};
    public static final String  text_NonMemberMarketmaker                = "NonMemberMarketmaker";
    public static final int     StockSpecialistInUnderlying              = 6;
    public static final String  string_StockSpecialistInUnderlying       = "6";
    public static final String  tagged_StockSpecialistInUnderlying       = TagIDAsString + EQUALS + string_StockSpecialistInUnderlying + SOH;
    public static final char[]  taggedchars_StockSpecialistInUnderlying  = {'2','0','4', EQUALSchar, '6', SOHchar};
    public static final String  text_StockSpecialistInUnderlying         = "StockSpecialistInUnderlying";

    private static FixCustomerOrFirmField flyweightCustomer;
    public static final FixCustomerOrFirmField flyweightCustomer()
    {
        if (flyweightCustomer == null)
        {
            synchronized(FixCustomerOrFirmField.class)
            {
                if (flyweightCustomer == null)
                {
                    flyweightCustomer  = new FixCustomerOrFirmField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Customer;}
                     public String  getValueDescription()             {return text_Customer;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Customer).append("|").append(text_Customer).append("]").toString();}
                     public boolean isCustomer()                      {return true;}
                     public int     intValue()                        {return Customer;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Customer);}
                    };
                }
            }
        }

        return flyweightCustomer;
    }

    private static FixCustomerOrFirmField flyweightFirm;
    public static final FixCustomerOrFirmField flyweightFirm()
    {
        if (flyweightFirm == null)
        {
            synchronized(FixCustomerOrFirmField.class)
            {
                if (flyweightFirm == null)
                {
                    flyweightFirm  = new FixCustomerOrFirmField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Firm;}
                     public String  getValueDescription()             {return text_Firm;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Firm).append("|").append(text_Firm).append("]").toString();}
                     public boolean isFirm()                          {return true;}
                     public int     intValue()                        {return Firm;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Firm);}
                    };
                }
            }
        }

        return flyweightFirm;
    }

    private static FixCustomerOrFirmField flyweightBrokerDealer;
    public static final FixCustomerOrFirmField flyweightBrokerDealer()
    {
        if (flyweightBrokerDealer == null)
        {
            synchronized(FixCustomerOrFirmField.class)
            {
                if (flyweightBrokerDealer == null)
                {
                    flyweightBrokerDealer  = new FixCustomerOrFirmField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_BrokerDealer;}
                     public String  getValueDescription()             {return text_BrokerDealer;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_BrokerDealer).append("|").append(text_BrokerDealer).append("]").toString();}
                     public boolean isBrokerDealer()                  {return true;}
                     public int     intValue()                        {return BrokerDealer;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_BrokerDealer);}
                    };
                }
            }
        }

        return flyweightBrokerDealer;
    }

    private static FixCustomerOrFirmField flyweightCustomerBrokerDealer;
    public static final FixCustomerOrFirmField flyweightCustomerBrokerDealer()
    {
        if (flyweightCustomerBrokerDealer == null)
        {
            synchronized(FixCustomerOrFirmField.class)
            {
                if (flyweightCustomerBrokerDealer == null)
                {
                    flyweightCustomerBrokerDealer  = new FixCustomerOrFirmField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_CustomerBrokerDealer;}
                     public String  getValueDescription()             {return text_CustomerBrokerDealer;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CustomerBrokerDealer).append("|").append(text_CustomerBrokerDealer).append("]").toString();}
                     public boolean isCustomerBrokerDealer()          {return true;}
                     public int     intValue()                        {return CustomerBrokerDealer;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_CustomerBrokerDealer);}
                    };
                }
            }
        }

        return flyweightCustomerBrokerDealer;
    }

    private static FixCustomerOrFirmField flyweightMarketMaker;
    public static final FixCustomerOrFirmField flyweightMarketMaker()
    {
        if (flyweightMarketMaker == null)
        {
            synchronized(FixCustomerOrFirmField.class)
            {
                if (flyweightMarketMaker == null)
                {
                    flyweightMarketMaker  = new FixCustomerOrFirmField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_MarketMaker;}
                     public String  getValueDescription()             {return text_MarketMaker;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_MarketMaker).append("|").append(text_MarketMaker).append("]").toString();}
                     public boolean isMarketMaker()                   {return true;}
                     public int     intValue()                        {return MarketMaker;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_MarketMaker);}
                    };
                }
            }
        }

        return flyweightMarketMaker;
    }

    private static FixCustomerOrFirmField flyweightNonMemberMarketmaker;
    public static final FixCustomerOrFirmField flyweightNonMemberMarketmaker()
    {
        if (flyweightNonMemberMarketmaker == null)
        {
            synchronized(FixCustomerOrFirmField.class)
            {
                if (flyweightNonMemberMarketmaker == null)
                {
                    flyweightNonMemberMarketmaker  = new FixCustomerOrFirmField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NonMemberMarketmaker;}
                     public String  getValueDescription()             {return text_NonMemberMarketmaker;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NonMemberMarketmaker).append("|").append(text_NonMemberMarketmaker).append("]").toString();}
                     public boolean isNonMemberMarketmaker()          {return true;}
                     public int     intValue()                        {return NonMemberMarketmaker;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NonMemberMarketmaker);}
                    };
                }
            }
        }

        return flyweightNonMemberMarketmaker;
    }

    private static FixCustomerOrFirmField flyweightStockSpecialistInUnderlying;
    public static final FixCustomerOrFirmField flyweightStockSpecialistInUnderlying()
    {
        if (flyweightStockSpecialistInUnderlying == null)
        {
            synchronized(FixCustomerOrFirmField.class)
            {
                if (flyweightStockSpecialistInUnderlying == null)
                {
                    flyweightStockSpecialistInUnderlying  = new FixCustomerOrFirmField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_StockSpecialistInUnderlying;}
                     public String  getValueDescription()             {return text_StockSpecialistInUnderlying;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_StockSpecialistInUnderlying).append("|").append(text_StockSpecialistInUnderlying).append("]").toString();}
                     public boolean isStockSpecialistInUnderlying()   {return true;}
                     public int     intValue()                        {return StockSpecialistInUnderlying;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_StockSpecialistInUnderlying);}
                    };
                }
            }
        }

        return flyweightStockSpecialistInUnderlying;
    }


    public boolean isCustomer()                      {return false;}
    public boolean isFirm()                          {return false;}
    public boolean isBrokerDealer()                  {return false;}
    public boolean isCustomerBrokerDealer()          {return false;}
    public boolean isMarketMaker()                   {return false;}
    public boolean isNonMemberMarketmaker()          {return false;}
    public boolean isStockSpecialistInUnderlying()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixCustomerOrFirmField create(char[] array, int offset, int length)
    {
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static FixCustomerOrFirmField create(final int param)
    {
        switch (param)
        {                                                                                           
            case Customer:                    return flyweightCustomer();
            case Firm:                        return flyweightFirm();
            case BrokerDealer:                return flyweightBrokerDealer();
            case CustomerBrokerDealer:        return flyweightCustomerBrokerDealer();
            case MarketMaker:                 return flyweightMarketMaker();
            case NonMemberMarketmaker:        return flyweightNonMemberMarketmaker();
            case StockSpecialistInUnderlying: return flyweightStockSpecialistInUnderlying();
        }
                                                                                                    
        return null;
    }                                                                                               
}
