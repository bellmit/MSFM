package com.cboe.cfix.fix.fix42.generated.messages;

/**
 * FixAllocationMessage.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Allocation Message.
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import java.util.*;

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.cfix.fix.fix42.field.*;
import com.cboe.cfix.fix.fix42.generated.fields.*;
import com.cboe.cfix.fix.fix42.generated.helpers.*;
import com.cboe.cfix.fix.util.*;
import com.cboe.client.util.*;
import com.cboe.infrastructureServices.foundationFramework.utilities.*;

public class FixAllocationMessage extends FixMessage
{   
    public static final String MsgType        = "J";
    public static final char   MsgTypeAsChar  = 'J';
    public static final char[] MsgTypeAsChars = {'J'};
    public static final String MsgTypeName    = "Allocation";

    public FixAllocIDField                   fieldAllocID;
    public FixAllocTransTypeField            fieldAllocTransType;
    public FixRefAllocIDField                fieldRefAllocID;
    public FixAllocLinkIDField               fieldAllocLinkID;
    public FixAllocLinkTypeField             fieldAllocLinkType;
    public FixNoOrdersField                  fieldNoOrders;
    public OrdersGroup[]                     groupOrders;
    public FixNoExecsField                   fieldNoExecs;
    public ExecsGroup[]                      groupExecs;
    public FixSideField                      fieldSide;
    public FixSymbolField                    fieldSymbol;
    public FixSymbolSfxField                 fieldSymbolSfx;
    public FixSecurityIDField                fieldSecurityID;
    public FixIDSourceField                  fieldIDSource;
    public FixSecurityTypeField              fieldSecurityType;
    public FixMaturityMonthYearField         fieldMaturityMonthYear;
    public FixMaturityDayField               fieldMaturityDay;
    public FixPutOrCallField                 fieldPutOrCall;
    public FixStrikePriceField               fieldStrikePrice;
    public FixOptAttributeField              fieldOptAttribute;
    public FixContractMultiplierField        fieldContractMultiplier;
    public FixCouponRateField                fieldCouponRate;
    public FixSecurityExchangeField          fieldSecurityExchange;
    public FixIssuerField                    fieldIssuer;
    //     FixEncodedIssuerLenField          fieldEncodedIssuerLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    //     FixEncodedIssuerField             fieldEncodedIssuer;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    public FixSecurityDescField              fieldSecurityDesc;
    //     FixEncodedSecurityDescLenField    fieldEncodedSecurityDescLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    //     FixEncodedSecurityDescField       fieldEncodedSecurityDesc;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    public FixSharesField                    fieldShares;
    public FixLastMktField                   fieldLastMkt;
    public FixTradingSessionIDField          fieldTradingSessionID;
    public FixAvgPxField                     fieldAvgPx;
    public FixCurrencyField                  fieldCurrency;
    public FixAvgPrxPrecisionField           fieldAvgPrxPrecision;
    public FixTradeDateField                 fieldTradeDate;
    public FixTransactTimeField              fieldTransactTime;
    public FixSettlmntTypField               fieldSettlmntTyp;
    public FixFutSettDateField               fieldFutSettDate;
    public FixGrossTradeAmtField             fieldGrossTradeAmt;
    public FixNetMoneyField                  fieldNetMoney;
    public FixOpenCloseField                 fieldOpenClose;
    public FixTextField                      fieldText;
    //     FixEncodedTextLenField            fieldEncodedTextLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    //     FixEncodedTextField               fieldEncodedText;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    public FixNumDaysInterestField           fieldNumDaysInterest;
    public FixAccruedInterestRateField       fieldAccruedInterestRate;
    public FixNoAllocsField                  fieldNoAllocs;
    public AllocsGroup[]                     groupAllocs;
    public List                              additionalUserFields;

    public static class OrdersGroup implements PrettyPrintWriterVisitorIF
    {   
        public FixClOrdIDField                   fieldClOrdID;
        public FixOrderIDField                   fieldOrderID;
        public FixSecondaryOrderIDField          fieldSecondaryOrderID;
        public FixListIDField                    fieldListID;
        public FixWaveNoField                    fieldWaveNo;

        public String toString()
        {
            PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

            accept(prettyPrintWriter);

            return prettyPrintWriter.toString();
        }

        public void accept(PrettyPrintWriterIF prettyPrintWriter)
        {
            prettyPrintWriter.startPrintingGroup("OrdersGroup");  
            prettyPrintWriter.printGroupItem(fieldClOrdID);
            prettyPrintWriter.printGroupItem(fieldOrderID);
            prettyPrintWriter.printGroupItem(fieldSecondaryOrderID);
            prettyPrintWriter.printGroupItem(fieldListID);
            prettyPrintWriter.printGroupItem(fieldWaveNo);

            prettyPrintWriter.endPrintingGroup();
        }                                                                                                 

        public void accept(FixMessageBuilderIF fixMessageBuilder)
        {                                                                                             
            fixMessageBuilder.append(fieldClOrdID);
            fixMessageBuilder.append(fieldOrderID);
            fixMessageBuilder.append(fieldSecondaryOrderID);
            fixMessageBuilder.append(fieldListID);
            fixMessageBuilder.append(fieldWaveNo);
        }                                                                                                 
    }

    public static class ExecsGroup implements PrettyPrintWriterVisitorIF
    {   
        public FixLastSharesField                fieldLastShares;
        public FixExecIDField                    fieldExecID;
        public FixLastPxField                    fieldLastPx;
        public FixLastCapacityField              fieldLastCapacity;

        public String toString()
        {
            PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

            accept(prettyPrintWriter);

            return prettyPrintWriter.toString();
        }

        public void accept(PrettyPrintWriterIF prettyPrintWriter)
        {
            prettyPrintWriter.startPrintingGroup("ExecsGroup");  
            prettyPrintWriter.printGroupItem(fieldLastShares);
            prettyPrintWriter.printGroupItem(fieldExecID);
            prettyPrintWriter.printGroupItem(fieldLastPx);
            prettyPrintWriter.printGroupItem(fieldLastCapacity);

            prettyPrintWriter.endPrintingGroup();
        }                                                                                                 

        public void accept(FixMessageBuilderIF fixMessageBuilder)
        {                                                                                             
            fixMessageBuilder.append(fieldLastShares);
            fixMessageBuilder.append(fieldExecID);
            fixMessageBuilder.append(fieldLastPx);
            fixMessageBuilder.append(fieldLastCapacity);
        }                                                                                                 
    }

    public static class AllocsGroup implements PrettyPrintWriterVisitorIF
    {   
        public FixAllocAccountField              fieldAllocAccount;
        public FixAllocPriceField                fieldAllocPrice;
        public FixAllocSharesField               fieldAllocShares;
        public FixProcessCodeField               fieldProcessCode;
        public FixBrokerOfCreditField            fieldBrokerOfCredit;
        public FixNotifyBrokerOfCreditField      fieldNotifyBrokerOfCredit;
        public FixAllocHandlInstField            fieldAllocHandlInst;
        public FixAllocTextField                 fieldAllocText;
        //     FixEncodedAllocTextLenField       fieldEncodedAllocTextLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        //     FixEncodedAllocTextField          fieldEncodedAllocText;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        public FixExecBrokerField                fieldExecBroker;
        public FixClientIDField                  fieldClientID;
        public FixCommissionField                fieldCommission;
        public FixCommTypeField                  fieldCommType;
        public FixAllocAvgPxField                fieldAllocAvgPx;
        public FixAllocNetMoneyField             fieldAllocNetMoney;
        public FixSettlCurrAmtField              fieldSettlCurrAmt;
        public FixSettlCurrencyField             fieldSettlCurrency;
        public FixSettlCurrFxRateField           fieldSettlCurrFxRate;
        public FixSettlCurrFxRateCalcField       fieldSettlCurrFxRateCalc;
        public FixAccruedInterestAmtField        fieldAccruedInterestAmt;
        public FixSettlInstModeField             fieldSettlInstMode;
        public FixNoMiscFeesField                fieldNoMiscFees;
        public MiscFeesGroup[]                   groupMiscFees;

        public String toString()
        {
            PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

            accept(prettyPrintWriter);

            return prettyPrintWriter.toString();
        }

        public void accept(PrettyPrintWriterIF prettyPrintWriter)
        {
            prettyPrintWriter.startPrintingGroup("AllocsGroup");  
            prettyPrintWriter.printGroupItem(fieldAllocAccount);
            prettyPrintWriter.printGroupItem(fieldAllocPrice);
            prettyPrintWriter.printGroupItem(fieldAllocShares);
            prettyPrintWriter.printGroupItem(fieldProcessCode);
            prettyPrintWriter.printGroupItem(fieldBrokerOfCredit);
            prettyPrintWriter.printGroupItem(fieldNotifyBrokerOfCredit);
            prettyPrintWriter.printGroupItem(fieldAllocHandlInst);
            prettyPrintWriter.printGroupItem(fieldAllocText);
            prettyPrintWriter.printGroupItem(fieldExecBroker);
            prettyPrintWriter.printGroupItem(fieldClientID);
            prettyPrintWriter.printGroupItem(fieldCommission);
            prettyPrintWriter.printGroupItem(fieldCommType);
            prettyPrintWriter.printGroupItem(fieldAllocAvgPx);
            prettyPrintWriter.printGroupItem(fieldAllocNetMoney);
            prettyPrintWriter.printGroupItem(fieldSettlCurrAmt);
            prettyPrintWriter.printGroupItem(fieldSettlCurrency);
            prettyPrintWriter.printGroupItem(fieldSettlCurrFxRate);
            prettyPrintWriter.printGroupItem(fieldSettlCurrFxRateCalc);
            prettyPrintWriter.printGroupItem(fieldAccruedInterestAmt);
            prettyPrintWriter.printGroupItem(fieldSettlInstMode);
            prettyPrintWriter.printGroupItem(fieldNoMiscFees);

            if (groupMiscFees != null)
            {
                for (int i = 0; i < groupMiscFees.length; i++)
                {
                    if (groupMiscFees[i] != null) groupMiscFees[i].accept(prettyPrintWriter);
                }
            }                                                                                             

            prettyPrintWriter.endPrintingGroup();
        }                                                                                                 

        public void accept(FixMessageBuilderIF fixMessageBuilder)
        {                                                                                             
            fixMessageBuilder.append(fieldAllocAccount);
            fixMessageBuilder.append(fieldAllocPrice);
            fixMessageBuilder.append(fieldAllocShares);
            fixMessageBuilder.append(fieldProcessCode);
            fixMessageBuilder.append(fieldBrokerOfCredit);
            fixMessageBuilder.append(fieldNotifyBrokerOfCredit);
            fixMessageBuilder.append(fieldAllocHandlInst);
            fixMessageBuilder.append(fieldAllocText);
            fixMessageBuilder.append(fieldExecBroker);
            fixMessageBuilder.append(fieldClientID);
            fixMessageBuilder.append(fieldCommission);
            fixMessageBuilder.append(fieldCommType);
            fixMessageBuilder.append(fieldAllocAvgPx);
            fixMessageBuilder.append(fieldAllocNetMoney);
            fixMessageBuilder.append(fieldSettlCurrAmt);
            fixMessageBuilder.append(fieldSettlCurrency);
            fixMessageBuilder.append(fieldSettlCurrFxRate);
            fixMessageBuilder.append(fieldSettlCurrFxRateCalc);
            fixMessageBuilder.append(fieldAccruedInterestAmt);
            fixMessageBuilder.append(fieldSettlInstMode);
            fixMessageBuilder.append(fieldNoMiscFees);

            if (groupMiscFees != null)
            {
                for (int i = 0; i < groupMiscFees.length; i++)
                {
                    if (groupMiscFees[i] != null) groupMiscFees[i].accept(fixMessageBuilder);
                }
            }                                                                                             
        }                                                                                                 
    }

    public static class MiscFeesGroup implements PrettyPrintWriterVisitorIF
    {   
        public FixMiscFeeAmtField                fieldMiscFeeAmt;
        public FixMiscFeeCurrField               fieldMiscFeeCurr;
        public FixMiscFeeTypeField               fieldMiscFeeType;

        public String toString()
        {
            PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

            accept(prettyPrintWriter);

            return prettyPrintWriter.toString();
        }

        public void accept(PrettyPrintWriterIF prettyPrintWriter)
        {
            prettyPrintWriter.startPrintingGroup("MiscFeesGroup");  
            prettyPrintWriter.printGroupItem(fieldMiscFeeAmt);
            prettyPrintWriter.printGroupItem(fieldMiscFeeCurr);
            prettyPrintWriter.printGroupItem(fieldMiscFeeType);

            prettyPrintWriter.endPrintingGroup();
        }                                                                                                 

        public void accept(FixMessageBuilderIF fixMessageBuilder)
        {                                                                                             
            fixMessageBuilder.append(fieldMiscFeeAmt);
            fixMessageBuilder.append(fieldMiscFeeCurr);
            fixMessageBuilder.append(fieldMiscFeeType);
        }                                                                                                 
    }

    public FixAllocationMessage()
    {

    }

    public boolean isFixAllocationMessage() {return true;}
    public String getMsgType()        {return MsgType;}
    public char   getMsgTypeAsChar()  {return MsgTypeAsChar;}
    public char[] getMsgTypeAsChars() {return MsgTypeAsChars;}
    public String getMsgTypeName()    {return MsgTypeName;}
    
    public String toString()
    {
        PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

        accept(prettyPrintWriter);

        return prettyPrintWriter.toString();
    }

    public void accept(PrettyPrintWriterIF prettyPrintWriter)
    {
        prettyPrintWriter.startPrintingGroup(MsgTypeName);

        super.accept(prettyPrintWriter);
                                                                                                      
        prettyPrintWriter.printGroupItem(fieldAllocID);
        prettyPrintWriter.printGroupItem(fieldAllocTransType);
        prettyPrintWriter.printGroupItem(fieldRefAllocID);
        prettyPrintWriter.printGroupItem(fieldAllocLinkID);
        prettyPrintWriter.printGroupItem(fieldAllocLinkType);
        prettyPrintWriter.printGroupItem(fieldNoOrders);
        if (groupOrders != null)
        {
            for (int i = 0; i < groupOrders.length; i++)
            {
                if (groupOrders[i] != null) groupOrders[i].accept(prettyPrintWriter);
            }
        }                                                                                             
        prettyPrintWriter.printGroupItem(fieldNoExecs);
        if (groupExecs != null)
        {
            for (int i = 0; i < groupExecs.length; i++)
            {
                if (groupExecs[i] != null) groupExecs[i].accept(prettyPrintWriter);
            }
        }                                                                                             
        prettyPrintWriter.printGroupItem(fieldSide);
        prettyPrintWriter.printGroupItem(fieldSymbol);
        prettyPrintWriter.printGroupItem(fieldSymbolSfx);
        prettyPrintWriter.printGroupItem(fieldSecurityID);
        prettyPrintWriter.printGroupItem(fieldIDSource);
        prettyPrintWriter.printGroupItem(fieldSecurityType);
        prettyPrintWriter.printGroupItem(fieldMaturityMonthYear);
        prettyPrintWriter.printGroupItem(fieldMaturityDay);
        prettyPrintWriter.printGroupItem(fieldPutOrCall);
        prettyPrintWriter.printGroupItem(fieldStrikePrice);
        prettyPrintWriter.printGroupItem(fieldOptAttribute);
        prettyPrintWriter.printGroupItem(fieldContractMultiplier);
        prettyPrintWriter.printGroupItem(fieldCouponRate);
        prettyPrintWriter.printGroupItem(fieldSecurityExchange);
        prettyPrintWriter.printGroupItem(fieldIssuer);
        prettyPrintWriter.printGroupItem(fieldSecurityDesc);
        prettyPrintWriter.printGroupItem(fieldShares);
        prettyPrintWriter.printGroupItem(fieldLastMkt);
        prettyPrintWriter.printGroupItem(fieldTradingSessionID);
        prettyPrintWriter.printGroupItem(fieldAvgPx);
        prettyPrintWriter.printGroupItem(fieldCurrency);
        prettyPrintWriter.printGroupItem(fieldAvgPrxPrecision);
        prettyPrintWriter.printGroupItem(fieldTradeDate);
        prettyPrintWriter.printGroupItem(fieldTransactTime);
        prettyPrintWriter.printGroupItem(fieldSettlmntTyp);
        prettyPrintWriter.printGroupItem(fieldFutSettDate);
        prettyPrintWriter.printGroupItem(fieldGrossTradeAmt);
        prettyPrintWriter.printGroupItem(fieldNetMoney);
        prettyPrintWriter.printGroupItem(fieldOpenClose);
        prettyPrintWriter.printGroupItem(fieldText);
        prettyPrintWriter.printGroupItem(fieldNumDaysInterest);
        prettyPrintWriter.printGroupItem(fieldAccruedInterestRate);
        prettyPrintWriter.printGroupItem(fieldNoAllocs);
        if (groupAllocs != null)
        {
            for (int i = 0; i < groupAllocs.length; i++)
            {
                if (groupAllocs[i] != null) groupAllocs[i].accept(prettyPrintWriter);
            }
        }                                                                                             

        prettyPrintWriter.endPrintingGroup();
    }                                                                                                 

    public void accept(FixMessageBuilderIF fixMessageBuilder)
    {
        super.accept(fixMessageBuilder);
                                                                                                      
        fixMessageBuilder.append(fieldAllocID);
        fixMessageBuilder.append(fieldAllocTransType);
        fixMessageBuilder.append(fieldRefAllocID);
        fixMessageBuilder.append(fieldAllocLinkID);
        fixMessageBuilder.append(fieldAllocLinkType);
        fixMessageBuilder.append(fieldNoOrders);
        if (groupOrders != null)
        {
            for (int i = 0; i < groupOrders.length; i++)
            {
                if (groupOrders[i] != null) groupOrders[i].accept(fixMessageBuilder);
            }
        }                                                                                             
        fixMessageBuilder.append(fieldNoExecs);
        if (groupExecs != null)
        {
            for (int i = 0; i < groupExecs.length; i++)
            {
                if (groupExecs[i] != null) groupExecs[i].accept(fixMessageBuilder);
            }
        }                                                                                             
        fixMessageBuilder.append(fieldSide);
        fixMessageBuilder.append(fieldSymbol);
        fixMessageBuilder.append(fieldSymbolSfx);
        fixMessageBuilder.append(fieldSecurityID);
        fixMessageBuilder.append(fieldIDSource);
        fixMessageBuilder.append(fieldSecurityType);
        fixMessageBuilder.append(fieldMaturityMonthYear);
        fixMessageBuilder.append(fieldMaturityDay);
        fixMessageBuilder.append(fieldPutOrCall);
        fixMessageBuilder.append(fieldStrikePrice);
        fixMessageBuilder.append(fieldOptAttribute);
        fixMessageBuilder.append(fieldContractMultiplier);
        fixMessageBuilder.append(fieldCouponRate);
        fixMessageBuilder.append(fieldSecurityExchange);
        fixMessageBuilder.append(fieldIssuer);
        fixMessageBuilder.append(fieldSecurityDesc);
        fixMessageBuilder.append(fieldShares);
        fixMessageBuilder.append(fieldLastMkt);
        fixMessageBuilder.append(fieldTradingSessionID);
        fixMessageBuilder.append(fieldAvgPx);
        fixMessageBuilder.append(fieldCurrency);
        fixMessageBuilder.append(fieldAvgPrxPrecision);
        fixMessageBuilder.append(fieldTradeDate);
        fixMessageBuilder.append(fieldTransactTime);
        fixMessageBuilder.append(fieldSettlmntTyp);
        fixMessageBuilder.append(fieldFutSettDate);
        fixMessageBuilder.append(fieldGrossTradeAmt);
        fixMessageBuilder.append(fieldNetMoney);
        fixMessageBuilder.append(fieldOpenClose);
        fixMessageBuilder.append(fieldText);
        fixMessageBuilder.append(fieldNumDaysInterest);
        fixMessageBuilder.append(fieldAccruedInterestRate);
        fixMessageBuilder.append(fieldNoAllocs);
        if (groupAllocs != null)
        {
            for (int i = 0; i < groupAllocs.length; i++)
            {
                if (groupAllocs[i] != null) groupAllocs[i].accept(fixMessageBuilder);
            }
        }                                                                                             

        if (additionalUserFields != null)
        {
            for (Iterator iterator = additionalUserFields.iterator(); iterator.hasNext(); )
            {
                fixMessageBuilder.append((FixFieldIF) iterator.next());
            }
        }
    }                                                                                                 

    public PackedIntArrayIF validate(FixPacketIF fixPacket, PackedIntArrayIF foundErrors, int validationFlags, int debugFlags)
    {
        if (fieldSenderCompID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSenderCompIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldTargetCompID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixTargetCompIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldMsgSeqNum == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixMsgSeqNumField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldSendingTime == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSendingTimeField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldAllocID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixAllocIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldAllocTransType == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixAllocTransTypeField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldNoOrders == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixNoOrdersField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        for (int i = 0; i < groupOrders.length; i++)
        {
            if (groupOrders[i].fieldClOrdID == null)
            {
                foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixClOrdIDField.TagID));
                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                {
                    return foundErrors;
                }
            }
    
        }
               
        if (fieldSide == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSideField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldSymbol == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSymbolField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldShares == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSharesField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldAvgPx == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixAvgPxField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldTradeDate == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixTradeDateField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldNoAllocs == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixNoAllocsField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        for (int i = 0; i < groupAllocs.length; i++)
        {
            if (groupAllocs[i].fieldAllocAccount == null)
            {
                foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixAllocAccountField.TagID));
                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                {
                    return foundErrors;
                }
            }
    
            if (groupAllocs[i].fieldAllocShares == null)
            {
                foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixAllocSharesField.TagID));
                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                {
                    return foundErrors;
                }
            }
    
            if (groupAllocs[i].groupMiscFees != null)
            {
                for (int j = 0; j < groupAllocs[i].groupMiscFees.length; j++)
                {
                    if (groupAllocs[i].groupMiscFees[j].fieldMiscFeeAmt == null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixMiscFeeAmtField.TagID));
                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }
                    }
                }
            }
    
            if (groupAllocs[i].groupMiscFees != null)
            {
                for (int j = 0; j < groupAllocs[i].groupMiscFees.length; j++)
                {
                    if (groupAllocs[i].groupMiscFees[j].fieldMiscFeeCurr == null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixMiscFeeCurrField.TagID));
                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }
                    }
                }
            }
    
            if (groupAllocs[i].groupMiscFees != null)
            {
                for (int j = 0; j < groupAllocs[i].groupMiscFees.length; j++)
                {
                    if (groupAllocs[i].groupMiscFees[j].fieldMiscFeeType == null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixMiscFeeTypeField.TagID));
                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }
                    }
                }
            }
    
        }
               
        return foundErrors;
    }

    private static final int STATE_OrdersGroup = 2;
    private static final int STATE_ExecsGroup = 3;
    private static final int STATE_AllocsGroup = 4;
    private static final int STATE_MiscFeesGroup = 5;

    private String toStateString(int state)
    {
        switch (state)
        {
            case STATE_Header: return "State[Header]";
            case STATE_Field:  return "State[Field]";
            case STATE_OrdersGroup: return "State[OrdersGroup]";
            case STATE_ExecsGroup: return "State[ExecsGroup]";
            case STATE_AllocsGroup: return "State[AllocsGroup]";
            case STATE_MiscFeesGroup: return "State[MiscFeesGroup]";
        }

        return "???";
    }
    
    public PackedIntArrayIF build(FixPacketIF fixPacket, PackedIntArrayIF foundErrors, int validationFlags, int debugFlags)
    {
        char[] array          = fixPacket.getArray();
        int    numTags        = fixPacket.getTagPositionLength();
        int    currentState   = STATE_Header;
        int    tag;
        int    offset;
        int    length;
        int    numInGroup;
        int    group;
        int    currentPosition;
        int    current_groupOrders = 0; // this group does not have a starting field, so we want to populate it as we find its objects
        int    current_groupExecs = 0; // this group does not have a starting field, so we want to populate it as we find its objects
        int    current_groupAllocs = -1; // this group has a starting field which we have to find first
        int    current_groupMiscFees = 0; // this group does not have a starting field, so we want to populate it as we find its objects

        for (currentPosition = 0; currentPosition < numTags; currentPosition++)
        {
            if (!foundErrors.isEmpty() && BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                break;
            }

            tag    = fixPacket.getTag(currentPosition);
            offset = fixPacket.getValueOffset(currentPosition);
            length = fixPacket.getValueLength(currentPosition);

            if ((BitHelper.isBitMaskSet(debugFlags, FixSessionDebugIF.MESSAGE_SHOW_BUILD_TRANSITIONS)))
            {
                String threadName = Thread.currentThread().getName();
                String stateString = toStateString(currentState);
                StringBuilder sb = new StringBuilder(threadName.length()+stateString.length()+50);
                if (currentPosition > 0)
                {
                    sb.append(threadName).append(" --> ").append(stateString);
                    Log.information(sb.toString());
                    sb.setLength(0);
                }

                sb.append(threadName).append("Tag[").append(currentPosition).append("] = ").append(FixFieldHelper.getTagName(tag)).append("(").append(tag).append(") ").append(stateString);
                Log.information(sb.toString());
            }

            switch (tag)
            {
                case FixAllocIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldAllocID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldAllocID = FixAllocIDField.create(array, offset, length);
                    if (fieldAllocID == null || !fieldAllocID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixAllocTransTypeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldAllocTransType != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldAllocTransType = FixAllocTransTypeField.create(array, offset, length);
                    if (fieldAllocTransType == null || !fieldAllocTransType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixRefAllocIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldRefAllocID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldRefAllocID = FixRefAllocIDField.create(array, offset, length);
                    if (fieldRefAllocID == null || !fieldRefAllocID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixAllocLinkIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldAllocLinkID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldAllocLinkID = FixAllocLinkIDField.create(array, offset, length);
                    if (fieldAllocLinkID == null || !fieldAllocLinkID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixAllocLinkTypeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldAllocLinkType != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldAllocLinkType = FixAllocLinkTypeField.create(array, offset, length);
                    if (fieldAllocLinkType == null || !fieldAllocLinkType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSideField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSide != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSide = FixSideField.create(array, offset, length);
                    if (fieldSide == null || !fieldSide.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSymbolField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSymbol != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSymbol = FixSymbolField.create(array, offset, length);
                    if (fieldSymbol == null || !fieldSymbol.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSymbolSfxField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSymbolSfx != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSymbolSfx = FixSymbolSfxField.create(array, offset, length);
                    if (fieldSymbolSfx == null || !fieldSymbolSfx.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSecurityIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSecurityID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSecurityID = FixSecurityIDField.create(array, offset, length);
                    if (fieldSecurityID == null || !fieldSecurityID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixIDSourceField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldIDSource != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldIDSource = FixIDSourceField.create(array, offset, length);
                    if (fieldIDSource == null || !fieldIDSource.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSecurityTypeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSecurityType != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSecurityType = FixSecurityTypeField.create(array, offset, length);
                    if (fieldSecurityType == null || !fieldSecurityType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixMaturityMonthYearField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldMaturityMonthYear != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldMaturityMonthYear = FixMaturityMonthYearField.create(array, offset, length);
                    if (fieldMaturityMonthYear == null || !fieldMaturityMonthYear.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixMaturityDayField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldMaturityDay != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldMaturityDay = FixMaturityDayField.create(array, offset, length);
                    if (fieldMaturityDay == null || !fieldMaturityDay.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixPutOrCallField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldPutOrCall != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldPutOrCall = FixPutOrCallField.create(array, offset, length);
                    if (fieldPutOrCall == null || !fieldPutOrCall.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixStrikePriceField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldStrikePrice != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldStrikePrice = FixStrikePriceField.create(array, offset, length);
                    if (fieldStrikePrice == null || !fieldStrikePrice.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixOptAttributeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldOptAttribute != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldOptAttribute = FixOptAttributeField.create(array, offset, length);
                    if (fieldOptAttribute == null || !fieldOptAttribute.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixContractMultiplierField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldContractMultiplier != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldContractMultiplier = FixContractMultiplierField.create(array, offset, length);
                    if (fieldContractMultiplier == null || !fieldContractMultiplier.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixCouponRateField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldCouponRate != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldCouponRate = FixCouponRateField.create(array, offset, length);
                    if (fieldCouponRate == null || !fieldCouponRate.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSecurityExchangeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSecurityExchange != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSecurityExchange = FixSecurityExchangeField.create(array, offset, length);
                    if (fieldSecurityExchange == null || !fieldSecurityExchange.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixIssuerField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldIssuer != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldIssuer = FixIssuerField.create(array, offset, length);
                    if (fieldIssuer == null || !fieldIssuer.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixEncodedIssuerLenField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedIssuerLenField unusedByCboeField = FixEncodedIssuerLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixEncodedIssuerField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedIssuerField unusedByCboeField = FixEncodedIssuerField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixSecurityDescField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSecurityDesc != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSecurityDesc = FixSecurityDescField.create(array, offset, length);
                    if (fieldSecurityDesc == null || !fieldSecurityDesc.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixEncodedSecurityDescLenField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedSecurityDescLenField unusedByCboeField = FixEncodedSecurityDescLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixEncodedSecurityDescField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedSecurityDescField unusedByCboeField = FixEncodedSecurityDescField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixSharesField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldShares != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldShares = FixSharesField.create(array, offset, length);
                    if (fieldShares == null || !fieldShares.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixLastMktField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldLastMkt != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldLastMkt = FixLastMktField.create(array, offset, length);
                    if (fieldLastMkt == null || !fieldLastMkt.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixTradingSessionIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldTradingSessionID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldTradingSessionID = FixTradingSessionIDField.create(array, offset, length);
                    if (fieldTradingSessionID == null || !fieldTradingSessionID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixAvgPxField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldAvgPx != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldAvgPx = FixAvgPxField.create(array, offset, length);
                    if (fieldAvgPx == null || !fieldAvgPx.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixCurrencyField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldCurrency != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldCurrency = FixCurrencyField.create(array, offset, length);
                    if (fieldCurrency == null || !fieldCurrency.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixAvgPrxPrecisionField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldAvgPrxPrecision != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldAvgPrxPrecision = FixAvgPrxPrecisionField.create(array, offset, length);
                    if (fieldAvgPrxPrecision == null || !fieldAvgPrxPrecision.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixTradeDateField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldTradeDate != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldTradeDate = FixTradeDateField.create(array, offset, length);
                    if (fieldTradeDate == null || !fieldTradeDate.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixTransactTimeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldTransactTime != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldTransactTime = FixTransactTimeField.create(array, offset, length);
                    if (fieldTransactTime == null || !fieldTransactTime.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSettlmntTypField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSettlmntTyp != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSettlmntTyp = FixSettlmntTypField.create(array, offset, length);
                    if (fieldSettlmntTyp == null || !fieldSettlmntTyp.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixFutSettDateField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldFutSettDate != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldFutSettDate = FixFutSettDateField.create(array, offset, length);
                    if (fieldFutSettDate == null || !fieldFutSettDate.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixGrossTradeAmtField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldGrossTradeAmt != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldGrossTradeAmt = FixGrossTradeAmtField.create(array, offset, length);
                    if (fieldGrossTradeAmt == null || !fieldGrossTradeAmt.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixNetMoneyField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldNetMoney != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldNetMoney = FixNetMoneyField.create(array, offset, length);
                    if (fieldNetMoney == null || !fieldNetMoney.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixOpenCloseField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldOpenClose != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldOpenClose = FixOpenCloseField.create(array, offset, length);
                    if (fieldOpenClose == null || !fieldOpenClose.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixTextField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldText != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldText = FixTextField.create(array, offset, length);
                    if (fieldText == null || !fieldText.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixEncodedTextLenField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedTextLenField unusedByCboeField = FixEncodedTextLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixEncodedTextField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedTextField unusedByCboeField = FixEncodedTextField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixNumDaysInterestField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldNumDaysInterest != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldNumDaysInterest = FixNumDaysInterestField.create(array, offset, length);
                    if (fieldNumDaysInterest == null || !fieldNumDaysInterest.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixAccruedInterestRateField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldAccruedInterestRate != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldAccruedInterestRate = FixAccruedInterestRateField.create(array, offset, length);
                    if (fieldAccruedInterestRate == null || !fieldAccruedInterestRate.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixNoOrdersField.TagID:
                {
                    if (fieldNoOrders != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupOrders != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldNoOrders = FixNoOrdersField.create(array, offset, length);
                    if (fieldNoOrders == null || !fieldNoOrders.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    currentState = STATE_OrdersGroup;

                    numInGroup = fieldNoOrders.intValue();

                    groupOrders = new OrdersGroup[numInGroup];
                    for (group = 0; group < numInGroup; group++)
                    {
                        groupOrders[group] = new OrdersGroup();
                    }

                    continue;
                }
                case FixNoExecsField.TagID:
                {
                    if (fieldNoExecs != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupExecs != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldNoExecs = FixNoExecsField.create(array, offset, length);
                    if (fieldNoExecs == null || !fieldNoExecs.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    currentState = STATE_ExecsGroup;

                    numInGroup = fieldNoExecs.intValue();

                    groupExecs = new ExecsGroup[numInGroup];
                    for (group = 0; group < numInGroup; group++)
                    {
                        groupExecs[group] = new ExecsGroup();
                    }

                    continue;
                }
                case FixNoAllocsField.TagID:
                {
                    if (fieldNoAllocs != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldNoAllocs = FixNoAllocsField.create(array, offset, length);
                    if (fieldNoAllocs == null || !fieldNoAllocs.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    currentState = STATE_AllocsGroup;

                    numInGroup = fieldNoAllocs.intValue();

                    groupAllocs = new AllocsGroup[numInGroup];
                    for (group = 0; group < numInGroup; group++)
                    {
                        groupAllocs[group] = new AllocsGroup();
                    }

                    continue;
                }
                case FixClOrdIDField.TagID:
                {
                    if (currentState != STATE_OrdersGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupOrders >= groupOrders.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupOrders[current_groupOrders].fieldClOrdID != null)
                    {
                        current_groupOrders++;
                    }

                    groupOrders[current_groupOrders].fieldClOrdID = FixClOrdIDField.create(array, offset, length);
                    if (groupOrders[current_groupOrders].fieldClOrdID == null || !groupOrders[current_groupOrders].fieldClOrdID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixOrderIDField.TagID:
                {
                    if (currentState != STATE_OrdersGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupOrders >= groupOrders.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupOrders[current_groupOrders].fieldOrderID != null)
                    {
                        current_groupOrders++;
                    }

                    groupOrders[current_groupOrders].fieldOrderID = FixOrderIDField.create(array, offset, length);
                    if (groupOrders[current_groupOrders].fieldOrderID == null || !groupOrders[current_groupOrders].fieldOrderID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSecondaryOrderIDField.TagID:
                {
                    if (currentState != STATE_OrdersGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupOrders >= groupOrders.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupOrders[current_groupOrders].fieldSecondaryOrderID != null)
                    {
                        current_groupOrders++;
                    }

                    groupOrders[current_groupOrders].fieldSecondaryOrderID = FixSecondaryOrderIDField.create(array, offset, length);
                    if (groupOrders[current_groupOrders].fieldSecondaryOrderID == null || !groupOrders[current_groupOrders].fieldSecondaryOrderID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixListIDField.TagID:
                {
                    if (currentState != STATE_OrdersGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupOrders >= groupOrders.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupOrders[current_groupOrders].fieldListID != null)
                    {
                        current_groupOrders++;
                    }

                    groupOrders[current_groupOrders].fieldListID = FixListIDField.create(array, offset, length);
                    if (groupOrders[current_groupOrders].fieldListID == null || !groupOrders[current_groupOrders].fieldListID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixWaveNoField.TagID:
                {
                    if (currentState != STATE_OrdersGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupOrders >= groupOrders.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupOrders[current_groupOrders].fieldWaveNo != null)
                    {
                        current_groupOrders++;
                    }

                    groupOrders[current_groupOrders].fieldWaveNo = FixWaveNoField.create(array, offset, length);
                    if (groupOrders[current_groupOrders].fieldWaveNo == null || !groupOrders[current_groupOrders].fieldWaveNo.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixLastSharesField.TagID:
                {
                    if (currentState != STATE_ExecsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupExecs >= groupExecs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupExecs[current_groupExecs].fieldLastShares != null)
                    {
                        current_groupExecs++;
                    }

                    groupExecs[current_groupExecs].fieldLastShares = FixLastSharesField.create(array, offset, length);
                    if (groupExecs[current_groupExecs].fieldLastShares == null || !groupExecs[current_groupExecs].fieldLastShares.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixExecIDField.TagID:
                {
                    if (currentState != STATE_ExecsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupExecs >= groupExecs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupExecs[current_groupExecs].fieldExecID != null)
                    {
                        current_groupExecs++;
                    }

                    groupExecs[current_groupExecs].fieldExecID = FixExecIDField.create(array, offset, length);
                    if (groupExecs[current_groupExecs].fieldExecID == null || !groupExecs[current_groupExecs].fieldExecID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixLastPxField.TagID:
                {
                    if (currentState != STATE_ExecsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupExecs >= groupExecs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupExecs[current_groupExecs].fieldLastPx != null)
                    {
                        current_groupExecs++;
                    }

                    groupExecs[current_groupExecs].fieldLastPx = FixLastPxField.create(array, offset, length);
                    if (groupExecs[current_groupExecs].fieldLastPx == null || !groupExecs[current_groupExecs].fieldLastPx.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixLastCapacityField.TagID:
                {
                    if (currentState != STATE_ExecsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupExecs >= groupExecs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupExecs[current_groupExecs].fieldLastCapacity != null)
                    {
                        current_groupExecs++;
                    }

                    groupExecs[current_groupExecs].fieldLastCapacity = FixLastCapacityField.create(array, offset, length);
                    if (groupExecs[current_groupExecs].fieldLastCapacity == null || !groupExecs[current_groupExecs].fieldLastCapacity.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixAllocAccountField.TagID:
                {

                    if (currentState != STATE_AllocsGroup &&
                        currentState != STATE_MiscFeesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    current_groupAllocs++;

                    currentState = STATE_AllocsGroup;

                    if (current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldAllocAccount != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldAllocAccount = FixAllocAccountField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldAllocAccount == null || !groupAllocs[current_groupAllocs].fieldAllocAccount.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixAllocPriceField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldAllocPrice != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldAllocPrice = FixAllocPriceField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldAllocPrice == null || !groupAllocs[current_groupAllocs].fieldAllocPrice.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixAllocSharesField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldAllocShares != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldAllocShares = FixAllocSharesField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldAllocShares == null || !groupAllocs[current_groupAllocs].fieldAllocShares.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixProcessCodeField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldProcessCode != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldProcessCode = FixProcessCodeField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldProcessCode == null || !groupAllocs[current_groupAllocs].fieldProcessCode.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixBrokerOfCreditField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldBrokerOfCredit != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldBrokerOfCredit = FixBrokerOfCreditField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldBrokerOfCredit == null || !groupAllocs[current_groupAllocs].fieldBrokerOfCredit.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixNotifyBrokerOfCreditField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldNotifyBrokerOfCredit != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldNotifyBrokerOfCredit = FixNotifyBrokerOfCreditField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldNotifyBrokerOfCredit == null || !groupAllocs[current_groupAllocs].fieldNotifyBrokerOfCredit.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixAllocHandlInstField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldAllocHandlInst != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldAllocHandlInst = FixAllocHandlInstField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldAllocHandlInst == null || !groupAllocs[current_groupAllocs].fieldAllocHandlInst.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixAllocTextField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldAllocText != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldAllocText = FixAllocTextField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldAllocText == null || !groupAllocs[current_groupAllocs].fieldAllocText.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixEncodedAllocTextLenField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedAllocTextLenField unusedByCboeField = FixEncodedAllocTextLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixEncodedAllocTextField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedAllocTextField unusedByCboeField = FixEncodedAllocTextField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixExecBrokerField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldExecBroker != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldExecBroker = FixExecBrokerField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldExecBroker == null || !groupAllocs[current_groupAllocs].fieldExecBroker.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixClientIDField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldClientID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldClientID = FixClientIDField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldClientID == null || !groupAllocs[current_groupAllocs].fieldClientID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixCommissionField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldCommission != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldCommission = FixCommissionField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldCommission == null || !groupAllocs[current_groupAllocs].fieldCommission.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixCommTypeField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldCommType != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldCommType = FixCommTypeField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldCommType == null || !groupAllocs[current_groupAllocs].fieldCommType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixAllocAvgPxField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldAllocAvgPx != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldAllocAvgPx = FixAllocAvgPxField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldAllocAvgPx == null || !groupAllocs[current_groupAllocs].fieldAllocAvgPx.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixAllocNetMoneyField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldAllocNetMoney != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldAllocNetMoney = FixAllocNetMoneyField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldAllocNetMoney == null || !groupAllocs[current_groupAllocs].fieldAllocNetMoney.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSettlCurrAmtField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldSettlCurrAmt != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldSettlCurrAmt = FixSettlCurrAmtField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldSettlCurrAmt == null || !groupAllocs[current_groupAllocs].fieldSettlCurrAmt.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSettlCurrencyField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldSettlCurrency != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldSettlCurrency = FixSettlCurrencyField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldSettlCurrency == null || !groupAllocs[current_groupAllocs].fieldSettlCurrency.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSettlCurrFxRateField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldSettlCurrFxRate != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldSettlCurrFxRate = FixSettlCurrFxRateField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldSettlCurrFxRate == null || !groupAllocs[current_groupAllocs].fieldSettlCurrFxRate.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSettlCurrFxRateCalcField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldSettlCurrFxRateCalc != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldSettlCurrFxRateCalc = FixSettlCurrFxRateCalcField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldSettlCurrFxRateCalc == null || !groupAllocs[current_groupAllocs].fieldSettlCurrFxRateCalc.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixAccruedInterestAmtField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldAccruedInterestAmt != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldAccruedInterestAmt = FixAccruedInterestAmtField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldAccruedInterestAmt == null || !groupAllocs[current_groupAllocs].fieldAccruedInterestAmt.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSettlInstModeField.TagID:
                {
                    if (currentState != STATE_AllocsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldSettlInstMode != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldSettlInstMode = FixSettlInstModeField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldSettlInstMode == null || !groupAllocs[current_groupAllocs].fieldSettlInstMode.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixNoMiscFeesField.TagID:
                {
                    if (current_groupAllocs < 0 || current_groupAllocs >= groupAllocs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].fieldNoMiscFees != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupAllocs[current_groupAllocs].groupMiscFees != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupAllocs[current_groupAllocs].fieldNoMiscFees = FixNoMiscFeesField.create(array, offset, length);
                    if (groupAllocs[current_groupAllocs].fieldNoMiscFees == null || !groupAllocs[current_groupAllocs].fieldNoMiscFees.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    currentState = STATE_MiscFeesGroup;

                    current_groupMiscFees = -1;

                    numInGroup = groupAllocs[current_groupAllocs].fieldNoMiscFees.intValue();

                    groupAllocs[current_groupAllocs].groupMiscFees = new MiscFeesGroup[numInGroup];
                    for (group = 0; group < numInGroup; group++)
                    {
                        groupAllocs[current_groupAllocs].groupMiscFees[group] = new MiscFeesGroup();
                    }

                    continue;
                }
                case FixMiscFeeAmtField.TagID:
                {
                    if (currentState != STATE_MiscFeesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 ||
                        current_groupAllocs >= groupAllocs.length ||
                        current_groupMiscFees >= groupAllocs[current_groupAllocs].groupMiscFees.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    MiscFeesGroup curGroupMiscFees = groupAllocs[current_groupAllocs].groupMiscFees[current_groupMiscFees];

                    if (curGroupMiscFees.fieldMiscFeeAmt != null)
                    {
                        current_groupMiscFees++;
                    }

                    curGroupMiscFees.fieldMiscFeeAmt = FixMiscFeeAmtField.create(array, offset, length);
                    if (curGroupMiscFees.fieldMiscFeeAmt == null || !curGroupMiscFees.fieldMiscFeeAmt.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixMiscFeeCurrField.TagID:
                {
                    if (currentState != STATE_MiscFeesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 ||
                        current_groupAllocs >= groupAllocs.length ||
                        current_groupMiscFees >= groupAllocs[current_groupAllocs].groupMiscFees.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    MiscFeesGroup curGroupMiscFees = groupAllocs[current_groupAllocs].groupMiscFees[current_groupMiscFees];

                    if (curGroupMiscFees.fieldMiscFeeCurr != null)
                    {
                        current_groupMiscFees++;
                    }

                    curGroupMiscFees.fieldMiscFeeCurr = FixMiscFeeCurrField.create(array, offset, length);
                    if (curGroupMiscFees.fieldMiscFeeCurr == null || !curGroupMiscFees.fieldMiscFeeCurr.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixMiscFeeTypeField.TagID:
                {
                    if (currentState != STATE_MiscFeesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupAllocs < 0 ||
                        current_groupAllocs >= groupAllocs.length ||
                        current_groupMiscFees >= groupAllocs[current_groupAllocs].groupMiscFees.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    MiscFeesGroup curGroupMiscFees = groupAllocs[current_groupAllocs].groupMiscFees[current_groupMiscFees];

                    if (curGroupMiscFees.fieldMiscFeeType != null)
                    {
                        current_groupMiscFees++;
                    }

                    curGroupMiscFees.fieldMiscFeeType = FixMiscFeeTypeField.create(array, offset, length);
                    if (curGroupMiscFees.fieldMiscFeeType == null || !curGroupMiscFees.fieldMiscFeeType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
            }

            if (tag >= FixMessageIF.USER_DEFINED_TAGS_START)
            {
                if (currentState == STATE_Field || currentState == STATE_Header)
                {
                    if (additionalUserFields == null)
                    {
                        additionalUserFields = new ArrayList();
                    }

                    additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                    continue;
                }

                if (currentState == STATE_OrdersGroup)
                {
                    if (current_groupOrders == groupOrders.length - 1)
                    {
                        if (additionalUserFields == null)
                        {
                            additionalUserFields = new ArrayList();
                        }

                        additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                        continue;
                    }

                    foundErrors.add(BitHelper.packInt(FixException.UNEXPECTED_USER_DEFINED_TAG_WITHIN_GROUP, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return foundErrors;
                    }
                    continue;
                }

                if (currentState == STATE_ExecsGroup)
                {
                    if (current_groupExecs == groupExecs.length - 1)
                    {
                        if (additionalUserFields == null)
                        {
                            additionalUserFields = new ArrayList();
                        }

                        additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                        continue;
                    }

                    foundErrors.add(BitHelper.packInt(FixException.UNEXPECTED_USER_DEFINED_TAG_WITHIN_GROUP, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return foundErrors;
                    }
                    continue;
                }

                if (currentState == STATE_AllocsGroup)
                {
                    if (current_groupAllocs == groupAllocs.length - 1)
                    {
                        if (additionalUserFields == null)
                        {
                            additionalUserFields = new ArrayList();
                        }

                        additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                        continue;
                    }

                    foundErrors.add(BitHelper.packInt(FixException.UNEXPECTED_USER_DEFINED_TAG_WITHIN_GROUP, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return foundErrors;
                    }
                    continue;
                }
            }

            if (!buildHeaderTrailer(array, tag, offset, length, currentState, currentPosition, foundErrors, validationFlags, debugFlags))
            {
                foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG, currentPosition));

                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                {
                    return foundErrors;
                }

                continue;
            }
        }

        if (groupOrders != null && current_groupOrders != groupOrders.length - 1)
        {
            foundErrors.add(BitHelper.packInt(FixException.FEWER_GROUPS_THAN_SPECIFIED, currentPosition));

            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        if (groupExecs != null && current_groupExecs != groupExecs.length - 1)
        {
            foundErrors.add(BitHelper.packInt(FixException.FEWER_GROUPS_THAN_SPECIFIED, currentPosition));

            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        if (groupAllocs != null && current_groupAllocs != groupAllocs.length - 1)
        {
            foundErrors.add(BitHelper.packInt(FixException.FEWER_GROUPS_THAN_SPECIFIED, currentPosition));

            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        if ((BitHelper.isBitMaskSet(debugFlags, FixSessionDebugIF.MESSAGE_SHOW_BUILD_TRANSITIONS)))
        {
            String threadName = Thread.currentThread().getName();
            String stateString = toStateString(currentState);
            StringBuilder sb = new StringBuilder(threadName.length()+stateString.length()+10);
            sb.append(threadName).append(" --> ").append(stateString);
            Log.information(sb.toString());
        }

        return foundErrors;
    }
}
