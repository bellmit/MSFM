package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixQuoteCancelTypeField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [298] (known as QuoteCancelType).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixQuoteCancelTypeField implements FixFieldIF, HasIntValueIF
{   
    public static final int    TagID         =  298;
    public static final String TagIDAsString = "298";
    public static final char[] TagIDAsChars  = {'2','9','8'};
    public static final String TagName       = "QuoteCancelType";
    public static final String TagFixType    = "INT";
    public static final char[]  taggedchars_value0 = {'2','9','8', EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {'2','9','8', EQUALSchar, ONEchar,  SOHchar};

    public static final int     CancelForSymbol                    = 1;
    public static final String  string_CancelForSymbol             = "1";
    public static final String  tagged_CancelForSymbol             = TagIDAsString + EQUALS + string_CancelForSymbol + SOH;
    public static final char[]  taggedchars_CancelForSymbol        = {'2','9','8', EQUALSchar, '1', SOHchar};
    public static final String  text_CancelForSymbol               = "CancelForSymbol";
    public static final int     CancelForSecurityType              = 2;
    public static final String  string_CancelForSecurityType       = "2";
    public static final String  tagged_CancelForSecurityType       = TagIDAsString + EQUALS + string_CancelForSecurityType + SOH;
    public static final char[]  taggedchars_CancelForSecurityType  = {'2','9','8', EQUALSchar, '2', SOHchar};
    public static final String  text_CancelForSecurityType         = "CancelForSecurityType";
    public static final int     CancelForUnderlying                = 3;
    public static final String  string_CancelForUnderlying         = "3";
    public static final String  tagged_CancelForUnderlying         = TagIDAsString + EQUALS + string_CancelForUnderlying + SOH;
    public static final char[]  taggedchars_CancelForUnderlying    = {'2','9','8', EQUALSchar, '3', SOHchar};
    public static final String  text_CancelForUnderlying           = "CancelForUnderlying";
    public static final int     CancelAllQuotes                    = 4;
    public static final String  string_CancelAllQuotes             = "4";
    public static final String  tagged_CancelAllQuotes             = TagIDAsString + EQUALS + string_CancelAllQuotes + SOH;
    public static final char[]  taggedchars_CancelAllQuotes        = {'2','9','8', EQUALSchar, '4', SOHchar};
    public static final String  text_CancelAllQuotes               = "CancelAllQuotes";

    private static FixQuoteCancelTypeField flyweightCancelForSymbol;
    public static final FixQuoteCancelTypeField flyweightCancelForSymbol()
    {
        if (flyweightCancelForSymbol == null)
        {
            synchronized(FixQuoteCancelTypeField.class)
            {
                if (flyweightCancelForSymbol == null)
                {
                    flyweightCancelForSymbol  = new FixQuoteCancelTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_CancelForSymbol;}
                     public String  getValueDescription()             {return text_CancelForSymbol;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CancelForSymbol).append("|").append(text_CancelForSymbol).append("]").toString();}
                     public boolean isCancelForSymbol()               {return true;}
                     public int     intValue()                        {return CancelForSymbol;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_CancelForSymbol);}
                    };
                }
            }
        }

        return flyweightCancelForSymbol;
    }

    private static FixQuoteCancelTypeField flyweightCancelForSecurityType;
    public static final FixQuoteCancelTypeField flyweightCancelForSecurityType()
    {
        if (flyweightCancelForSecurityType == null)
        {
            synchronized(FixQuoteCancelTypeField.class)
            {
                if (flyweightCancelForSecurityType == null)
                {
                    flyweightCancelForSecurityType  = new FixQuoteCancelTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_CancelForSecurityType;}
                     public String  getValueDescription()             {return text_CancelForSecurityType;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CancelForSecurityType).append("|").append(text_CancelForSecurityType).append("]").toString();}
                     public boolean isCancelForSecurityType()         {return true;}
                     public int     intValue()                        {return CancelForSecurityType;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_CancelForSecurityType);}
                    };
                }
            }
        }

        return flyweightCancelForSecurityType;
    }

    private static FixQuoteCancelTypeField flyweightCancelForUnderlying;
    public static final FixQuoteCancelTypeField flyweightCancelForUnderlying()
    {
        if (flyweightCancelForUnderlying == null)
        {
            synchronized(FixQuoteCancelTypeField.class)
            {
                if (flyweightCancelForUnderlying == null)
                {
                    flyweightCancelForUnderlying  = new FixQuoteCancelTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_CancelForUnderlying;}
                     public String  getValueDescription()             {return text_CancelForUnderlying;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CancelForUnderlying).append("|").append(text_CancelForUnderlying).append("]").toString();}
                     public boolean isCancelForUnderlying()           {return true;}
                     public int     intValue()                        {return CancelForUnderlying;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_CancelForUnderlying);}
                    };
                }
            }
        }

        return flyweightCancelForUnderlying;
    }

    private static FixQuoteCancelTypeField flyweightCancelAllQuotes;
    public static final FixQuoteCancelTypeField flyweightCancelAllQuotes()
    {
        if (flyweightCancelAllQuotes == null)
        {
            synchronized(FixQuoteCancelTypeField.class)
            {
                if (flyweightCancelAllQuotes == null)
                {
                    flyweightCancelAllQuotes  = new FixQuoteCancelTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_CancelAllQuotes;}
                     public String  getValueDescription()             {return text_CancelAllQuotes;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CancelAllQuotes).append("|").append(text_CancelAllQuotes).append("]").toString();}
                     public boolean isCancelAllQuotes()               {return true;}
                     public int     intValue()                        {return CancelAllQuotes;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_CancelAllQuotes);}
                    };
                }
            }
        }

        return flyweightCancelAllQuotes;
    }


    public boolean isCancelForSymbol()         {return false;}
    public boolean isCancelForSecurityType()   {return false;}
    public boolean isCancelForUnderlying()     {return false;}
    public boolean isCancelAllQuotes()         {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixQuoteCancelTypeField create(char[] array, int offset, int length)
    {
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static FixQuoteCancelTypeField create(final int param)
    {
        switch (param)
        {                                                                                           
            case CancelForSymbol:       return flyweightCancelForSymbol();
            case CancelForSecurityType: return flyweightCancelForSecurityType();
            case CancelForUnderlying:   return flyweightCancelForUnderlying();
            case CancelAllQuotes:       return flyweightCancelAllQuotes();
        }
                                                                                                    
        return new FixQuoteCancelTypeField()
        {       public int     value = param;
                public boolean hasValue()                                    {return true;}
                public String  getValue()                                    {return StringHelper.intToString(value);}
                public int     intValue()                                    {return CancelAllQuotes;}
                public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, value);}
        };
    }                                                                                               
}
