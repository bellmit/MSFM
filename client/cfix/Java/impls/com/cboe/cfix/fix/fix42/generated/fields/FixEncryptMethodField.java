package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixEncryptMethodField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [98] (known as EncryptMethod).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixEncryptMethodField implements FixFieldIF, HasIntValueIF
{   
    public static final int    TagID         =  98;
    public static final String TagIDAsString = "98";
    public static final char[] TagIDAsChars  = {'9','8'};
    public static final String TagName       = "EncryptMethod";
    public static final String TagFixType    = "INT";
    public static final char[]  taggedchars_value0 = {'9','8', EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {'9','8', EQUALSchar, ONEchar,  SOHchar};

    public static final int     None                   = 0;
    public static final String  string_None            = "0";
    public static final String  tagged_None            = TagIDAsString + EQUALS + string_None + SOH;
    public static final char[]  taggedchars_None       = {'9','8', EQUALSchar, '0', SOHchar};
    public static final String  text_None              = "None";
    public static final int     Pkcs                   = 1;
    public static final String  string_Pkcs            = "1";
    public static final String  tagged_Pkcs            = TagIDAsString + EQUALS + string_Pkcs + SOH;
    public static final char[]  taggedchars_Pkcs       = {'9','8', EQUALSchar, '1', SOHchar};
    public static final String  text_Pkcs              = "Pkcs";
    public static final int     Des                    = 2;
    public static final String  string_Des             = "2";
    public static final String  tagged_Des             = TagIDAsString + EQUALS + string_Des + SOH;
    public static final char[]  taggedchars_Des        = {'9','8', EQUALSchar, '2', SOHchar};
    public static final String  text_Des               = "Des";
    public static final int     PkcsDes                = 3;
    public static final String  string_PkcsDes         = "3";
    public static final String  tagged_PkcsDes         = TagIDAsString + EQUALS + string_PkcsDes + SOH;
    public static final char[]  taggedchars_PkcsDes    = {'9','8', EQUALSchar, '3', SOHchar};
    public static final String  text_PkcsDes           = "PkcsDes";
    public static final int     PgpDes                 = 4;
    public static final String  string_PgpDes          = "4";
    public static final String  tagged_PgpDes          = TagIDAsString + EQUALS + string_PgpDes + SOH;
    public static final char[]  taggedchars_PgpDes     = {'9','8', EQUALSchar, '4', SOHchar};
    public static final String  text_PgpDes            = "PgpDes";
    public static final int     PgpDesMd5              = 5;
    public static final String  string_PgpDesMd5       = "5";
    public static final String  tagged_PgpDesMd5       = TagIDAsString + EQUALS + string_PgpDesMd5 + SOH;
    public static final char[]  taggedchars_PgpDesMd5  = {'9','8', EQUALSchar, '5', SOHchar};
    public static final String  text_PgpDesMd5         = "PgpDesMd5";
    public static final int     PemDesMd5              = 6;
    public static final String  string_PemDesMd5       = "6";
    public static final String  tagged_PemDesMd5       = TagIDAsString + EQUALS + string_PemDesMd5 + SOH;
    public static final char[]  taggedchars_PemDesMd5  = {'9','8', EQUALSchar, '6', SOHchar};
    public static final String  text_PemDesMd5         = "PemDesMd5";

    private static FixEncryptMethodField flyweightNone;
    public static final FixEncryptMethodField flyweightNone()
    {
        if (flyweightNone == null)
        {
            synchronized(FixEncryptMethodField.class)
            {
                if (flyweightNone == null)
                {
                    flyweightNone  = new FixEncryptMethodField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_None;}
                     public String  getValueDescription()             {return text_None;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_None).append("|").append(text_None).append("]").toString();}
                     public boolean isNone()                          {return true;}
                     public int     intValue()                        {return None;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_None);}
                    };
                }
            }
        }

        return flyweightNone;
    }

    private static FixEncryptMethodField flyweightPkcs;
    public static final FixEncryptMethodField flyweightPkcs()
    {
        if (flyweightPkcs == null)
        {
            synchronized(FixEncryptMethodField.class)
            {
                if (flyweightPkcs == null)
                {
                    flyweightPkcs  = new FixEncryptMethodField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Pkcs;}
                     public String  getValueDescription()             {return text_Pkcs;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Pkcs).append("|").append(text_Pkcs).append("]").toString();}
                     public boolean isPkcs()                          {return true;}
                     public int     intValue()                        {return Pkcs;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Pkcs);}
                    };
                }
            }
        }

        return flyweightPkcs;
    }

    private static FixEncryptMethodField flyweightDes;
    public static final FixEncryptMethodField flyweightDes()
    {
        if (flyweightDes == null)
        {
            synchronized(FixEncryptMethodField.class)
            {
                if (flyweightDes == null)
                {
                    flyweightDes  = new FixEncryptMethodField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Des;}
                     public String  getValueDescription()             {return text_Des;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Des).append("|").append(text_Des).append("]").toString();}
                     public boolean isDes()                           {return true;}
                     public int     intValue()                        {return Des;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Des);}
                    };
                }
            }
        }

        return flyweightDes;
    }

    private static FixEncryptMethodField flyweightPkcsDes;
    public static final FixEncryptMethodField flyweightPkcsDes()
    {
        if (flyweightPkcsDes == null)
        {
            synchronized(FixEncryptMethodField.class)
            {
                if (flyweightPkcsDes == null)
                {
                    flyweightPkcsDes  = new FixEncryptMethodField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PkcsDes;}
                     public String  getValueDescription()             {return text_PkcsDes;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PkcsDes).append("|").append(text_PkcsDes).append("]").toString();}
                     public boolean isPkcsDes()                       {return true;}
                     public int     intValue()                        {return PkcsDes;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PkcsDes);}
                    };
                }
            }
        }

        return flyweightPkcsDes;
    }

    private static FixEncryptMethodField flyweightPgpDes;
    public static final FixEncryptMethodField flyweightPgpDes()
    {
        if (flyweightPgpDes == null)
        {
            synchronized(FixEncryptMethodField.class)
            {
                if (flyweightPgpDes == null)
                {
                    flyweightPgpDes  = new FixEncryptMethodField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PgpDes;}
                     public String  getValueDescription()             {return text_PgpDes;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PgpDes).append("|").append(text_PgpDes).append("]").toString();}
                     public boolean isPgpDes()                        {return true;}
                     public int     intValue()                        {return PgpDes;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PgpDes);}
                    };
                }
            }
        }

        return flyweightPgpDes;
    }

    private static FixEncryptMethodField flyweightPgpDesMd5;
    public static final FixEncryptMethodField flyweightPgpDesMd5()
    {
        if (flyweightPgpDesMd5 == null)
        {
            synchronized(FixEncryptMethodField.class)
            {
                if (flyweightPgpDesMd5 == null)
                {
                    flyweightPgpDesMd5  = new FixEncryptMethodField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PgpDesMd5;}
                     public String  getValueDescription()             {return text_PgpDesMd5;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PgpDesMd5).append("|").append(text_PgpDesMd5).append("]").toString();}
                     public boolean isPgpDesMd5()                     {return true;}
                     public int     intValue()                        {return PgpDesMd5;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PgpDesMd5);}
                    };
                }
            }
        }

        return flyweightPgpDesMd5;
    }

    private static FixEncryptMethodField flyweightPemDesMd5;
    public static final FixEncryptMethodField flyweightPemDesMd5()
    {
        if (flyweightPemDesMd5 == null)
        {
            synchronized(FixEncryptMethodField.class)
            {
                if (flyweightPemDesMd5 == null)
                {
                    flyweightPemDesMd5  = new FixEncryptMethodField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PemDesMd5;}
                     public String  getValueDescription()             {return text_PemDesMd5;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PemDesMd5).append("|").append(text_PemDesMd5).append("]").toString();}
                     public boolean isPemDesMd5()                     {return true;}
                     public int     intValue()                        {return PemDesMd5;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PemDesMd5);}
                    };
                }
            }
        }

        return flyweightPemDesMd5;
    }


    public boolean isNone()        {return false;}
    public boolean isPkcs()        {return false;}
    public boolean isDes()         {return false;}
    public boolean isPkcsDes()     {return false;}
    public boolean isPgpDes()      {return false;}
    public boolean isPgpDesMd5()   {return false;}
    public boolean isPemDesMd5()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixEncryptMethodField create(char[] array, int offset, int length)
    {
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static FixEncryptMethodField create(final int param)
    {
        switch (param)
        {                                                                                           
            case None:      return flyweightNone();
            case Pkcs:      return flyweightPkcs();
            case Des:       return flyweightDes();
            case PkcsDes:   return flyweightPkcsDes();
            case PgpDes:    return flyweightPgpDes();
            case PgpDesMd5: return flyweightPgpDesMd5();
            case PemDesMd5: return flyweightPemDesMd5();
        }
                                                                                                    
        return null;
    }                                                                                               
}
