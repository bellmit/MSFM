package com.cboe.cfix.fix.fix42.generated.messages;

/**
 * FixMessage.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Base Message, consisting of just the header and trailer fields
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import java.util.*;

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.cfix.fix.fix42.generated.fields.*;
import com.cboe.cfix.fix.util.*;
import com.cboe.client.util.*;
import com.cboe.infrastructureServices.foundationFramework.utilities.*;

public abstract class FixMessage implements FixMessageIF
{   
    // START FIX Header Fields
    public FixBeginStringField            fieldBeginString;
    public FixBodyLengthField             fieldBodyLength;
    public FixMsgTypeField                fieldMsgType;
    public FixSenderCompIDField           fieldSenderCompID;
    public FixTargetCompIDField           fieldTargetCompID;
    public FixOnBehalfOfCompIDField       fieldOnBehalfOfCompID;
    public FixDeliverToCompIDField        fieldDeliverToCompID;
    //     FixSecureDataLenField          fieldSecureDataLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    //     FixSecureDataField             fieldSecureData;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    public FixMsgSeqNumField              fieldMsgSeqNum;
    public FixSenderSubIDField            fieldSenderSubID;
    public FixSenderLocationIDField       fieldSenderLocationID;
    public FixTargetSubIDField            fieldTargetSubID;
    public FixTargetLocationIDField       fieldTargetLocationID;
    public FixOnBehalfOfSubIDField        fieldOnBehalfOfSubID;
    public FixOnBehalfOfLocationIDField   fieldOnBehalfOfLocationID;
    public FixDeliverToSubIDField         fieldDeliverToSubID;
    public FixDeliverToLocationIDField    fieldDeliverToLocationID;
    public FixPossDupFlagField            fieldPossDupFlag;
    public FixPossResendField             fieldPossResend;
    public FixSendingTimeField            fieldSendingTime;
    public FixOrigSendingTimeField        fieldOrigSendingTime;
    //     FixXmlDataLenField             fieldXmlDataLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    //     FixXmlDataField                fieldXmlData;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    //     FixMessageEncodingField        fieldMessageEncoding;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    public FixLastMsgSeqNumProcessedField fieldLastMsgSeqNumProcessed;
    public FixOnBehalfOfSendingTimeField  fieldOnBehalfOfSendingTime;

    // START FIX Trailer Fields
    //     FixSignatureLengthField        fieldSignatureLength;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    //     FixSignatureField              fieldSignature;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    public FixCheckSumField               fieldCheckSum;

    protected static final int STATE_Header = 0;
    protected static final int STATE_Field  = 1;
    public String toString()
    {
        PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

        accept(prettyPrintWriter);

        return prettyPrintWriter.toString();
    }

    public void accept(PrettyPrintWriterIF prettyPrintWriter)
    {                                                                                                 
        prettyPrintWriter.printGroupItem(fieldBeginString);
        prettyPrintWriter.printGroupItem(fieldBodyLength);
        prettyPrintWriter.printGroupItem(fieldMsgType);
        prettyPrintWriter.printGroupItem(fieldSenderCompID);
        prettyPrintWriter.printGroupItem(fieldTargetCompID);
        prettyPrintWriter.printGroupItem(fieldOnBehalfOfCompID);
        prettyPrintWriter.printGroupItem(fieldDeliverToCompID);
        prettyPrintWriter.printGroupItem(fieldMsgSeqNum);
        prettyPrintWriter.printGroupItem(fieldSenderSubID);
        prettyPrintWriter.printGroupItem(fieldSenderLocationID);
        prettyPrintWriter.printGroupItem(fieldTargetSubID);
        prettyPrintWriter.printGroupItem(fieldTargetLocationID);
        prettyPrintWriter.printGroupItem(fieldOnBehalfOfSubID);
        prettyPrintWriter.printGroupItem(fieldOnBehalfOfLocationID);
        prettyPrintWriter.printGroupItem(fieldDeliverToSubID);
        prettyPrintWriter.printGroupItem(fieldDeliverToLocationID);
        prettyPrintWriter.printGroupItem(fieldPossDupFlag);
        prettyPrintWriter.printGroupItem(fieldPossResend);
        prettyPrintWriter.printGroupItem(fieldSendingTime);
        prettyPrintWriter.printGroupItem(fieldOrigSendingTime);
        prettyPrintWriter.printGroupItem(fieldLastMsgSeqNumProcessed);
        prettyPrintWriter.printGroupItem(fieldOnBehalfOfSendingTime);
        prettyPrintWriter.printGroupItem(fieldCheckSum);
    }                                                                                                 
    public void accept(FixMessageBuilderIF fixMessageBuilder)
    {                                                                                                 
        fixMessageBuilder.append(fieldBeginString);
        fixMessageBuilder.append(fieldBodyLength);
        fixMessageBuilder.append(fieldMsgType);
        fixMessageBuilder.append(fieldSenderCompID);
        fixMessageBuilder.append(fieldTargetCompID);
        fixMessageBuilder.append(fieldOnBehalfOfCompID);
        fixMessageBuilder.append(fieldDeliverToCompID);
        fixMessageBuilder.append(fieldMsgSeqNum);
        fixMessageBuilder.append(fieldSenderSubID);
        fixMessageBuilder.append(fieldSenderLocationID);
        fixMessageBuilder.append(fieldTargetSubID);
        fixMessageBuilder.append(fieldTargetLocationID);
        fixMessageBuilder.append(fieldOnBehalfOfSubID);
        fixMessageBuilder.append(fieldOnBehalfOfLocationID);
        fixMessageBuilder.append(fieldDeliverToSubID);
        fixMessageBuilder.append(fieldDeliverToLocationID);
        fixMessageBuilder.append(fieldPossDupFlag);
        fixMessageBuilder.append(fieldPossResend);
        fixMessageBuilder.append(fieldSendingTime);
        fixMessageBuilder.append(fieldOrigSendingTime);
        fixMessageBuilder.append(fieldLastMsgSeqNumProcessed);
        fixMessageBuilder.append(fieldOnBehalfOfSendingTime);
        fixMessageBuilder.append(fieldCheckSum);
    }                                                                                                 

    public int getMsgSeqNum()       {return fieldMsgSeqNum.intValue();}
    public String getSenderCompID() {return fieldSenderCompID.getValue();}
    public String getTargetCompID() {return fieldTargetCompID.getValue();}
    public Date getSendingTime()    {return fieldSendingTime.dateValue();}
    public boolean isPossDup()      {return fieldPossDupFlag != null && fieldPossDupFlag.booleanValue();}
    public boolean isFixHeartBeatMessage()  {return false;}
    public boolean isFixLogonMessage()  {return false;}
    public boolean isFixTestRequestMessage()  {return false;}
    public boolean isFixResendRequestMessage()  {return false;}
    public boolean isFixRejectMessage()  {return false;}
    public boolean isFixSequenceResetMessage()  {return false;}
    public boolean isFixLogoutMessage()  {return false;}
    public boolean isFixAdvertisementMessage()  {return false;}
    public boolean isFixIndicationOfInterestMessage()  {return false;}
    public boolean isFixNewsMessage()  {return false;}
    public boolean isFixEmailMessage()  {return false;}
    public boolean isFixQuoteRequestMessage()  {return false;}
    public boolean isFixQuoteMessage()  {return false;}
    public boolean isFixMassQuoteMessage()  {return false;}
    public boolean isFixQuoteCancelMessage()  {return false;}
    public boolean isFixQuoteStatusRequestMessage()  {return false;}
    public boolean isFixQuoteAcknowledgementMessage()  {return false;}
    public boolean isFixMarketDataRequestMessage()  {return false;}
    public boolean isFixMarketDataSnapshotFullRefreshMessage()  {return false;}
    public boolean isFixMarketDataIncrementalRefreshMessage()  {return false;}
    public boolean isFixMarketDataRequestRejectMessage()  {return false;}
    public boolean isFixSecurityDefinitionRequestMessage()  {return false;}
    public boolean isFixSecurityDefinitionMessage()  {return false;}
    public boolean isFixSecurityStatusRequestMessage()  {return false;}
    public boolean isFixSecurityStatusMessage()  {return false;}
    public boolean isFixTradingSessionStatusRequestMessage()  {return false;}
    public boolean isFixTradingSessionStatusMessage()  {return false;}
    public boolean isFixNewOrderSingleMessage()  {return false;}
    public boolean isFixExecutionReportMessage()  {return false;}
    public boolean isFixDontKnowTradeMessage()  {return false;}
    public boolean isFixOrderCancelReplaceRequestMessage()  {return false;}
    public boolean isFixOrderCancelRequestMessage()  {return false;}
    public boolean isFixOrderCancelRejectMessage()  {return false;}
    public boolean isFixOrderStatusRequestMessage()  {return false;}
    public boolean isFixAllocationMessage()  {return false;}
    public boolean isFixAllocationAckMessage()  {return false;}
    public boolean isFixSettlementInstructionsMessage()  {return false;}
    public boolean isFixNewOrderListMessage()  {return false;}
    public boolean isFixListStatusMessage()  {return false;}
    public boolean isFixListExecuteMessage()  {return false;}
    public boolean isFixListCancelRequestMessage()  {return false;}
    public boolean isFixListStatusRequestMessage()  {return false;}
    public boolean isFixBusinessMessageRejectMessage()  {return false;}

    public boolean buildHeaderTrailer(char[] array, int tag, int offset, int length, int currentState, int currentPosition, PackedIntArrayIF foundErrors, int validationFlags, int debugFlags)
    {
        switch (tag)
        {
            case FixBeginStringField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldBeginString != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldBeginString = FixBeginStringField.create(array, offset, length);
                if (fieldBeginString == null || !fieldBeginString.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixBodyLengthField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldBodyLength != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldBodyLength = FixBodyLengthField.create(array, offset, length);
                if (fieldBodyLength == null || !fieldBodyLength.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixMsgTypeField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldMsgType != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldMsgType = FixMsgTypeField.create(array, offset, length);
                if (fieldMsgType == null || !fieldMsgType.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixSenderCompIDField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldSenderCompID != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldSenderCompID = FixSenderCompIDField.create(array, offset, length);
                if (fieldSenderCompID == null || !fieldSenderCompID.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixTargetCompIDField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldTargetCompID != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldTargetCompID = FixTargetCompIDField.create(array, offset, length);
                if (fieldTargetCompID == null || !fieldTargetCompID.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixOnBehalfOfCompIDField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldOnBehalfOfCompID != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldOnBehalfOfCompID = FixOnBehalfOfCompIDField.create(array, offset, length);
                if (fieldOnBehalfOfCompID == null || !fieldOnBehalfOfCompID.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixDeliverToCompIDField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldDeliverToCompID != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldDeliverToCompID = FixDeliverToCompIDField.create(array, offset, length);
                if (fieldDeliverToCompID == null || !fieldDeliverToCompID.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixSecureDataLenField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                {
                    FixSecureDataLenField unusedByCboeField = FixSecureDataLenField.create(array, offset, length);
                    if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                    {
                        unusedByCboeField = null;

                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return false;
                        }

                        return true;
                    }

                    unusedByCboeField = null;
                }

                return true;
            }
            case FixSecureDataField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                {
                    FixSecureDataField unusedByCboeField = FixSecureDataField.create(array, offset, length);
                    if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                    {
                        unusedByCboeField = null;

                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return false;
                        }

                        return true;
                    }

                    unusedByCboeField = null;
                }

                return true;
            }
            case FixMsgSeqNumField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldMsgSeqNum != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldMsgSeqNum = FixMsgSeqNumField.create(array, offset, length);
                if (fieldMsgSeqNum == null || !fieldMsgSeqNum.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixSenderSubIDField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldSenderSubID != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldSenderSubID = FixSenderSubIDField.create(array, offset, length);
                if (fieldSenderSubID == null || !fieldSenderSubID.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixSenderLocationIDField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldSenderLocationID != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldSenderLocationID = FixSenderLocationIDField.create(array, offset, length);
                if (fieldSenderLocationID == null || !fieldSenderLocationID.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixTargetSubIDField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldTargetSubID != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldTargetSubID = FixTargetSubIDField.create(array, offset, length);
                if (fieldTargetSubID == null || !fieldTargetSubID.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixTargetLocationIDField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldTargetLocationID != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldTargetLocationID = FixTargetLocationIDField.create(array, offset, length);
                if (fieldTargetLocationID == null || !fieldTargetLocationID.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixOnBehalfOfSubIDField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldOnBehalfOfSubID != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldOnBehalfOfSubID = FixOnBehalfOfSubIDField.create(array, offset, length);
                if (fieldOnBehalfOfSubID == null || !fieldOnBehalfOfSubID.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixOnBehalfOfLocationIDField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldOnBehalfOfLocationID != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldOnBehalfOfLocationID = FixOnBehalfOfLocationIDField.create(array, offset, length);
                if (fieldOnBehalfOfLocationID == null || !fieldOnBehalfOfLocationID.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixDeliverToSubIDField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldDeliverToSubID != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldDeliverToSubID = FixDeliverToSubIDField.create(array, offset, length);
                if (fieldDeliverToSubID == null || !fieldDeliverToSubID.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixDeliverToLocationIDField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldDeliverToLocationID != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldDeliverToLocationID = FixDeliverToLocationIDField.create(array, offset, length);
                if (fieldDeliverToLocationID == null || !fieldDeliverToLocationID.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixPossDupFlagField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldPossDupFlag != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldPossDupFlag = FixPossDupFlagField.create(array, offset, length);
                if (fieldPossDupFlag == null || !fieldPossDupFlag.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixPossResendField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldPossResend != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldPossResend = FixPossResendField.create(array, offset, length);
                if (fieldPossResend == null || !fieldPossResend.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixSendingTimeField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldSendingTime != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldSendingTime = FixSendingTimeField.create(array, offset, length);
                if (fieldSendingTime == null || !fieldSendingTime.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixOrigSendingTimeField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldOrigSendingTime != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldOrigSendingTime = FixOrigSendingTimeField.create(array, offset, length);
                if (fieldOrigSendingTime == null || !fieldOrigSendingTime.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixXmlDataLenField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                {
                    FixXmlDataLenField unusedByCboeField = FixXmlDataLenField.create(array, offset, length);
                    if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                    {
                        unusedByCboeField = null;

                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return false;
                        }

                        return true;
                    }

                    unusedByCboeField = null;
                }

                return true;
            }
            case FixXmlDataField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                {
                    FixXmlDataField unusedByCboeField = FixXmlDataField.create(array, offset, length);
                    if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                    {
                        unusedByCboeField = null;

                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return false;
                        }

                        return true;
                    }

                    unusedByCboeField = null;
                }

                return true;
            }
            case FixMessageEncodingField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                {
                    FixMessageEncodingField unusedByCboeField = FixMessageEncodingField.create(array, offset, length);
                    if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                    {
                        unusedByCboeField = null;

                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return false;
                        }

                        return true;
                    }

                    unusedByCboeField = null;
                }

                return true;
            }
            case FixLastMsgSeqNumProcessedField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldLastMsgSeqNumProcessed != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldLastMsgSeqNumProcessed = FixLastMsgSeqNumProcessedField.create(array, offset, length);
                if (fieldLastMsgSeqNumProcessed == null || !fieldLastMsgSeqNumProcessed.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixOnBehalfOfSendingTimeField.TagID:
            {
                if (currentState != STATE_Header)
                {
                    foundErrors.add(BitHelper.packInt(FixException.HEADER_TAG_OUTSIDE_OF_HEADER, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }
                
                if (fieldOnBehalfOfSendingTime != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldOnBehalfOfSendingTime = FixOnBehalfOfSendingTimeField.create(array, offset, length);
                if (fieldOnBehalfOfSendingTime == null || !fieldOnBehalfOfSendingTime.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
            case FixSignatureLengthField.TagID:
            {
                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                {
                    FixSignatureLengthField unusedByCboeField = FixSignatureLengthField.create(array, offset, length);
                    if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                    {
                        unusedByCboeField = null;

                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return false;
                        }

                        return true;
                    }

                    unusedByCboeField = null;
                }

                return true;
            }
            case FixSignatureField.TagID:
            {
                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                {
                    FixSignatureField unusedByCboeField = FixSignatureField.create(array, offset, length);
                    if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                    {
                        unusedByCboeField = null;

                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return false;
                        }

                        return true;
                    }

                    unusedByCboeField = null;
                }

                return true;
            }
            case FixCheckSumField.TagID:
            {
                if (fieldCheckSum != null)
                {
                    foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                fieldCheckSum = FixCheckSumField.create(array, offset, length);
                if (fieldCheckSum == null || !fieldCheckSum.hasValue())
                {
                    foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return false;
                    }

                    return true;
                }

                return true;
            }
        }

        return false;
    }

    public Object clone() throws CloneNotSupportedException
    {
        return super.clone();
    }
}
