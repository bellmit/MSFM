package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixSideField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [54] (known as Side).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixSideField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  54;
    public static final String TagIDAsString = "54";
    public static final char[] TagIDAsChars  = {'5','4'};
    public static final String TagName       = "Side";
    public static final String TagFixType    = "CHAR";

    public static final char    Buy                          = '1';
    public static final String  string_Buy                   = "1";
    public static final String  tagged_Buy                   = TagIDAsString + EQUALS + string_Buy + SOH;
    public static final char[]  taggedchars_Buy              = {'5','4', EQUALSchar, '1', SOHchar};
    public static final String  text_Buy                     = "Buy";
    public static final char    Sell                         = '2';
    public static final String  string_Sell                  = "2";
    public static final String  tagged_Sell                  = TagIDAsString + EQUALS + string_Sell + SOH;
    public static final char[]  taggedchars_Sell             = {'5','4', EQUALSchar, '2', SOHchar};
    public static final String  text_Sell                    = "Sell";
    public static final char    BuyMinus                     = '3';
    public static final String  string_BuyMinus              = "3";
    public static final String  tagged_BuyMinus              = TagIDAsString + EQUALS + string_BuyMinus + SOH;
    public static final char[]  taggedchars_BuyMinus         = {'5','4', EQUALSchar, '3', SOHchar};
    public static final String  text_BuyMinus                = "BuyMinus";
    public static final char    SellPlus                     = '4';
    public static final String  string_SellPlus              = "4";
    public static final String  tagged_SellPlus              = TagIDAsString + EQUALS + string_SellPlus + SOH;
    public static final char[]  taggedchars_SellPlus         = {'5','4', EQUALSchar, '4', SOHchar};
    public static final String  text_SellPlus                = "SellPlus";
    public static final char    SellShort                    = '5';
    public static final String  string_SellShort             = "5";
    public static final String  tagged_SellShort             = TagIDAsString + EQUALS + string_SellShort + SOH;
    public static final char[]  taggedchars_SellShort        = {'5','4', EQUALSchar, '5', SOHchar};
    public static final String  text_SellShort               = "SellShort";
    public static final char    SellShortExempt              = '6';
    public static final String  string_SellShortExempt       = "6";
    public static final String  tagged_SellShortExempt       = TagIDAsString + EQUALS + string_SellShortExempt + SOH;
    public static final char[]  taggedchars_SellShortExempt  = {'5','4', EQUALSchar, '6', SOHchar};
    public static final String  text_SellShortExempt         = "SellShortExempt";
    public static final char    Undisclosed                  = '7';
    public static final String  string_Undisclosed           = "7";
    public static final String  tagged_Undisclosed           = TagIDAsString + EQUALS + string_Undisclosed + SOH;
    public static final char[]  taggedchars_Undisclosed      = {'5','4', EQUALSchar, '7', SOHchar};
    public static final String  text_Undisclosed             = "Undisclosed";
    public static final char    Cross                        = '8';
    public static final String  string_Cross                 = "8";
    public static final String  tagged_Cross                 = TagIDAsString + EQUALS + string_Cross + SOH;
    public static final char[]  taggedchars_Cross            = {'5','4', EQUALSchar, '8', SOHchar};
    public static final String  text_Cross                   = "Cross";
    public static final char    CrossShort                   = '9';
    public static final String  string_CrossShort            = "9";
    public static final String  tagged_CrossShort            = TagIDAsString + EQUALS + string_CrossShort + SOH;
    public static final char[]  taggedchars_CrossShort       = {'5','4', EQUALSchar, '9', SOHchar};
    public static final String  text_CrossShort              = "CrossShort";
    public static final char    AsDefined                    = 'B';
    public static final String  string_AsDefined             = "B";
    public static final String  tagged_AsDefined             = TagIDAsString + EQUALS + string_AsDefined + SOH;
    public static final char[]  taggedchars_AsDefined        = {'5','4', EQUALSchar, 'B', SOHchar};
    public static final String  text_AsDefined               = "AsDefined";
    public static final char    Opposite                     = 'C';
    public static final String  string_Opposite              = "C";
    public static final String  tagged_Opposite              = TagIDAsString + EQUALS + string_Opposite + SOH;
    public static final char[]  taggedchars_Opposite         = {'5','4', EQUALSchar, 'C', SOHchar};
    public static final String  text_Opposite                = "Opposite";

    private static FixSideField flyweightBuy;
    public static final FixSideField flyweightBuy()
    {
        if (flyweightBuy == null)
        {
            synchronized(FixSideField.class)
            {
                if (flyweightBuy == null)
                {
                    flyweightBuy  = new FixSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Buy;}
                     public String  getValueDescription()             {return text_Buy;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Buy).append("|").append(text_Buy).append("]").toString();}
                     public boolean isBuy()                           {return true;}
                     public char    charValue()                       {return Buy;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Buy);}
                    };
                }
            }
        }

        return flyweightBuy;
    }

    private static FixSideField flyweightSell;
    public static final FixSideField flyweightSell()
    {
        if (flyweightSell == null)
        {
            synchronized(FixSideField.class)
            {
                if (flyweightSell == null)
                {
                    flyweightSell  = new FixSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Sell;}
                     public String  getValueDescription()             {return text_Sell;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Sell).append("|").append(text_Sell).append("]").toString();}
                     public boolean isSell()                          {return true;}
                     public char    charValue()                       {return Sell;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Sell);}
                    };
                }
            }
        }

        return flyweightSell;
    }

    private static FixSideField flyweightBuyMinus;
    public static final FixSideField flyweightBuyMinus()
    {
        if (flyweightBuyMinus == null)
        {
            synchronized(FixSideField.class)
            {
                if (flyweightBuyMinus == null)
                {
                    flyweightBuyMinus  = new FixSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_BuyMinus;}
                     public String  getValueDescription()             {return text_BuyMinus;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_BuyMinus).append("|").append(text_BuyMinus).append("]").toString();}
                     public boolean isBuyMinus()                      {return true;}
                     public char    charValue()                       {return BuyMinus;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_BuyMinus);}
                    };
                }
            }
        }

        return flyweightBuyMinus;
    }

    private static FixSideField flyweightSellPlus;
    public static final FixSideField flyweightSellPlus()
    {
        if (flyweightSellPlus == null)
        {
            synchronized(FixSideField.class)
            {
                if (flyweightSellPlus == null)
                {
                    flyweightSellPlus  = new FixSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_SellPlus;}
                     public String  getValueDescription()             {return text_SellPlus;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_SellPlus).append("|").append(text_SellPlus).append("]").toString();}
                     public boolean isSellPlus()                      {return true;}
                     public char    charValue()                       {return SellPlus;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_SellPlus);}
                    };
                }
            }
        }

        return flyweightSellPlus;
    }

    private static FixSideField flyweightSellShort;
    public static final FixSideField flyweightSellShort()
    {
        if (flyweightSellShort == null)
        {
            synchronized(FixSideField.class)
            {
                if (flyweightSellShort == null)
                {
                    flyweightSellShort  = new FixSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_SellShort;}
                     public String  getValueDescription()             {return text_SellShort;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_SellShort).append("|").append(text_SellShort).append("]").toString();}
                     public boolean isSellShort()                     {return true;}
                     public char    charValue()                       {return SellShort;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_SellShort);}
                    };
                }
            }
        }

        return flyweightSellShort;
    }

    private static FixSideField flyweightSellShortExempt;
    public static final FixSideField flyweightSellShortExempt()
    {
        if (flyweightSellShortExempt == null)
        {
            synchronized(FixSideField.class)
            {
                if (flyweightSellShortExempt == null)
                {
                    flyweightSellShortExempt  = new FixSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_SellShortExempt;}
                     public String  getValueDescription()             {return text_SellShortExempt;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_SellShortExempt).append("|").append(text_SellShortExempt).append("]").toString();}
                     public boolean isSellShortExempt()               {return true;}
                     public char    charValue()                       {return SellShortExempt;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_SellShortExempt);}
                    };
                }
            }
        }

        return flyweightSellShortExempt;
    }

    private static FixSideField flyweightUndisclosed;
    public static final FixSideField flyweightUndisclosed()
    {
        if (flyweightUndisclosed == null)
        {
            synchronized(FixSideField.class)
            {
                if (flyweightUndisclosed == null)
                {
                    flyweightUndisclosed  = new FixSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Undisclosed;}
                     public String  getValueDescription()             {return text_Undisclosed;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Undisclosed).append("|").append(text_Undisclosed).append("]").toString();}
                     public boolean isUndisclosed()                   {return true;}
                     public char    charValue()                       {return Undisclosed;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Undisclosed);}
                    };
                }
            }
        }

        return flyweightUndisclosed;
    }

    private static FixSideField flyweightCross;
    public static final FixSideField flyweightCross()
    {
        if (flyweightCross == null)
        {
            synchronized(FixSideField.class)
            {
                if (flyweightCross == null)
                {
                    flyweightCross  = new FixSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Cross;}
                     public String  getValueDescription()             {return text_Cross;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Cross).append("|").append(text_Cross).append("]").toString();}
                     public boolean isCross()                         {return true;}
                     public char    charValue()                       {return Cross;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Cross);}
                    };
                }
            }
        }

        return flyweightCross;
    }

    private static FixSideField flyweightCrossShort;
    public static final FixSideField flyweightCrossShort()
    {
        if (flyweightCrossShort == null)
        {
            synchronized(FixSideField.class)
            {
                if (flyweightCrossShort == null)
                {
                    flyweightCrossShort  = new FixSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_CrossShort;}
                     public String  getValueDescription()             {return text_CrossShort;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CrossShort).append("|").append(text_CrossShort).append("]").toString();}
                     public boolean isCrossShort()                    {return true;}
                     public char    charValue()                       {return CrossShort;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_CrossShort);}
                    };
                }
            }
        }

        return flyweightCrossShort;
    }

    private static FixSideField flyweightAsDefined;
    public static final FixSideField flyweightAsDefined()
    {
        if (flyweightAsDefined == null)
        {
            synchronized(FixSideField.class)
            {
                if (flyweightAsDefined == null)
                {
                    flyweightAsDefined  = new FixSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AsDefined;}
                     public String  getValueDescription()             {return text_AsDefined;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AsDefined).append("|").append(text_AsDefined).append("]").toString();}
                     public boolean isAsDefined()                     {return true;}
                     public char    charValue()                       {return AsDefined;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AsDefined);}
                    };
                }
            }
        }

        return flyweightAsDefined;
    }

    private static FixSideField flyweightOpposite;
    public static final FixSideField flyweightOpposite()
    {
        if (flyweightOpposite == null)
        {
            synchronized(FixSideField.class)
            {
                if (flyweightOpposite == null)
                {
                    flyweightOpposite  = new FixSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Opposite;}
                     public String  getValueDescription()             {return text_Opposite;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Opposite).append("|").append(text_Opposite).append("]").toString();}
                     public boolean isOpposite()                      {return true;}
                     public char    charValue()                       {return Opposite;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Opposite);}
                    };
                }
            }
        }

        return flyweightOpposite;
    }


    public boolean isBuy()               {return false;}
    public boolean isSell()              {return false;}
    public boolean isBuyMinus()          {return false;}
    public boolean isSellPlus()          {return false;}
    public boolean isSellShort()         {return false;}
    public boolean isSellShortExempt()   {return false;}
    public boolean isUndisclosed()       {return false;}
    public boolean isCross()             {return false;}
    public boolean isCrossShort()        {return false;}
    public boolean isAsDefined()         {return false;}
    public boolean isOpposite()          {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixSideField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixSideField create(final char param)
    {
        switch (param)
        {                                                                                           
            case Buy:             return flyweightBuy();
            case Sell:            return flyweightSell();
            case BuyMinus:        return flyweightBuyMinus();
            case SellPlus:        return flyweightSellPlus();
            case SellShort:       return flyweightSellShort();
            case SellShortExempt: return flyweightSellShortExempt();
            case Undisclosed:     return flyweightUndisclosed();
            case Cross:           return flyweightCross();
            case CrossShort:      return flyweightCrossShort();
            case AsDefined:       return flyweightAsDefined();
            case Opposite:        return flyweightOpposite();
        }
                                                                                                    
        return null;
    }                                                                                               
}
