package com.cboe.cfix.fix.fix42.generated.messages;

/**
 * FixQuoteAcknowledgementMessage.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's QuoteAcknowledgement Message.
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import java.util.*;

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.cfix.fix.fix42.field.*;
import com.cboe.cfix.fix.fix42.generated.fields.*;
import com.cboe.cfix.fix.fix42.generated.helpers.*;
import com.cboe.cfix.fix.util.*;
import com.cboe.client.util.*;
import com.cboe.infrastructureServices.foundationFramework.utilities.*;

public class FixQuoteAcknowledgementMessage extends FixMessage
{   
    public static final String MsgType        = "b";
    public static final char   MsgTypeAsChar  = 'b';
    public static final char[] MsgTypeAsChars = {'b'};
    public static final String MsgTypeName    = "QuoteAcknowledgement";

    public FixQuoteReqIDField            fieldQuoteReqID;
    public FixQuoteIDField               fieldQuoteID;
    public FixQuoteAckStatusField        fieldQuoteAckStatus;
    public FixQuoteRejectReasonField     fieldQuoteRejectReason;
    public FixQuoteResponseLevelField    fieldQuoteResponseLevel;
    public FixTradingSessionIDField      fieldTradingSessionID;
    public FixTextField                  fieldText;
    public FixNoQuoteSetsField           fieldNoQuoteSets;
    public QuoteSetsGroup[]              groupQuoteSets;
    public List                          additionalUserFields;

    public static class QuoteSetsGroup implements PrettyPrintWriterVisitorIF
    {   
        public FixQuoteSetIDField            fieldQuoteSetID;
        public FixUnderlyingSymbolField      fieldUnderlyingSymbol;
        public FixUnderlyingSymbolSfxField   fieldUnderlyingSymbolSfx;
        public FixUnderlyingSecurityIDField  fieldUnderlyingSecurityID;
        public FixUnderlyingIDSourceField    fieldUnderlyingIDSource;
        public FixUnderlyingSecurityTypeField fieldUnderlyingSecurityType;
        public FixUnderlyingMaturityMonthYearField fieldUnderlyingMaturityMonthYear;
        public FixUnderlyingMaturityDayField fieldUnderlyingMaturityDay;
        public FixUnderlyingPutOrCallField   fieldUnderlyingPutOrCall;
        public FixUnderlyingStrikePriceField fieldUnderlyingStrikePrice;
        public FixUnderlyingOptAttributeField fieldUnderlyingOptAttribute;
        public FixUnderlyingContractMultiplierField fieldUnderlyingContractMultiplier;
        public FixUnderlyingCouponRateField  fieldUnderlyingCouponRate;
        public FixUnderlyingSecurityExchangeField fieldUnderlyingSecurityExchange;
        public FixUnderlyingIssuerField      fieldUnderlyingIssuer;
        //     FixEncodedUnderlyingIssuerLenField fieldEncodedUnderlyingIssuerLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        //     FixEncodedUnderlyingIssuerField fieldEncodedUnderlyingIssuer;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        public FixUnderlyingSecurityDescField fieldUnderlyingSecurityDesc;
        //     FixEncodedUnderlyingSecurityDescLenField fieldEncodedUnderlyingSecurityDescLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        //     FixEncodedUnderlyingSecurityDescField fieldEncodedUnderlyingSecurityDesc;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        public FixTotQuoteEntriesField       fieldTotQuoteEntries;
        public FixNoQuoteEntriesField        fieldNoQuoteEntries;
        public QuoteEntriesGroup[]           groupQuoteEntries;

        public String toString()
        {
            PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

            accept(prettyPrintWriter);

            return prettyPrintWriter.toString();
        }

        public void accept(PrettyPrintWriterIF prettyPrintWriter)
        {
            prettyPrintWriter.startPrintingGroup("QuoteSetsGroup");  
            prettyPrintWriter.printGroupItem(fieldQuoteSetID);
            prettyPrintWriter.printGroupItem(fieldUnderlyingSymbol);
            prettyPrintWriter.printGroupItem(fieldUnderlyingSymbolSfx);
            prettyPrintWriter.printGroupItem(fieldUnderlyingSecurityID);
            prettyPrintWriter.printGroupItem(fieldUnderlyingIDSource);
            prettyPrintWriter.printGroupItem(fieldUnderlyingSecurityType);
            prettyPrintWriter.printGroupItem(fieldUnderlyingMaturityMonthYear);
            prettyPrintWriter.printGroupItem(fieldUnderlyingMaturityDay);
            prettyPrintWriter.printGroupItem(fieldUnderlyingPutOrCall);
            prettyPrintWriter.printGroupItem(fieldUnderlyingStrikePrice);
            prettyPrintWriter.printGroupItem(fieldUnderlyingOptAttribute);
            prettyPrintWriter.printGroupItem(fieldUnderlyingContractMultiplier);
            prettyPrintWriter.printGroupItem(fieldUnderlyingCouponRate);
            prettyPrintWriter.printGroupItem(fieldUnderlyingSecurityExchange);
            prettyPrintWriter.printGroupItem(fieldUnderlyingIssuer);
            prettyPrintWriter.printGroupItem(fieldUnderlyingSecurityDesc);
            prettyPrintWriter.printGroupItem(fieldTotQuoteEntries);
            prettyPrintWriter.printGroupItem(fieldNoQuoteEntries);

            if (groupQuoteEntries != null)
            {
                for (int i = 0; i < groupQuoteEntries.length; i++)
                {
                    if (groupQuoteEntries[i] != null) groupQuoteEntries[i].accept(prettyPrintWriter);
                }
            }                                                                                             

            prettyPrintWriter.endPrintingGroup();
        }                                                                                                 

        public void accept(FixMessageBuilderIF fixMessageBuilder)
        {                                                                                             
            fixMessageBuilder.append(fieldQuoteSetID);
            fixMessageBuilder.append(fieldUnderlyingSymbol);
            fixMessageBuilder.append(fieldUnderlyingSymbolSfx);
            fixMessageBuilder.append(fieldUnderlyingSecurityID);
            fixMessageBuilder.append(fieldUnderlyingIDSource);
            fixMessageBuilder.append(fieldUnderlyingSecurityType);
            fixMessageBuilder.append(fieldUnderlyingMaturityMonthYear);
            fixMessageBuilder.append(fieldUnderlyingMaturityDay);
            fixMessageBuilder.append(fieldUnderlyingPutOrCall);
            fixMessageBuilder.append(fieldUnderlyingStrikePrice);
            fixMessageBuilder.append(fieldUnderlyingOptAttribute);
            fixMessageBuilder.append(fieldUnderlyingContractMultiplier);
            fixMessageBuilder.append(fieldUnderlyingCouponRate);
            fixMessageBuilder.append(fieldUnderlyingSecurityExchange);
            fixMessageBuilder.append(fieldUnderlyingIssuer);
            fixMessageBuilder.append(fieldUnderlyingSecurityDesc);
            fixMessageBuilder.append(fieldTotQuoteEntries);
            fixMessageBuilder.append(fieldNoQuoteEntries);

            if (groupQuoteEntries != null)
            {
                for (int i = 0; i < groupQuoteEntries.length; i++)
                {
                    if (groupQuoteEntries[i] != null) groupQuoteEntries[i].accept(fixMessageBuilder);
                }
            }                                                                                             
        }                                                                                                 
    }

    public static class QuoteEntriesGroup implements PrettyPrintWriterVisitorIF
    {   
        public FixQuoteEntryIDField          fieldQuoteEntryID;
        public FixSymbolField                fieldSymbol;
        public FixSymbolSfxField             fieldSymbolSfx;
        public FixSecurityIDField            fieldSecurityID;
        public FixIDSourceField              fieldIDSource;
        public FixSecurityTypeField          fieldSecurityType;
        public FixMaturityMonthYearField     fieldMaturityMonthYear;
        public FixMaturityDayField           fieldMaturityDay;
        public FixPutOrCallField             fieldPutOrCall;
        public FixStrikePriceField           fieldStrikePrice;
        public FixOptAttributeField          fieldOptAttribute;
        public FixContractMultiplierField    fieldContractMultiplier;
        public FixCouponRateField            fieldCouponRate;
        public FixSecurityExchangeField      fieldSecurityExchange;
        public FixIssuerField                fieldIssuer;
        public FixEncodedIssuerLenField      fieldEncodedIssuerLen;
        public FixEncodedIssuerField         fieldEncodedIssuer;
        public FixSecurityDescField          fieldSecurityDesc;
        public FixEncodedSecurityDescLenField fieldEncodedSecurityDescLen;
        public FixEncodedSecurityDescField   fieldEncodedSecurityDesc;
        public FixQuoteEntryRejectReasonField fieldQuoteEntryRejectReason;
        public FixCboeQuoteUpdateControlIDField fieldCboeQuoteUpdateControlID;

        public String toString()
        {
            PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

            accept(prettyPrintWriter);

            return prettyPrintWriter.toString();
        }

        public void accept(PrettyPrintWriterIF prettyPrintWriter)
        {
            prettyPrintWriter.startPrintingGroup("QuoteEntriesGroup");  
            prettyPrintWriter.printGroupItem(fieldQuoteEntryID);
            prettyPrintWriter.printGroupItem(fieldSymbol);
            prettyPrintWriter.printGroupItem(fieldSymbolSfx);
            prettyPrintWriter.printGroupItem(fieldSecurityID);
            prettyPrintWriter.printGroupItem(fieldIDSource);
            prettyPrintWriter.printGroupItem(fieldSecurityType);
            prettyPrintWriter.printGroupItem(fieldMaturityMonthYear);
            prettyPrintWriter.printGroupItem(fieldMaturityDay);
            prettyPrintWriter.printGroupItem(fieldPutOrCall);
            prettyPrintWriter.printGroupItem(fieldStrikePrice);
            prettyPrintWriter.printGroupItem(fieldOptAttribute);
            prettyPrintWriter.printGroupItem(fieldContractMultiplier);
            prettyPrintWriter.printGroupItem(fieldCouponRate);
            prettyPrintWriter.printGroupItem(fieldSecurityExchange);
            prettyPrintWriter.printGroupItem(fieldIssuer);
            prettyPrintWriter.printGroupItem(fieldEncodedIssuerLen);
            prettyPrintWriter.printGroupItem(fieldEncodedIssuer);
            prettyPrintWriter.printGroupItem(fieldSecurityDesc);
            prettyPrintWriter.printGroupItem(fieldEncodedSecurityDescLen);
            prettyPrintWriter.printGroupItem(fieldEncodedSecurityDesc);
            prettyPrintWriter.printGroupItem(fieldQuoteEntryRejectReason);
            prettyPrintWriter.printGroupItem(fieldCboeQuoteUpdateControlID);

            prettyPrintWriter.endPrintingGroup();
        }                                                                                                 

        public void accept(FixMessageBuilderIF fixMessageBuilder)
        {                                                                                             
            fixMessageBuilder.append(fieldQuoteEntryID);
            fixMessageBuilder.append(fieldSymbol);
            fixMessageBuilder.append(fieldSymbolSfx);
            fixMessageBuilder.append(fieldSecurityID);
            fixMessageBuilder.append(fieldIDSource);
            fixMessageBuilder.append(fieldSecurityType);
            fixMessageBuilder.append(fieldMaturityMonthYear);
            fixMessageBuilder.append(fieldMaturityDay);
            fixMessageBuilder.append(fieldPutOrCall);
            fixMessageBuilder.append(fieldStrikePrice);
            fixMessageBuilder.append(fieldOptAttribute);
            fixMessageBuilder.append(fieldContractMultiplier);
            fixMessageBuilder.append(fieldCouponRate);
            fixMessageBuilder.append(fieldSecurityExchange);
            fixMessageBuilder.append(fieldIssuer);
            fixMessageBuilder.append(fieldEncodedIssuerLen);
            fixMessageBuilder.append(fieldEncodedIssuer);
            fixMessageBuilder.append(fieldSecurityDesc);
            fixMessageBuilder.append(fieldEncodedSecurityDescLen);
            fixMessageBuilder.append(fieldEncodedSecurityDesc);
            fixMessageBuilder.append(fieldQuoteEntryRejectReason);
            fixMessageBuilder.append(fieldCboeQuoteUpdateControlID);
        }                                                                                                 
    }

    public FixQuoteAcknowledgementMessage()
    {

    }

    public boolean isFixQuoteAcknowledgementMessage() {return true;}
    public String getMsgType()        {return MsgType;}
    public char   getMsgTypeAsChar()  {return MsgTypeAsChar;}
    public char[] getMsgTypeAsChars() {return MsgTypeAsChars;}
    public String getMsgTypeName()    {return MsgTypeName;}
    
    public String toString()
    {
        PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

        accept(prettyPrintWriter);

        return prettyPrintWriter.toString();
    }

    public void accept(PrettyPrintWriterIF prettyPrintWriter)
    {
        prettyPrintWriter.startPrintingGroup(MsgTypeName);

        super.accept(prettyPrintWriter);
                                                                                                      
        prettyPrintWriter.printGroupItem(fieldQuoteReqID);
        prettyPrintWriter.printGroupItem(fieldQuoteID);
        prettyPrintWriter.printGroupItem(fieldQuoteAckStatus);
        prettyPrintWriter.printGroupItem(fieldQuoteRejectReason);
        prettyPrintWriter.printGroupItem(fieldQuoteResponseLevel);
        prettyPrintWriter.printGroupItem(fieldTradingSessionID);
        prettyPrintWriter.printGroupItem(fieldText);
        prettyPrintWriter.printGroupItem(fieldNoQuoteSets);
        if (groupQuoteSets != null)
        {
            for (int i = 0; i < groupQuoteSets.length; i++)
            {
                if (groupQuoteSets[i] != null) groupQuoteSets[i].accept(prettyPrintWriter);
            }
        }                                                                                             

        prettyPrintWriter.endPrintingGroup();
    }                                                                                                 

    public void accept(FixMessageBuilderIF fixMessageBuilder)
    {
        super.accept(fixMessageBuilder);
                                                                                                      
        fixMessageBuilder.append(fieldQuoteReqID);
        fixMessageBuilder.append(fieldQuoteID);
        fixMessageBuilder.append(fieldQuoteAckStatus);
        fixMessageBuilder.append(fieldQuoteRejectReason);
        fixMessageBuilder.append(fieldQuoteResponseLevel);
        fixMessageBuilder.append(fieldTradingSessionID);
        fixMessageBuilder.append(fieldText);
        fixMessageBuilder.append(fieldNoQuoteSets);
        if (groupQuoteSets != null)
        {
            for (int i = 0; i < groupQuoteSets.length; i++)
            {
                if (groupQuoteSets[i] != null) groupQuoteSets[i].accept(fixMessageBuilder);
            }
        }                                                                                             

        if (additionalUserFields != null)
        {
            for (Iterator iterator = additionalUserFields.iterator(); iterator.hasNext(); )
            {
                fixMessageBuilder.append((FixFieldIF) iterator.next());
            }
        }
    }                                                                                                 

    public PackedIntArrayIF validate(FixPacketIF fixPacket, PackedIntArrayIF foundErrors, int validationFlags, int debugFlags)
    {
        if (fieldSenderCompID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSenderCompIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldTargetCompID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixTargetCompIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldMsgSeqNum == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixMsgSeqNumField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldSendingTime == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSendingTimeField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldQuoteAckStatus == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixQuoteAckStatusField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        return foundErrors;
    }

    private static final int STATE_QuoteSetsGroup = 2;
    private static final int STATE_QuoteEntriesGroup = 3;

    private String toStateString(int state)
    {
        switch (state)
        {
            case STATE_Header: return "State[Header]";
            case STATE_Field:  return "State[Field]";
            case STATE_QuoteSetsGroup: return "State[QuoteSetsGroup]";
            case STATE_QuoteEntriesGroup: return "State[QuoteEntriesGroup]";
        }

        return "???";
    }
    
    public PackedIntArrayIF build(FixPacketIF fixPacket, PackedIntArrayIF foundErrors, int validationFlags, int debugFlags)
    {
        char[] array          = fixPacket.getArray();
        int    numTags        = fixPacket.getTagPositionLength();
        int    currentState   = STATE_Header;
        int    tag;
        int    offset;
        int    length;
        int    numInGroup;
        int    group;
        int    currentPosition;
        int    current_groupQuoteSets = -1; // this group has a starting field which we have to find first
        int    current_groupQuoteEntries = -1; // this group has a starting field which we have to find first

        for (currentPosition = 0; currentPosition < numTags; currentPosition++)
        {
            if (!foundErrors.isEmpty() && BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                break;
            }

            tag    = fixPacket.getTag(currentPosition);
            offset = fixPacket.getValueOffset(currentPosition);
            length = fixPacket.getValueLength(currentPosition);

            if ((BitHelper.isBitMaskSet(debugFlags, FixSessionDebugIF.MESSAGE_SHOW_BUILD_TRANSITIONS)))
            {
                String threadName = Thread.currentThread().getName();
                String stateString = toStateString(currentState);
                StringBuilder sb = new StringBuilder(threadName.length()+stateString.length()+50);
                if (currentPosition > 0)
                {
                    sb.append(threadName).append(" --> ").append(stateString);
                    Log.information(sb.toString());
                    sb.setLength(0);
                }

                sb.append(threadName).append("Tag[").append(currentPosition).append("] = ").append(FixFieldHelper.getTagName(tag)).append("(").append(tag).append(") ").append(stateString);
                Log.information(sb.toString());
            }

            switch (tag)
            {
                case FixQuoteReqIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldQuoteReqID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldQuoteReqID = FixQuoteReqIDField.create(array, offset, length);
                    if (fieldQuoteReqID == null || !fieldQuoteReqID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixQuoteIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldQuoteID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldQuoteID = FixQuoteIDField.create(array, offset, length);
                    if (fieldQuoteID == null || !fieldQuoteID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixQuoteAckStatusField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldQuoteAckStatus != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldQuoteAckStatus = FixQuoteAckStatusField.create(array, offset, length);
                    if (fieldQuoteAckStatus == null || !fieldQuoteAckStatus.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixQuoteRejectReasonField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldQuoteRejectReason != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldQuoteRejectReason = FixQuoteRejectReasonField.create(array, offset, length);
                    if (fieldQuoteRejectReason == null || !fieldQuoteRejectReason.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixQuoteResponseLevelField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldQuoteResponseLevel != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldQuoteResponseLevel = FixQuoteResponseLevelField.create(array, offset, length);
                    if (fieldQuoteResponseLevel == null || !fieldQuoteResponseLevel.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixTradingSessionIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldTradingSessionID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldTradingSessionID = FixTradingSessionIDField.create(array, offset, length);
                    if (fieldTradingSessionID == null || !fieldTradingSessionID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixTextField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldText != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldText = FixTextField.create(array, offset, length);
                    if (fieldText == null || !fieldText.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixNoQuoteSetsField.TagID:
                {
                    if (fieldNoQuoteSets != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldNoQuoteSets = FixNoQuoteSetsField.create(array, offset, length);
                    if (fieldNoQuoteSets == null || !fieldNoQuoteSets.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    currentState = STATE_QuoteSetsGroup;

                    numInGroup = fieldNoQuoteSets.intValue();

                    groupQuoteSets = new QuoteSetsGroup[numInGroup];
                    for (group = 0; group < numInGroup; group++)
                    {
                        groupQuoteSets[group] = new QuoteSetsGroup();
                    }

                    continue;
                }
                case FixQuoteSetIDField.TagID:
                {

                    if (currentState != STATE_QuoteSetsGroup &&
                        currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    current_groupQuoteSets++;

                    currentState = STATE_QuoteSetsGroup;

                    if (current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldQuoteSetID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldQuoteSetID = FixQuoteSetIDField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldQuoteSetID == null || !groupQuoteSets[current_groupQuoteSets].fieldQuoteSetID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingSymbolField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSymbol != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSymbol = FixUnderlyingSymbolField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSymbol == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSymbol.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingSymbolSfxField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSymbolSfx != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSymbolSfx = FixUnderlyingSymbolSfxField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSymbolSfx == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSymbolSfx.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingSecurityIDField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityID = FixUnderlyingSecurityIDField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityID == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingIDSourceField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingIDSource != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingIDSource = FixUnderlyingIDSourceField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingIDSource == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingIDSource.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingSecurityTypeField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityType != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityType = FixUnderlyingSecurityTypeField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityType == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingMaturityMonthYearField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingMaturityMonthYear != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingMaturityMonthYear = FixUnderlyingMaturityMonthYearField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingMaturityMonthYear == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingMaturityMonthYear.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingMaturityDayField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingMaturityDay != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingMaturityDay = FixUnderlyingMaturityDayField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingMaturityDay == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingMaturityDay.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingPutOrCallField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingPutOrCall != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingPutOrCall = FixUnderlyingPutOrCallField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingPutOrCall == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingPutOrCall.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingStrikePriceField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingStrikePrice != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingStrikePrice = FixUnderlyingStrikePriceField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingStrikePrice == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingStrikePrice.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingOptAttributeField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingOptAttribute != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingOptAttribute = FixUnderlyingOptAttributeField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingOptAttribute == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingOptAttribute.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingContractMultiplierField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingContractMultiplier != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingContractMultiplier = FixUnderlyingContractMultiplierField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingContractMultiplier == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingContractMultiplier.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingCouponRateField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingCouponRate != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingCouponRate = FixUnderlyingCouponRateField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingCouponRate == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingCouponRate.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingSecurityExchangeField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityExchange != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityExchange = FixUnderlyingSecurityExchangeField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityExchange == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityExchange.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingIssuerField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingIssuer != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingIssuer = FixUnderlyingIssuerField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingIssuer == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingIssuer.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixEncodedUnderlyingIssuerLenField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedUnderlyingIssuerLenField unusedByCboeField = FixEncodedUnderlyingIssuerLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixEncodedUnderlyingIssuerField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedUnderlyingIssuerField unusedByCboeField = FixEncodedUnderlyingIssuerField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixUnderlyingSecurityDescField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityDesc != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityDesc = FixUnderlyingSecurityDescField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityDesc == null || !groupQuoteSets[current_groupQuoteSets].fieldUnderlyingSecurityDesc.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixEncodedUnderlyingSecurityDescLenField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedUnderlyingSecurityDescLenField unusedByCboeField = FixEncodedUnderlyingSecurityDescLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixEncodedUnderlyingSecurityDescField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedUnderlyingSecurityDescField unusedByCboeField = FixEncodedUnderlyingSecurityDescField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixTotQuoteEntriesField.TagID:
                {
                    if (currentState != STATE_QuoteSetsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldTotQuoteEntries != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldTotQuoteEntries = FixTotQuoteEntriesField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldTotQuoteEntries == null || !groupQuoteSets[current_groupQuoteSets].fieldTotQuoteEntries.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixNoQuoteEntriesField.TagID:
                {
                    if (current_groupQuoteSets < 0 || current_groupQuoteSets >= groupQuoteSets.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].fieldNoQuoteEntries != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupQuoteSets[current_groupQuoteSets].groupQuoteEntries != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupQuoteSets[current_groupQuoteSets].fieldNoQuoteEntries = FixNoQuoteEntriesField.create(array, offset, length);
                    if (groupQuoteSets[current_groupQuoteSets].fieldNoQuoteEntries == null || !groupQuoteSets[current_groupQuoteSets].fieldNoQuoteEntries.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    currentState = STATE_QuoteEntriesGroup;

                    current_groupQuoteEntries = -1;

                    numInGroup = groupQuoteSets[current_groupQuoteSets].fieldNoQuoteEntries.intValue();

                    groupQuoteSets[current_groupQuoteSets].groupQuoteEntries = new QuoteEntriesGroup[numInGroup];
                    for (group = 0; group < numInGroup; group++)
                    {
                        groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[group] = new QuoteEntriesGroup();
                    }

                    continue;
                }
                case FixQuoteEntryIDField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    current_groupQuoteEntries++;

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldQuoteEntryID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldQuoteEntryID = FixQuoteEntryIDField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldQuoteEntryID == null || !curGroupQuoteEntries.fieldQuoteEntryID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSymbolField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldSymbol != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldSymbol = FixSymbolField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldSymbol == null || !curGroupQuoteEntries.fieldSymbol.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSymbolSfxField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldSymbolSfx != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldSymbolSfx = FixSymbolSfxField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldSymbolSfx == null || !curGroupQuoteEntries.fieldSymbolSfx.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSecurityIDField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldSecurityID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldSecurityID = FixSecurityIDField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldSecurityID == null || !curGroupQuoteEntries.fieldSecurityID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixIDSourceField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldIDSource != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldIDSource = FixIDSourceField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldIDSource == null || !curGroupQuoteEntries.fieldIDSource.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSecurityTypeField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldSecurityType != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldSecurityType = FixSecurityTypeField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldSecurityType == null || !curGroupQuoteEntries.fieldSecurityType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixMaturityMonthYearField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldMaturityMonthYear != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldMaturityMonthYear = FixMaturityMonthYearField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldMaturityMonthYear == null || !curGroupQuoteEntries.fieldMaturityMonthYear.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixMaturityDayField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldMaturityDay != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldMaturityDay = FixMaturityDayField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldMaturityDay == null || !curGroupQuoteEntries.fieldMaturityDay.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixPutOrCallField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldPutOrCall != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldPutOrCall = FixPutOrCallField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldPutOrCall == null || !curGroupQuoteEntries.fieldPutOrCall.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixStrikePriceField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldStrikePrice != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldStrikePrice = FixStrikePriceField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldStrikePrice == null || !curGroupQuoteEntries.fieldStrikePrice.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixOptAttributeField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldOptAttribute != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldOptAttribute = FixOptAttributeField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldOptAttribute == null || !curGroupQuoteEntries.fieldOptAttribute.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixContractMultiplierField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldContractMultiplier != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldContractMultiplier = FixContractMultiplierField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldContractMultiplier == null || !curGroupQuoteEntries.fieldContractMultiplier.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixCouponRateField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldCouponRate != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldCouponRate = FixCouponRateField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldCouponRate == null || !curGroupQuoteEntries.fieldCouponRate.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSecurityExchangeField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldSecurityExchange != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldSecurityExchange = FixSecurityExchangeField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldSecurityExchange == null || !curGroupQuoteEntries.fieldSecurityExchange.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixIssuerField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldIssuer != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldIssuer = FixIssuerField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldIssuer == null || !curGroupQuoteEntries.fieldIssuer.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixEncodedIssuerLenField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldEncodedIssuerLen != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldEncodedIssuerLen = FixEncodedIssuerLenField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldEncodedIssuerLen == null || !curGroupQuoteEntries.fieldEncodedIssuerLen.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixEncodedIssuerField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldEncodedIssuer != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldEncodedIssuer = FixEncodedIssuerField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldEncodedIssuer == null || !curGroupQuoteEntries.fieldEncodedIssuer.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSecurityDescField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldSecurityDesc != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldSecurityDesc = FixSecurityDescField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldSecurityDesc == null || !curGroupQuoteEntries.fieldSecurityDesc.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixEncodedSecurityDescLenField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldEncodedSecurityDescLen != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldEncodedSecurityDescLen = FixEncodedSecurityDescLenField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldEncodedSecurityDescLen == null || !curGroupQuoteEntries.fieldEncodedSecurityDescLen.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixEncodedSecurityDescField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldEncodedSecurityDesc != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldEncodedSecurityDesc = FixEncodedSecurityDescField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldEncodedSecurityDesc == null || !curGroupQuoteEntries.fieldEncodedSecurityDesc.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixQuoteEntryRejectReasonField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldQuoteEntryRejectReason != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldQuoteEntryRejectReason = FixQuoteEntryRejectReasonField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldQuoteEntryRejectReason == null || !curGroupQuoteEntries.fieldQuoteEntryRejectReason.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixCboeQuoteUpdateControlIDField.TagID:
                {
                    if (currentState != STATE_QuoteEntriesGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupQuoteSets < 0 ||
                        current_groupQuoteSets >= groupQuoteSets.length ||
                        current_groupQuoteEntries < 0 ||
                        current_groupQuoteEntries >= groupQuoteSets[current_groupQuoteSets].groupQuoteEntries.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    QuoteEntriesGroup curGroupQuoteEntries = groupQuoteSets[current_groupQuoteSets].groupQuoteEntries[current_groupQuoteEntries];

                    if (curGroupQuoteEntries.fieldCboeQuoteUpdateControlID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    curGroupQuoteEntries.fieldCboeQuoteUpdateControlID = FixCboeQuoteUpdateControlIDField.create(array, offset, length);
                    if (curGroupQuoteEntries.fieldCboeQuoteUpdateControlID == null || !curGroupQuoteEntries.fieldCboeQuoteUpdateControlID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
            }

            if (tag >= FixMessageIF.USER_DEFINED_TAGS_START)
            {
                if (currentState == STATE_Field || currentState == STATE_Header)
                {
                    if (additionalUserFields == null)
                    {
                        additionalUserFields = new ArrayList();
                    }

                    additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                    continue;
                }

                if (currentState == STATE_QuoteSetsGroup)
                {
                    if (current_groupQuoteSets == groupQuoteSets.length - 1)
                    {
                        if (additionalUserFields == null)
                        {
                            additionalUserFields = new ArrayList();
                        }

                        additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                        continue;
                    }

                    foundErrors.add(BitHelper.packInt(FixException.UNEXPECTED_USER_DEFINED_TAG_WITHIN_GROUP, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return foundErrors;
                    }
                    continue;
                }
            }

            if (!buildHeaderTrailer(array, tag, offset, length, currentState, currentPosition, foundErrors, validationFlags, debugFlags))
            {
                foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG, currentPosition));

                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                {
                    return foundErrors;
                }

                continue;
            }
        }

        if (groupQuoteSets != null && current_groupQuoteSets != groupQuoteSets.length - 1)
        {
            foundErrors.add(BitHelper.packInt(FixException.FEWER_GROUPS_THAN_SPECIFIED, currentPosition));

            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        if ((BitHelper.isBitMaskSet(debugFlags, FixSessionDebugIF.MESSAGE_SHOW_BUILD_TRANSITIONS)))
        {
            String threadName = Thread.currentThread().getName();
            String stateString = toStateString(currentState);
            StringBuilder sb = new StringBuilder(threadName.length()+stateString.length()+10);
            sb.append(threadName).append(" --> ").append(stateString);
            Log.information(sb.toString());
        }

        return foundErrors;
    }
}
