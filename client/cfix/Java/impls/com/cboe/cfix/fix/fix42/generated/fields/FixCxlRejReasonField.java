package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixCxlRejReasonField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [102] (known as CxlRejReason).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixCxlRejReasonField implements FixFieldIF, HasIntValueIF
{   
    public static final int    TagID         =  102;
    public static final String TagIDAsString = "102";
    public static final char[] TagIDAsChars  = {'1','0','2'};
    public static final String TagName       = "CxlRejReason";
    public static final String TagFixType    = "INT";
    public static final char[]  taggedchars_value0 = {'1','0','2', EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {'1','0','2', EQUALSchar, ONEchar,  SOHchar};

    public static final int     TooLateToCancel              = 0;
    public static final String  string_TooLateToCancel       = "0";
    public static final String  tagged_TooLateToCancel       = TagIDAsString + EQUALS + string_TooLateToCancel + SOH;
    public static final char[]  taggedchars_TooLateToCancel  = {'1','0','2', EQUALSchar, '0', SOHchar};
    public static final String  text_TooLateToCancel         = "TooLateToCancel";
    public static final int     UnknownOrder                 = 1;
    public static final String  string_UnknownOrder          = "1";
    public static final String  tagged_UnknownOrder          = TagIDAsString + EQUALS + string_UnknownOrder + SOH;
    public static final char[]  taggedchars_UnknownOrder     = {'1','0','2', EQUALSchar, '1', SOHchar};
    public static final String  text_UnknownOrder            = "UnknownOrder";
    public static final int     BrokerOption                 = 2;
    public static final String  string_BrokerOption          = "2";
    public static final String  tagged_BrokerOption          = TagIDAsString + EQUALS + string_BrokerOption + SOH;
    public static final char[]  taggedchars_BrokerOption     = {'1','0','2', EQUALSchar, '2', SOHchar};
    public static final String  text_BrokerOption            = "BrokerOption";
    public static final int     AlreadyPending               = 3;
    public static final String  string_AlreadyPending        = "3";
    public static final String  tagged_AlreadyPending        = TagIDAsString + EQUALS + string_AlreadyPending + SOH;
    public static final char[]  taggedchars_AlreadyPending   = {'1','0','2', EQUALSchar, '3', SOHchar};
    public static final String  text_AlreadyPending          = "AlreadyPending";

    private static FixCxlRejReasonField flyweightTooLateToCancel;
    public static final FixCxlRejReasonField flyweightTooLateToCancel()
    {
        if (flyweightTooLateToCancel == null)
        {
            synchronized(FixCxlRejReasonField.class)
            {
                if (flyweightTooLateToCancel == null)
                {
                    flyweightTooLateToCancel  = new FixCxlRejReasonField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_TooLateToCancel;}
                     public String  getValueDescription()             {return text_TooLateToCancel;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_TooLateToCancel).append("|").append(text_TooLateToCancel).append("]").toString();}
                     public boolean isTooLateToCancel()               {return true;}
                     public int     intValue()                        {return TooLateToCancel;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_TooLateToCancel);}
                    };
                }
            }
        }

        return flyweightTooLateToCancel;
    }

    private static FixCxlRejReasonField flyweightUnknownOrder;
    public static final FixCxlRejReasonField flyweightUnknownOrder()
    {
        if (flyweightUnknownOrder == null)
        {
            synchronized(FixCxlRejReasonField.class)
            {
                if (flyweightUnknownOrder == null)
                {
                    flyweightUnknownOrder  = new FixCxlRejReasonField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_UnknownOrder;}
                     public String  getValueDescription()             {return text_UnknownOrder;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnknownOrder).append("|").append(text_UnknownOrder).append("]").toString();}
                     public boolean isUnknownOrder()                  {return true;}
                     public int     intValue()                        {return UnknownOrder;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnknownOrder);}
                    };
                }
            }
        }

        return flyweightUnknownOrder;
    }

    private static FixCxlRejReasonField flyweightBrokerOption;
    public static final FixCxlRejReasonField flyweightBrokerOption()
    {
        if (flyweightBrokerOption == null)
        {
            synchronized(FixCxlRejReasonField.class)
            {
                if (flyweightBrokerOption == null)
                {
                    flyweightBrokerOption  = new FixCxlRejReasonField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_BrokerOption;}
                     public String  getValueDescription()             {return text_BrokerOption;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_BrokerOption).append("|").append(text_BrokerOption).append("]").toString();}
                     public boolean isBrokerOption()                  {return true;}
                     public int     intValue()                        {return BrokerOption;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_BrokerOption);}
                    };
                }
            }
        }

        return flyweightBrokerOption;
    }

    private static FixCxlRejReasonField flyweightAlreadyPending;
    public static final FixCxlRejReasonField flyweightAlreadyPending()
    {
        if (flyweightAlreadyPending == null)
        {
            synchronized(FixCxlRejReasonField.class)
            {
                if (flyweightAlreadyPending == null)
                {
                    flyweightAlreadyPending  = new FixCxlRejReasonField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AlreadyPending;}
                     public String  getValueDescription()             {return text_AlreadyPending;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AlreadyPending).append("|").append(text_AlreadyPending).append("]").toString();}
                     public boolean isAlreadyPending()                {return true;}
                     public int     intValue()                        {return AlreadyPending;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AlreadyPending);}
                    };
                }
            }
        }

        return flyweightAlreadyPending;
    }


    public boolean isTooLateToCancel()   {return false;}
    public boolean isUnknownOrder()      {return false;}
    public boolean isBrokerOption()      {return false;}
    public boolean isAlreadyPending()    {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixCxlRejReasonField create(char[] array, int offset, int length)
    {
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static FixCxlRejReasonField create(final int param)
    {
        switch (param)
        {                                                                                           
            case TooLateToCancel: return flyweightTooLateToCancel();
            case UnknownOrder:    return flyweightUnknownOrder();
            case BrokerOption:    return flyweightBrokerOption();
            case AlreadyPending:  return flyweightAlreadyPending();
        }
                                                                                                    
        return null;
    }                                                                                               
}
