package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixExchangeForPhysicalField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [411] (known as ExchangeForPhysical).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;

public abstract class FixExchangeForPhysicalField implements FixFieldIF, HasBooleanValueIF
{   
    public static final int    TagID         =  411;
    public static final String TagIDAsString = "411";
    public static final char[] TagIDAsChars  = {'4','1','1'};
    public static final String TagName       = "ExchangeForPhysical";
    public static final String TagFixType    = "BOOLEAN";

    public static final boolean True               = true;
    public static final String  string_True        = FIX_YES;
    public static final String  tagged_True        = TagIDAsString + EQUALS + string_True + SOH;
    public static final char    char_True          = 'Y';
    public static final char[]  taggedchars_True   = {'4','1','1', EQUALSchar, 'Y', SOHchar};
    public static final String  text_True          = "True";
    public static final boolean False              = false;
    public static final String  string_False       = FIX_NO;
    public static final String  tagged_False       = TagIDAsString + EQUALS + string_False + SOH;
    public static final char    char_False         = 'N';
    public static final char[]  taggedchars_False  = {'4','1','1', EQUALSchar, 'N', SOHchar};
    public static final String  text_False         = "False";

    private static FixExchangeForPhysicalField flyweightTrue;
    public static final FixExchangeForPhysicalField flyweightTrue()
    {
        if (flyweightTrue == null)
        {
            synchronized(FixExchangeForPhysicalField.class)
            {
                if (flyweightTrue == null)
                {
                    flyweightTrue  = new FixExchangeForPhysicalField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_True;}
                     public String  getValueDescription()             {return text_True;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_True).append("|").append(text_True).append("]").toString();}
                     public boolean isTrue()                          {return true;}
                     public boolean booleanValue()                    {return True;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_True);}
                    };
                }
            }
        }

        return flyweightTrue;
    }

    private static FixExchangeForPhysicalField flyweightFalse;
    public static final FixExchangeForPhysicalField flyweightFalse()
    {
        if (flyweightFalse == null)
        {
            synchronized(FixExchangeForPhysicalField.class)
            {
                if (flyweightFalse == null)
                {
                    flyweightFalse  = new FixExchangeForPhysicalField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_False;}
                     public String  getValueDescription()             {return text_False;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_False).append("|").append(text_False).append("]").toString();}
                     public boolean isFalse()                         {return true;}
                     public boolean booleanValue()                    {return False;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_False);}
                    };
                }
            }
        }

        return flyweightFalse;
    }


    public boolean isTrue()    {return false;}
    public boolean isFalse()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixExchangeForPhysicalField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {                                                                                           
            if (array[offset] == char_True)  return flyweightTrue();
            if (array[offset] == char_False) return flyweightFalse();
        }
        return null;
    }

    public static final char[] truefalse_Flyweight  = new char[] {FixFieldIF.FIX_YESchar, FixFieldIF.FIX_NOchar};
    public static FixExchangeForPhysicalField create(boolean param)
    {
        return create(truefalse_Flyweight, param ? 0 : 1, 1);
    }                                                                                               
}
