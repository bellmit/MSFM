package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixQuoteResponseLevelField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [301] (known as QuoteResponseLevel).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixQuoteResponseLevelField implements FixFieldIF, HasIntValueIF
{   
    public static final int    TagID         =  301;
    public static final String TagIDAsString = "301";
    public static final char[] TagIDAsChars  = {'3','0','1'};
    public static final String TagName       = "QuoteResponseLevel";
    public static final String TagFixType    = "INT";
    public static final char[]  taggedchars_value0 = {'3','0','1', EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {'3','0','1', EQUALSchar, ONEchar,  SOHchar};

    public static final int     AckNone               = 0;
    public static final String  string_AckNone        = "0";
    public static final String  tagged_AckNone        = TagIDAsString + EQUALS + string_AckNone + SOH;
    public static final char[]  taggedchars_AckNone   = {'3','0','1', EQUALSchar, '0', SOHchar};
    public static final String  text_AckNone          = "AckNone";
    public static final int     AckError              = 1;
    public static final String  string_AckError       = "1";
    public static final String  tagged_AckError       = TagIDAsString + EQUALS + string_AckError + SOH;
    public static final char[]  taggedchars_AckError  = {'3','0','1', EQUALSchar, '1', SOHchar};
    public static final String  text_AckError         = "AckError";
    public static final int     AckEach               = 2;
    public static final String  string_AckEach        = "2";
    public static final String  tagged_AckEach        = TagIDAsString + EQUALS + string_AckEach + SOH;
    public static final char[]  taggedchars_AckEach   = {'3','0','1', EQUALSchar, '2', SOHchar};
    public static final String  text_AckEach          = "AckEach";

    private static FixQuoteResponseLevelField flyweightAckNone;
    public static final FixQuoteResponseLevelField flyweightAckNone()
    {
        if (flyweightAckNone == null)
        {
            synchronized(FixQuoteResponseLevelField.class)
            {
                if (flyweightAckNone == null)
                {
                    flyweightAckNone  = new FixQuoteResponseLevelField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AckNone;}
                     public String  getValueDescription()             {return text_AckNone;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AckNone).append("|").append(text_AckNone).append("]").toString();}
                     public boolean isAckNone()                       {return true;}
                     public int     intValue()                        {return AckNone;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AckNone);}
                    };
                }
            }
        }

        return flyweightAckNone;
    }

    private static FixQuoteResponseLevelField flyweightAckError;
    public static final FixQuoteResponseLevelField flyweightAckError()
    {
        if (flyweightAckError == null)
        {
            synchronized(FixQuoteResponseLevelField.class)
            {
                if (flyweightAckError == null)
                {
                    flyweightAckError  = new FixQuoteResponseLevelField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AckError;}
                     public String  getValueDescription()             {return text_AckError;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AckError).append("|").append(text_AckError).append("]").toString();}
                     public boolean isAckError()                      {return true;}
                     public int     intValue()                        {return AckError;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AckError);}
                    };
                }
            }
        }

        return flyweightAckError;
    }

    private static FixQuoteResponseLevelField flyweightAckEach;
    public static final FixQuoteResponseLevelField flyweightAckEach()
    {
        if (flyweightAckEach == null)
        {
            synchronized(FixQuoteResponseLevelField.class)
            {
                if (flyweightAckEach == null)
                {
                    flyweightAckEach  = new FixQuoteResponseLevelField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AckEach;}
                     public String  getValueDescription()             {return text_AckEach;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AckEach).append("|").append(text_AckEach).append("]").toString();}
                     public boolean isAckEach()                       {return true;}
                     public int     intValue()                        {return AckEach;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AckEach);}
                    };
                }
            }
        }

        return flyweightAckEach;
    }


    public boolean isAckNone()    {return false;}
    public boolean isAckError()   {return false;}
    public boolean isAckEach()    {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixQuoteResponseLevelField create(char[] array, int offset, int length)
    {
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static FixQuoteResponseLevelField create(final int param)
    {
        switch (param)
        {                                                                                           
            case AckNone:  return flyweightAckNone();
            case AckError: return flyweightAckError();
            case AckEach:  return flyweightAckEach();
        }
                                                                                                    
        return new FixQuoteResponseLevelField()
        {       public int     value = param;
                public boolean hasValue()                                    {return true;}
                public String  getValue()                                    {return StringHelper.intToString(value);}
                public int     intValue()                                    {return AckEach;}
                public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, value);}
        };
    }                                                                                               
}
