package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixPutOrCallField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [201] (known as PutOrCall).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixPutOrCallField implements FixFieldIF, HasIntValueIF
{   
    public static final int    TagID         =  201;
    public static final String TagIDAsString = "201";
    public static final char[] TagIDAsChars  = {'2','0','1'};
    public static final String TagName       = "PutOrCall";
    public static final String TagFixType    = "INT";
    public static final char[]  taggedchars_value0 = {'2','0','1', EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {'2','0','1', EQUALSchar, ONEchar,  SOHchar};

    public static final int     Put               = 0;
    public static final String  string_Put        = "0";
    public static final String  tagged_Put        = TagIDAsString + EQUALS + string_Put + SOH;
    public static final char[]  taggedchars_Put   = {'2','0','1', EQUALSchar, '0', SOHchar};
    public static final String  text_Put          = "Put";
    public static final int     Call              = 1;
    public static final String  string_Call       = "1";
    public static final String  tagged_Call       = TagIDAsString + EQUALS + string_Call + SOH;
    public static final char[]  taggedchars_Call  = {'2','0','1', EQUALSchar, '1', SOHchar};
    public static final String  text_Call         = "Call";

    private static FixPutOrCallField flyweightPut;
    public static final FixPutOrCallField flyweightPut()
    {
        if (flyweightPut == null)
        {
            synchronized(FixPutOrCallField.class)
            {
                if (flyweightPut == null)
                {
                    flyweightPut  = new FixPutOrCallField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Put;}
                     public String  getValueDescription()             {return text_Put;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Put).append("|").append(text_Put).append("]").toString();}
                     public boolean isPut()                           {return true;}
                     public int     intValue()                        {return Put;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Put);}
                    };
                }
            }
        }

        return flyweightPut;
    }

    private static FixPutOrCallField flyweightCall;
    public static final FixPutOrCallField flyweightCall()
    {
        if (flyweightCall == null)
        {
            synchronized(FixPutOrCallField.class)
            {
                if (flyweightCall == null)
                {
                    flyweightCall  = new FixPutOrCallField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Call;}
                     public String  getValueDescription()             {return text_Call;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Call).append("|").append(text_Call).append("]").toString();}
                     public boolean isCall()                          {return true;}
                     public int     intValue()                        {return Call;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Call);}
                    };
                }
            }
        }

        return flyweightCall;
    }


    public boolean isPut()    {return false;}
    public boolean isCall()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixPutOrCallField create(char[] array, int offset, int length)
    {
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static FixPutOrCallField create(final int param)
    {
        switch (param)
        {                                                                                           
            case Put:  return flyweightPut();
            case Call: return flyweightCall();
        }
                                                                                                    
        return null;
    }                                                                                               
}
