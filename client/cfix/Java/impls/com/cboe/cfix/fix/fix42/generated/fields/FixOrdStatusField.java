package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixOrdStatusField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [39] (known as OrdStatus).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixOrdStatusField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  39;
    public static final String TagIDAsString = "39";
    public static final char[] TagIDAsChars  = {'3','9'};
    public static final String TagName       = "OrdStatus";
    public static final String TagFixType    = "CHAR";

    public static final char    New                             = '0';
    public static final String  string_New                      = "0";
    public static final String  tagged_New                      = TagIDAsString + EQUALS + string_New + SOH;
    public static final char[]  taggedchars_New                 = {'3','9', EQUALSchar, '0', SOHchar};
    public static final String  text_New                        = "New";
    public static final char    PartiallyFilled                 = '1';
    public static final String  string_PartiallyFilled          = "1";
    public static final String  tagged_PartiallyFilled          = TagIDAsString + EQUALS + string_PartiallyFilled + SOH;
    public static final char[]  taggedchars_PartiallyFilled     = {'3','9', EQUALSchar, '1', SOHchar};
    public static final String  text_PartiallyFilled            = "PartiallyFilled";
    public static final char    Filled                          = '2';
    public static final String  string_Filled                   = "2";
    public static final String  tagged_Filled                   = TagIDAsString + EQUALS + string_Filled + SOH;
    public static final char[]  taggedchars_Filled              = {'3','9', EQUALSchar, '2', SOHchar};
    public static final String  text_Filled                     = "Filled";
    public static final char    DoneForDay                      = '3';
    public static final String  string_DoneForDay               = "3";
    public static final String  tagged_DoneForDay               = TagIDAsString + EQUALS + string_DoneForDay + SOH;
    public static final char[]  taggedchars_DoneForDay          = {'3','9', EQUALSchar, '3', SOHchar};
    public static final String  text_DoneForDay                 = "DoneForDay";
    public static final char    Canceled                        = '4';
    public static final String  string_Canceled                 = "4";
    public static final String  tagged_Canceled                 = TagIDAsString + EQUALS + string_Canceled + SOH;
    public static final char[]  taggedchars_Canceled            = {'3','9', EQUALSchar, '4', SOHchar};
    public static final String  text_Canceled                   = "Canceled";
    public static final char    Replaced                        = '5';
    public static final String  string_Replaced                 = "5";
    public static final String  tagged_Replaced                 = TagIDAsString + EQUALS + string_Replaced + SOH;
    public static final char[]  taggedchars_Replaced            = {'3','9', EQUALSchar, '5', SOHchar};
    public static final String  text_Replaced                   = "Replaced";
    public static final char    PendingCancel                   = '6';
    public static final String  string_PendingCancel            = "6";
    public static final String  tagged_PendingCancel            = TagIDAsString + EQUALS + string_PendingCancel + SOH;
    public static final char[]  taggedchars_PendingCancel       = {'3','9', EQUALSchar, '6', SOHchar};
    public static final String  text_PendingCancel              = "PendingCancel";
    public static final char    Stopped                         = '7';
    public static final String  string_Stopped                  = "7";
    public static final String  tagged_Stopped                  = TagIDAsString + EQUALS + string_Stopped + SOH;
    public static final char[]  taggedchars_Stopped             = {'3','9', EQUALSchar, '7', SOHchar};
    public static final String  text_Stopped                    = "Stopped";
    public static final char    Rejected                        = '8';
    public static final String  string_Rejected                 = "8";
    public static final String  tagged_Rejected                 = TagIDAsString + EQUALS + string_Rejected + SOH;
    public static final char[]  taggedchars_Rejected            = {'3','9', EQUALSchar, '8', SOHchar};
    public static final String  text_Rejected                   = "Rejected";
    public static final char    Suspended                       = '9';
    public static final String  string_Suspended                = "9";
    public static final String  tagged_Suspended                = TagIDAsString + EQUALS + string_Suspended + SOH;
    public static final char[]  taggedchars_Suspended           = {'3','9', EQUALSchar, '9', SOHchar};
    public static final String  text_Suspended                  = "Suspended";
    public static final char    PendingNew                      = 'A';
    public static final String  string_PendingNew               = "A";
    public static final String  tagged_PendingNew               = TagIDAsString + EQUALS + string_PendingNew + SOH;
    public static final char[]  taggedchars_PendingNew          = {'3','9', EQUALSchar, 'A', SOHchar};
    public static final String  text_PendingNew                 = "PendingNew";
    public static final char    Calculated                      = 'B';
    public static final String  string_Calculated               = "B";
    public static final String  tagged_Calculated               = TagIDAsString + EQUALS + string_Calculated + SOH;
    public static final char[]  taggedchars_Calculated          = {'3','9', EQUALSchar, 'B', SOHchar};
    public static final String  text_Calculated                 = "Calculated";
    public static final char    Expired                         = 'C';
    public static final String  string_Expired                  = "C";
    public static final String  tagged_Expired                  = TagIDAsString + EQUALS + string_Expired + SOH;
    public static final char[]  taggedchars_Expired             = {'3','9', EQUALSchar, 'C', SOHchar};
    public static final String  text_Expired                    = "Expired";
    public static final char    AcceptedForBidding              = 'D';
    public static final String  string_AcceptedForBidding       = "D";
    public static final String  tagged_AcceptedForBidding       = TagIDAsString + EQUALS + string_AcceptedForBidding + SOH;
    public static final char[]  taggedchars_AcceptedForBidding  = {'3','9', EQUALSchar, 'D', SOHchar};
    public static final String  text_AcceptedForBidding         = "AcceptedForBidding";
    public static final char    PendingReplace                  = 'E';
    public static final String  string_PendingReplace           = "E";
    public static final String  tagged_PendingReplace           = TagIDAsString + EQUALS + string_PendingReplace + SOH;
    public static final char[]  taggedchars_PendingReplace      = {'3','9', EQUALSchar, 'E', SOHchar};
    public static final String  text_PendingReplace             = "PendingReplace";

    private static FixOrdStatusField flyweightNew;
    public static final FixOrdStatusField flyweightNew()
    {
        if (flyweightNew == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightNew == null)
                {
                    flyweightNew  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_New;}
                     public String  getValueDescription()             {return text_New;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_New).append("|").append(text_New).append("]").toString();}
                     public boolean isNew()                           {return true;}
                     public char    charValue()                       {return New;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_New);}
                    };
                }
            }
        }

        return flyweightNew;
    }

    private static FixOrdStatusField flyweightPartiallyFilled;
    public static final FixOrdStatusField flyweightPartiallyFilled()
    {
        if (flyweightPartiallyFilled == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightPartiallyFilled == null)
                {
                    flyweightPartiallyFilled  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PartiallyFilled;}
                     public String  getValueDescription()             {return text_PartiallyFilled;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PartiallyFilled).append("|").append(text_PartiallyFilled).append("]").toString();}
                     public boolean isPartiallyFilled()               {return true;}
                     public char    charValue()                       {return PartiallyFilled;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PartiallyFilled);}
                    };
                }
            }
        }

        return flyweightPartiallyFilled;
    }

    private static FixOrdStatusField flyweightFilled;
    public static final FixOrdStatusField flyweightFilled()
    {
        if (flyweightFilled == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightFilled == null)
                {
                    flyweightFilled  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Filled;}
                     public String  getValueDescription()             {return text_Filled;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Filled).append("|").append(text_Filled).append("]").toString();}
                     public boolean isFilled()                        {return true;}
                     public char    charValue()                       {return Filled;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Filled);}
                    };
                }
            }
        }

        return flyweightFilled;
    }

    private static FixOrdStatusField flyweightDoneForDay;
    public static final FixOrdStatusField flyweightDoneForDay()
    {
        if (flyweightDoneForDay == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightDoneForDay == null)
                {
                    flyweightDoneForDay  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_DoneForDay;}
                     public String  getValueDescription()             {return text_DoneForDay;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_DoneForDay).append("|").append(text_DoneForDay).append("]").toString();}
                     public boolean isDoneForDay()                    {return true;}
                     public char    charValue()                       {return DoneForDay;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_DoneForDay);}
                    };
                }
            }
        }

        return flyweightDoneForDay;
    }

    private static FixOrdStatusField flyweightCanceled;
    public static final FixOrdStatusField flyweightCanceled()
    {
        if (flyweightCanceled == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightCanceled == null)
                {
                    flyweightCanceled  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Canceled;}
                     public String  getValueDescription()             {return text_Canceled;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Canceled).append("|").append(text_Canceled).append("]").toString();}
                     public boolean isCanceled()                      {return true;}
                     public char    charValue()                       {return Canceled;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Canceled);}
                    };
                }
            }
        }

        return flyweightCanceled;
    }

    private static FixOrdStatusField flyweightReplaced;
    public static final FixOrdStatusField flyweightReplaced()
    {
        if (flyweightReplaced == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightReplaced == null)
                {
                    flyweightReplaced  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Replaced;}
                     public String  getValueDescription()             {return text_Replaced;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Replaced).append("|").append(text_Replaced).append("]").toString();}
                     public boolean isReplaced()                      {return true;}
                     public char    charValue()                       {return Replaced;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Replaced);}
                    };
                }
            }
        }

        return flyweightReplaced;
    }

    private static FixOrdStatusField flyweightPendingCancel;
    public static final FixOrdStatusField flyweightPendingCancel()
    {
        if (flyweightPendingCancel == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightPendingCancel == null)
                {
                    flyweightPendingCancel  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PendingCancel;}
                     public String  getValueDescription()             {return text_PendingCancel;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PendingCancel).append("|").append(text_PendingCancel).append("]").toString();}
                     public boolean isPendingCancel()                 {return true;}
                     public char    charValue()                       {return PendingCancel;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PendingCancel);}
                    };
                }
            }
        }

        return flyweightPendingCancel;
    }

    private static FixOrdStatusField flyweightStopped;
    public static final FixOrdStatusField flyweightStopped()
    {
        if (flyweightStopped == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightStopped == null)
                {
                    flyweightStopped  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Stopped;}
                     public String  getValueDescription()             {return text_Stopped;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Stopped).append("|").append(text_Stopped).append("]").toString();}
                     public boolean isStopped()                       {return true;}
                     public char    charValue()                       {return Stopped;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Stopped);}
                    };
                }
            }
        }

        return flyweightStopped;
    }

    private static FixOrdStatusField flyweightRejected;
    public static final FixOrdStatusField flyweightRejected()
    {
        if (flyweightRejected == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightRejected == null)
                {
                    flyweightRejected  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Rejected;}
                     public String  getValueDescription()             {return text_Rejected;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Rejected).append("|").append(text_Rejected).append("]").toString();}
                     public boolean isRejected()                      {return true;}
                     public char    charValue()                       {return Rejected;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Rejected);}
                    };
                }
            }
        }

        return flyweightRejected;
    }

    private static FixOrdStatusField flyweightSuspended;
    public static final FixOrdStatusField flyweightSuspended()
    {
        if (flyweightSuspended == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightSuspended == null)
                {
                    flyweightSuspended  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Suspended;}
                     public String  getValueDescription()             {return text_Suspended;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Suspended).append("|").append(text_Suspended).append("]").toString();}
                     public boolean isSuspended()                     {return true;}
                     public char    charValue()                       {return Suspended;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Suspended);}
                    };
                }
            }
        }

        return flyweightSuspended;
    }

    private static FixOrdStatusField flyweightPendingNew;
    public static final FixOrdStatusField flyweightPendingNew()
    {
        if (flyweightPendingNew == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightPendingNew == null)
                {
                    flyweightPendingNew  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PendingNew;}
                     public String  getValueDescription()             {return text_PendingNew;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PendingNew).append("|").append(text_PendingNew).append("]").toString();}
                     public boolean isPendingNew()                    {return true;}
                     public char    charValue()                       {return PendingNew;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PendingNew);}
                    };
                }
            }
        }

        return flyweightPendingNew;
    }

    private static FixOrdStatusField flyweightCalculated;
    public static final FixOrdStatusField flyweightCalculated()
    {
        if (flyweightCalculated == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightCalculated == null)
                {
                    flyweightCalculated  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Calculated;}
                     public String  getValueDescription()             {return text_Calculated;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Calculated).append("|").append(text_Calculated).append("]").toString();}
                     public boolean isCalculated()                    {return true;}
                     public char    charValue()                       {return Calculated;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Calculated);}
                    };
                }
            }
        }

        return flyweightCalculated;
    }

    private static FixOrdStatusField flyweightExpired;
    public static final FixOrdStatusField flyweightExpired()
    {
        if (flyweightExpired == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightExpired == null)
                {
                    flyweightExpired  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Expired;}
                     public String  getValueDescription()             {return text_Expired;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Expired).append("|").append(text_Expired).append("]").toString();}
                     public boolean isExpired()                       {return true;}
                     public char    charValue()                       {return Expired;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Expired);}
                    };
                }
            }
        }

        return flyweightExpired;
    }

    private static FixOrdStatusField flyweightAcceptedForBidding;
    public static final FixOrdStatusField flyweightAcceptedForBidding()
    {
        if (flyweightAcceptedForBidding == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightAcceptedForBidding == null)
                {
                    flyweightAcceptedForBidding  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AcceptedForBidding;}
                     public String  getValueDescription()             {return text_AcceptedForBidding;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AcceptedForBidding).append("|").append(text_AcceptedForBidding).append("]").toString();}
                     public boolean isAcceptedForBidding()            {return true;}
                     public char    charValue()                       {return AcceptedForBidding;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AcceptedForBidding);}
                    };
                }
            }
        }

        return flyweightAcceptedForBidding;
    }

    private static FixOrdStatusField flyweightPendingReplace;
    public static final FixOrdStatusField flyweightPendingReplace()
    {
        if (flyweightPendingReplace == null)
        {
            synchronized(FixOrdStatusField.class)
            {
                if (flyweightPendingReplace == null)
                {
                    flyweightPendingReplace  = new FixOrdStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PendingReplace;}
                     public String  getValueDescription()             {return text_PendingReplace;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PendingReplace).append("|").append(text_PendingReplace).append("]").toString();}
                     public boolean isPendingReplace()                {return true;}
                     public char    charValue()                       {return PendingReplace;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PendingReplace);}
                    };
                }
            }
        }

        return flyweightPendingReplace;
    }


    public boolean isNew()                  {return false;}
    public boolean isPartiallyFilled()      {return false;}
    public boolean isFilled()               {return false;}
    public boolean isDoneForDay()           {return false;}
    public boolean isCanceled()             {return false;}
    public boolean isReplaced()             {return false;}
    public boolean isPendingCancel()        {return false;}
    public boolean isStopped()              {return false;}
    public boolean isRejected()             {return false;}
    public boolean isSuspended()            {return false;}
    public boolean isPendingNew()           {return false;}
    public boolean isCalculated()           {return false;}
    public boolean isExpired()              {return false;}
    public boolean isAcceptedForBidding()   {return false;}
    public boolean isPendingReplace()       {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixOrdStatusField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixOrdStatusField create(final char param)
    {
        switch (param)
        {                                                                                           
            case New:                return flyweightNew();
            case PartiallyFilled:    return flyweightPartiallyFilled();
            case Filled:             return flyweightFilled();
            case DoneForDay:         return flyweightDoneForDay();
            case Canceled:           return flyweightCanceled();
            case Replaced:           return flyweightReplaced();
            case PendingCancel:      return flyweightPendingCancel();
            case Stopped:            return flyweightStopped();
            case Rejected:           return flyweightRejected();
            case Suspended:          return flyweightSuspended();
            case PendingNew:         return flyweightPendingNew();
            case Calculated:         return flyweightCalculated();
            case Expired:            return flyweightExpired();
            case AcceptedForBidding: return flyweightAcceptedForBidding();
            case PendingReplace:     return flyweightPendingReplace();
        }
                                                                                                    
        return null;
    }                                                                                               
}
