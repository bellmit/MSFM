package com.cboe.cfix.fix.fix42.generated.messages;

/**
 * FixSecurityDefinitionRequestMessage.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's SecurityDefinitionRequest Message.
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import java.util.*;

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.cfix.fix.fix42.field.*;
import com.cboe.cfix.fix.fix42.generated.fields.*;
import com.cboe.cfix.fix.fix42.generated.helpers.*;
import com.cboe.cfix.fix.util.*;
import com.cboe.client.util.*;
import com.cboe.infrastructureServices.foundationFramework.utilities.*;

public class FixSecurityDefinitionRequestMessage extends FixMessage
{   
    public static final String MsgType        = "c";
    public static final char   MsgTypeAsChar  = 'c';
    public static final char[] MsgTypeAsChars = {'c'};
    public static final String MsgTypeName    = "SecurityDefinitionRequest";

    public FixSecurityReqIDField             fieldSecurityReqID;
    public FixSecurityRequestTypeField       fieldSecurityRequestType;
    public FixSymbolField                    fieldSymbol;
    public FixSymbolSfxField                 fieldSymbolSfx;
    public FixSecurityIDField                fieldSecurityID;
    public FixIDSourceField                  fieldIDSource;
    public FixSecurityTypeField              fieldSecurityType;
    public FixMaturityMonthYearField         fieldMaturityMonthYear;
    public FixMaturityDayField               fieldMaturityDay;
    public FixPutOrCallField                 fieldPutOrCall;
    public FixStrikePriceField               fieldStrikePrice;
    public FixOptAttributeField              fieldOptAttribute;
    public FixContractMultiplierField        fieldContractMultiplier;
    public FixCouponRateField                fieldCouponRate;
    public FixSecurityExchangeField          fieldSecurityExchange;
    public FixIssuerField                    fieldIssuer;
    //     FixEncodedIssuerLenField          fieldEncodedIssuerLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    //     FixEncodedIssuerField             fieldEncodedIssuer;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    public FixSecurityDescField              fieldSecurityDesc;
    //     FixEncodedSecurityDescLenField    fieldEncodedSecurityDescLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    //     FixEncodedSecurityDescField       fieldEncodedSecurityDesc;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    public FixCurrencyField                  fieldCurrency;
    public FixTextField                      fieldText;
    //     FixEncodedTextLenField            fieldEncodedTextLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    //     FixEncodedTextField               fieldEncodedText;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    public FixTradingSessionIDField          fieldTradingSessionID;
    public FixNoRelatedSymField              fieldNoRelatedSym;
    public RelatedSymGroup[]                 groupRelatedSym;
    public List                              additionalUserFields;

    public static class RelatedSymGroup implements PrettyPrintWriterVisitorIF
    {   
        public FixUnderlyingSymbolField          fieldUnderlyingSymbol;
        public FixUnderlyingSymbolSfxField       fieldUnderlyingSymbolSfx;
        public FixUnderlyingSecurityIDField      fieldUnderlyingSecurityID;
        public FixUnderlyingIDSourceField        fieldUnderlyingIDSource;
        public FixUnderlyingSecurityTypeField    fieldUnderlyingSecurityType;
        public FixUnderlyingMaturityMonthYearField fieldUnderlyingMaturityMonthYear;
        public FixUnderlyingMaturityDayField     fieldUnderlyingMaturityDay;
        public FixUnderlyingPutOrCallField       fieldUnderlyingPutOrCall;
        public FixUnderlyingStrikePriceField     fieldUnderlyingStrikePrice;
        public FixUnderlyingOptAttributeField    fieldUnderlyingOptAttribute;
        public FixUnderlyingContractMultiplierField fieldUnderlyingContractMultiplier;
        public FixUnderlyingCouponRateField      fieldUnderlyingCouponRate;
        public FixUnderlyingSecurityExchangeField fieldUnderlyingSecurityExchange;
        public FixUnderlyingIssuerField          fieldUnderlyingIssuer;
        //     FixEncodedUnderlyingIssuerLenField fieldEncodedUnderlyingIssuerLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        //     FixEncodedUnderlyingIssuerField   fieldEncodedUnderlyingIssuer;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        public FixUnderlyingSecurityDescField    fieldUnderlyingSecurityDesc;
        //     FixEncodedUnderlyingSecurityDescLenField fieldEncodedUnderlyingSecurityDescLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        //     FixEncodedUnderlyingSecurityDescField fieldEncodedUnderlyingSecurityDesc;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        public FixRatioQtyField                  fieldRatioQty;
        public FixSideField                      fieldSide;
        public FixUnderlyingCurrencyField        fieldUnderlyingCurrency;

        public String toString()
        {
            PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

            accept(prettyPrintWriter);

            return prettyPrintWriter.toString();
        }

        public void accept(PrettyPrintWriterIF prettyPrintWriter)
        {
            prettyPrintWriter.startPrintingGroup("RelatedSymGroup");  
            prettyPrintWriter.printGroupItem(fieldUnderlyingSymbol);
            prettyPrintWriter.printGroupItem(fieldUnderlyingSymbolSfx);
            prettyPrintWriter.printGroupItem(fieldUnderlyingSecurityID);
            prettyPrintWriter.printGroupItem(fieldUnderlyingIDSource);
            prettyPrintWriter.printGroupItem(fieldUnderlyingSecurityType);
            prettyPrintWriter.printGroupItem(fieldUnderlyingMaturityMonthYear);
            prettyPrintWriter.printGroupItem(fieldUnderlyingMaturityDay);
            prettyPrintWriter.printGroupItem(fieldUnderlyingPutOrCall);
            prettyPrintWriter.printGroupItem(fieldUnderlyingStrikePrice);
            prettyPrintWriter.printGroupItem(fieldUnderlyingOptAttribute);
            prettyPrintWriter.printGroupItem(fieldUnderlyingContractMultiplier);
            prettyPrintWriter.printGroupItem(fieldUnderlyingCouponRate);
            prettyPrintWriter.printGroupItem(fieldUnderlyingSecurityExchange);
            prettyPrintWriter.printGroupItem(fieldUnderlyingIssuer);
            prettyPrintWriter.printGroupItem(fieldUnderlyingSecurityDesc);
            prettyPrintWriter.printGroupItem(fieldRatioQty);
            prettyPrintWriter.printGroupItem(fieldSide);
            prettyPrintWriter.printGroupItem(fieldUnderlyingCurrency);

            prettyPrintWriter.endPrintingGroup();
        }                                                                                                 

        public void accept(FixMessageBuilderIF fixMessageBuilder)
        {                                                                                             
            fixMessageBuilder.append(fieldUnderlyingSymbol);
            fixMessageBuilder.append(fieldUnderlyingSymbolSfx);
            fixMessageBuilder.append(fieldUnderlyingSecurityID);
            fixMessageBuilder.append(fieldUnderlyingIDSource);
            fixMessageBuilder.append(fieldUnderlyingSecurityType);
            fixMessageBuilder.append(fieldUnderlyingMaturityMonthYear);
            fixMessageBuilder.append(fieldUnderlyingMaturityDay);
            fixMessageBuilder.append(fieldUnderlyingPutOrCall);
            fixMessageBuilder.append(fieldUnderlyingStrikePrice);
            fixMessageBuilder.append(fieldUnderlyingOptAttribute);
            fixMessageBuilder.append(fieldUnderlyingContractMultiplier);
            fixMessageBuilder.append(fieldUnderlyingCouponRate);
            fixMessageBuilder.append(fieldUnderlyingSecurityExchange);
            fixMessageBuilder.append(fieldUnderlyingIssuer);
            fixMessageBuilder.append(fieldUnderlyingSecurityDesc);
            fixMessageBuilder.append(fieldRatioQty);
            fixMessageBuilder.append(fieldSide);
            fixMessageBuilder.append(fieldUnderlyingCurrency);
        }                                                                                                 
    }

    public FixSecurityDefinitionRequestMessage()
    {

    }

    public boolean isFixSecurityDefinitionRequestMessage() {return true;}
    public String getMsgType()        {return MsgType;}
    public char   getMsgTypeAsChar()  {return MsgTypeAsChar;}
    public char[] getMsgTypeAsChars() {return MsgTypeAsChars;}
    public String getMsgTypeName()    {return MsgTypeName;}
    
    public String toString()
    {
        PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

        accept(prettyPrintWriter);

        return prettyPrintWriter.toString();
    }

    public void accept(PrettyPrintWriterIF prettyPrintWriter)
    {
        prettyPrintWriter.startPrintingGroup(MsgTypeName);

        super.accept(prettyPrintWriter);
                                                                                                      
        prettyPrintWriter.printGroupItem(fieldSecurityReqID);
        prettyPrintWriter.printGroupItem(fieldSecurityRequestType);
        prettyPrintWriter.printGroupItem(fieldSymbol);
        prettyPrintWriter.printGroupItem(fieldSymbolSfx);
        prettyPrintWriter.printGroupItem(fieldSecurityID);
        prettyPrintWriter.printGroupItem(fieldIDSource);
        prettyPrintWriter.printGroupItem(fieldSecurityType);
        prettyPrintWriter.printGroupItem(fieldMaturityMonthYear);
        prettyPrintWriter.printGroupItem(fieldMaturityDay);
        prettyPrintWriter.printGroupItem(fieldPutOrCall);
        prettyPrintWriter.printGroupItem(fieldStrikePrice);
        prettyPrintWriter.printGroupItem(fieldOptAttribute);
        prettyPrintWriter.printGroupItem(fieldContractMultiplier);
        prettyPrintWriter.printGroupItem(fieldCouponRate);
        prettyPrintWriter.printGroupItem(fieldSecurityExchange);
        prettyPrintWriter.printGroupItem(fieldIssuer);
        prettyPrintWriter.printGroupItem(fieldSecurityDesc);
        prettyPrintWriter.printGroupItem(fieldCurrency);
        prettyPrintWriter.printGroupItem(fieldText);
        prettyPrintWriter.printGroupItem(fieldTradingSessionID);
        prettyPrintWriter.printGroupItem(fieldNoRelatedSym);
        if (groupRelatedSym != null)
        {
            for (int i = 0; i < groupRelatedSym.length; i++)
            {
                if (groupRelatedSym[i] != null) groupRelatedSym[i].accept(prettyPrintWriter);
            }
        }                                                                                             

        prettyPrintWriter.endPrintingGroup();
    }                                                                                                 

    public void accept(FixMessageBuilderIF fixMessageBuilder)
    {
        super.accept(fixMessageBuilder);
                                                                                                      
        fixMessageBuilder.append(fieldSecurityReqID);
        fixMessageBuilder.append(fieldSecurityRequestType);
        fixMessageBuilder.append(fieldSymbol);
        fixMessageBuilder.append(fieldSymbolSfx);
        fixMessageBuilder.append(fieldSecurityID);
        fixMessageBuilder.append(fieldIDSource);
        fixMessageBuilder.append(fieldSecurityType);
        fixMessageBuilder.append(fieldMaturityMonthYear);
        fixMessageBuilder.append(fieldMaturityDay);
        fixMessageBuilder.append(fieldPutOrCall);
        fixMessageBuilder.append(fieldStrikePrice);
        fixMessageBuilder.append(fieldOptAttribute);
        fixMessageBuilder.append(fieldContractMultiplier);
        fixMessageBuilder.append(fieldCouponRate);
        fixMessageBuilder.append(fieldSecurityExchange);
        fixMessageBuilder.append(fieldIssuer);
        fixMessageBuilder.append(fieldSecurityDesc);
        fixMessageBuilder.append(fieldCurrency);
        fixMessageBuilder.append(fieldText);
        fixMessageBuilder.append(fieldTradingSessionID);
        fixMessageBuilder.append(fieldNoRelatedSym);
        if (groupRelatedSym != null)
        {
            for (int i = 0; i < groupRelatedSym.length; i++)
            {
                if (groupRelatedSym[i] != null) groupRelatedSym[i].accept(fixMessageBuilder);
            }
        }                                                                                             

        if (additionalUserFields != null)
        {
            for (Iterator iterator = additionalUserFields.iterator(); iterator.hasNext(); )
            {
                fixMessageBuilder.append((FixFieldIF) iterator.next());
            }
        }
    }                                                                                                 

    public PackedIntArrayIF validate(FixPacketIF fixPacket, PackedIntArrayIF foundErrors, int validationFlags, int debugFlags)
    {
        if (fieldSenderCompID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSenderCompIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldTargetCompID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixTargetCompIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldMsgSeqNum == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixMsgSeqNumField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldSendingTime == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSendingTimeField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldSecurityReqID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSecurityReqIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldSecurityRequestType == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSecurityRequestTypeField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        return foundErrors;
    }

    private static final int STATE_RelatedSymGroup = 2;

    private String toStateString(int state)
    {
        switch (state)
        {
            case STATE_Header: return "State[Header]";
            case STATE_Field:  return "State[Field]";
            case STATE_RelatedSymGroup: return "State[RelatedSymGroup]";
        }

        return "???";
    }
    
    public PackedIntArrayIF build(FixPacketIF fixPacket, PackedIntArrayIF foundErrors, int validationFlags, int debugFlags)
    {
        char[] array          = fixPacket.getArray();
        int    numTags        = fixPacket.getTagPositionLength();
        int    currentState   = STATE_Header;
        int    tag;
        int    offset;
        int    length;
        int    numInGroup;
        int    group;
        int    currentPosition;
        int    current_groupRelatedSym = -1; // this group has a starting field which we have to find first

        for (currentPosition = 0; currentPosition < numTags; currentPosition++)
        {
            if (!foundErrors.isEmpty() && BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                break;
            }

            tag    = fixPacket.getTag(currentPosition);
            offset = fixPacket.getValueOffset(currentPosition);
            length = fixPacket.getValueLength(currentPosition);

            if ((BitHelper.isBitMaskSet(debugFlags, FixSessionDebugIF.MESSAGE_SHOW_BUILD_TRANSITIONS)))
            {
                String threadName = Thread.currentThread().getName();
                String stateString = toStateString(currentState);
                StringBuilder sb = new StringBuilder(threadName.length()+stateString.length()+50);
                if (currentPosition > 0)
                {
                    sb.append(threadName).append(" --> ").append(stateString);
                    Log.information(sb.toString());
                    sb.setLength(0);
                }

                sb.append(threadName).append("Tag[").append(currentPosition).append("] = ").append(FixFieldHelper.getTagName(tag)).append("(").append(tag).append(") ").append(stateString);
                Log.information(sb.toString());
            }

            switch (tag)
            {
                case FixSecurityReqIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSecurityReqID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSecurityReqID = FixSecurityReqIDField.create(array, offset, length);
                    if (fieldSecurityReqID == null || !fieldSecurityReqID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSecurityRequestTypeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSecurityRequestType != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSecurityRequestType = FixSecurityRequestTypeField.create(array, offset, length);
                    if (fieldSecurityRequestType == null || !fieldSecurityRequestType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSymbolField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSymbol != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSymbol = FixSymbolField.create(array, offset, length);
                    if (fieldSymbol == null || !fieldSymbol.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSymbolSfxField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSymbolSfx != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSymbolSfx = FixSymbolSfxField.create(array, offset, length);
                    if (fieldSymbolSfx == null || !fieldSymbolSfx.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSecurityIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSecurityID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSecurityID = FixSecurityIDField.create(array, offset, length);
                    if (fieldSecurityID == null || !fieldSecurityID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixIDSourceField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldIDSource != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldIDSource = FixIDSourceField.create(array, offset, length);
                    if (fieldIDSource == null || !fieldIDSource.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSecurityTypeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSecurityType != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSecurityType = FixSecurityTypeField.create(array, offset, length);
                    if (fieldSecurityType == null || !fieldSecurityType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixMaturityMonthYearField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldMaturityMonthYear != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldMaturityMonthYear = FixMaturityMonthYearField.create(array, offset, length);
                    if (fieldMaturityMonthYear == null || !fieldMaturityMonthYear.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixMaturityDayField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldMaturityDay != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldMaturityDay = FixMaturityDayField.create(array, offset, length);
                    if (fieldMaturityDay == null || !fieldMaturityDay.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixPutOrCallField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldPutOrCall != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldPutOrCall = FixPutOrCallField.create(array, offset, length);
                    if (fieldPutOrCall == null || !fieldPutOrCall.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixStrikePriceField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldStrikePrice != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldStrikePrice = FixStrikePriceField.create(array, offset, length);
                    if (fieldStrikePrice == null || !fieldStrikePrice.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixOptAttributeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldOptAttribute != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldOptAttribute = FixOptAttributeField.create(array, offset, length);
                    if (fieldOptAttribute == null || !fieldOptAttribute.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixContractMultiplierField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldContractMultiplier != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldContractMultiplier = FixContractMultiplierField.create(array, offset, length);
                    if (fieldContractMultiplier == null || !fieldContractMultiplier.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixCouponRateField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldCouponRate != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldCouponRate = FixCouponRateField.create(array, offset, length);
                    if (fieldCouponRate == null || !fieldCouponRate.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSecurityExchangeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSecurityExchange != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSecurityExchange = FixSecurityExchangeField.create(array, offset, length);
                    if (fieldSecurityExchange == null || !fieldSecurityExchange.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixIssuerField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldIssuer != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldIssuer = FixIssuerField.create(array, offset, length);
                    if (fieldIssuer == null || !fieldIssuer.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixEncodedIssuerLenField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedIssuerLenField unusedByCboeField = FixEncodedIssuerLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixEncodedIssuerField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedIssuerField unusedByCboeField = FixEncodedIssuerField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixSecurityDescField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSecurityDesc != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSecurityDesc = FixSecurityDescField.create(array, offset, length);
                    if (fieldSecurityDesc == null || !fieldSecurityDesc.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixEncodedSecurityDescLenField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedSecurityDescLenField unusedByCboeField = FixEncodedSecurityDescLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixEncodedSecurityDescField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedSecurityDescField unusedByCboeField = FixEncodedSecurityDescField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixCurrencyField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldCurrency != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldCurrency = FixCurrencyField.create(array, offset, length);
                    if (fieldCurrency == null || !fieldCurrency.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixTextField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldText != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldText = FixTextField.create(array, offset, length);
                    if (fieldText == null || !fieldText.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixEncodedTextLenField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedTextLenField unusedByCboeField = FixEncodedTextLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixEncodedTextField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedTextField unusedByCboeField = FixEncodedTextField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixTradingSessionIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldTradingSessionID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldTradingSessionID = FixTradingSessionIDField.create(array, offset, length);
                    if (fieldTradingSessionID == null || !fieldTradingSessionID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixNoRelatedSymField.TagID:
                {
                    if (fieldNoRelatedSym != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldNoRelatedSym = FixNoRelatedSymField.create(array, offset, length);
                    if (fieldNoRelatedSym == null || !fieldNoRelatedSym.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    currentState = STATE_RelatedSymGroup;

                    numInGroup = fieldNoRelatedSym.intValue();

                    groupRelatedSym = new RelatedSymGroup[numInGroup];
                    for (group = 0; group < numInGroup; group++)
                    {
                        groupRelatedSym[group] = new RelatedSymGroup();
                    }

                    continue;
                }
                case FixUnderlyingSymbolField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    current_groupRelatedSym++;

                    currentState = STATE_RelatedSymGroup;

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSymbol != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSymbol = FixUnderlyingSymbolField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSymbol == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSymbol.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingSymbolSfxField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSymbolSfx != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSymbolSfx = FixUnderlyingSymbolSfxField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSymbolSfx == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSymbolSfx.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingSecurityIDField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityID = FixUnderlyingSecurityIDField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityID == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingIDSourceField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingIDSource != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingIDSource = FixUnderlyingIDSourceField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingIDSource == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingIDSource.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingSecurityTypeField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityType != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityType = FixUnderlyingSecurityTypeField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityType == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingMaturityMonthYearField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingMaturityMonthYear != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingMaturityMonthYear = FixUnderlyingMaturityMonthYearField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingMaturityMonthYear == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingMaturityMonthYear.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingMaturityDayField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingMaturityDay != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingMaturityDay = FixUnderlyingMaturityDayField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingMaturityDay == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingMaturityDay.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingPutOrCallField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingPutOrCall != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingPutOrCall = FixUnderlyingPutOrCallField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingPutOrCall == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingPutOrCall.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingStrikePriceField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingStrikePrice != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingStrikePrice = FixUnderlyingStrikePriceField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingStrikePrice == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingStrikePrice.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingOptAttributeField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingOptAttribute != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingOptAttribute = FixUnderlyingOptAttributeField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingOptAttribute == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingOptAttribute.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingContractMultiplierField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingContractMultiplier != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingContractMultiplier = FixUnderlyingContractMultiplierField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingContractMultiplier == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingContractMultiplier.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingCouponRateField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingCouponRate != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingCouponRate = FixUnderlyingCouponRateField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingCouponRate == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingCouponRate.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingSecurityExchangeField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityExchange != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityExchange = FixUnderlyingSecurityExchangeField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityExchange == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityExchange.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingIssuerField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingIssuer != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingIssuer = FixUnderlyingIssuerField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingIssuer == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingIssuer.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixEncodedUnderlyingIssuerLenField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedUnderlyingIssuerLenField unusedByCboeField = FixEncodedUnderlyingIssuerLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixEncodedUnderlyingIssuerField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedUnderlyingIssuerField unusedByCboeField = FixEncodedUnderlyingIssuerField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixUnderlyingSecurityDescField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityDesc != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityDesc = FixUnderlyingSecurityDescField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityDesc == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingSecurityDesc.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixEncodedUnderlyingSecurityDescLenField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedUnderlyingSecurityDescLenField unusedByCboeField = FixEncodedUnderlyingSecurityDescLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixEncodedUnderlyingSecurityDescField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedUnderlyingSecurityDescField unusedByCboeField = FixEncodedUnderlyingSecurityDescField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixRatioQtyField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldRatioQty != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldRatioQty = FixRatioQtyField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldRatioQty == null || !groupRelatedSym[current_groupRelatedSym].fieldRatioQty.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSideField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldSide != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldSide = FixSideField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldSide == null || !groupRelatedSym[current_groupRelatedSym].fieldSide.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixUnderlyingCurrencyField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym < 0 || current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingCurrency != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldUnderlyingCurrency = FixUnderlyingCurrencyField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldUnderlyingCurrency == null || !groupRelatedSym[current_groupRelatedSym].fieldUnderlyingCurrency.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
            }

            if (tag >= FixMessageIF.USER_DEFINED_TAGS_START)
            {
                if (currentState == STATE_Field || currentState == STATE_Header)
                {
                    if (additionalUserFields == null)
                    {
                        additionalUserFields = new ArrayList();
                    }

                    additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                    continue;
                }

                if (currentState == STATE_RelatedSymGroup)
                {
                    if (current_groupRelatedSym == groupRelatedSym.length - 1)
                    {
                        if (additionalUserFields == null)
                        {
                            additionalUserFields = new ArrayList();
                        }

                        additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                        continue;
                    }

                    foundErrors.add(BitHelper.packInt(FixException.UNEXPECTED_USER_DEFINED_TAG_WITHIN_GROUP, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return foundErrors;
                    }
                    continue;
                }
            }

            if (!buildHeaderTrailer(array, tag, offset, length, currentState, currentPosition, foundErrors, validationFlags, debugFlags))
            {
                foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG, currentPosition));

                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                {
                    return foundErrors;
                }

                continue;
            }
        }

        if (groupRelatedSym != null && current_groupRelatedSym != groupRelatedSym.length - 1)
        {
            foundErrors.add(BitHelper.packInt(FixException.FEWER_GROUPS_THAN_SPECIFIED, currentPosition));

            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        if ((BitHelper.isBitMaskSet(debugFlags, FixSessionDebugIF.MESSAGE_SHOW_BUILD_TRANSITIONS)))
        {
            String threadName = Thread.currentThread().getName();
            String stateString = toStateString(currentState);
            StringBuilder sb = new StringBuilder(threadName.length()+stateString.length()+10);
            sb.append(threadName).append(" --> ").append(stateString);
            Log.information(sb.toString());
        }

        return foundErrors;
    }
}
