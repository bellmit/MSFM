package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixDKReasonField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [127] (known as DKReason).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixDKReasonField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  127;
    public static final String TagIDAsString = "127";
    public static final char[] TagIDAsChars  = {'1','2','7'};
    public static final String TagName       = "DKReason";
    public static final String TagFixType    = "CHAR";

    public static final char    UnknownSymbol                     = 'A';
    public static final String  string_UnknownSymbol              = "A";
    public static final String  tagged_UnknownSymbol              = TagIDAsString + EQUALS + string_UnknownSymbol + SOH;
    public static final char[]  taggedchars_UnknownSymbol         = {'1','2','7', EQUALSchar, 'A', SOHchar};
    public static final String  text_UnknownSymbol                = "UnknownSymbol";
    public static final char    WrongSide                         = 'B';
    public static final String  string_WrongSide                  = "B";
    public static final String  tagged_WrongSide                  = TagIDAsString + EQUALS + string_WrongSide + SOH;
    public static final char[]  taggedchars_WrongSide             = {'1','2','7', EQUALSchar, 'B', SOHchar};
    public static final String  text_WrongSide                    = "WrongSide";
    public static final char    QuantityExceedsOrder              = 'C';
    public static final String  string_QuantityExceedsOrder       = "C";
    public static final String  tagged_QuantityExceedsOrder       = TagIDAsString + EQUALS + string_QuantityExceedsOrder + SOH;
    public static final char[]  taggedchars_QuantityExceedsOrder  = {'1','2','7', EQUALSchar, 'C', SOHchar};
    public static final String  text_QuantityExceedsOrder         = "QuantityExceedsOrder";
    public static final char    NoMatchingOrder                   = 'D';
    public static final String  string_NoMatchingOrder            = "D";
    public static final String  tagged_NoMatchingOrder            = TagIDAsString + EQUALS + string_NoMatchingOrder + SOH;
    public static final char[]  taggedchars_NoMatchingOrder       = {'1','2','7', EQUALSchar, 'D', SOHchar};
    public static final String  text_NoMatchingOrder              = "NoMatchingOrder";
    public static final char    PriceExceedsLimit                 = 'E';
    public static final String  string_PriceExceedsLimit          = "E";
    public static final String  tagged_PriceExceedsLimit          = TagIDAsString + EQUALS + string_PriceExceedsLimit + SOH;
    public static final char[]  taggedchars_PriceExceedsLimit     = {'1','2','7', EQUALSchar, 'E', SOHchar};
    public static final String  text_PriceExceedsLimit            = "PriceExceedsLimit";
    public static final char    StaleExecution                    = 'F';
    public static final String  string_StaleExecution             = "F";
    public static final String  tagged_StaleExecution             = TagIDAsString + EQUALS + string_StaleExecution + SOH;
    public static final char[]  taggedchars_StaleExecution        = {'1','2','7', EQUALSchar, 'F', SOHchar};
    public static final String  text_StaleExecution               = "StaleExecution";
    public static final char    Other                             = 'Z';
    public static final String  string_Other                      = "Z";
    public static final String  tagged_Other                      = TagIDAsString + EQUALS + string_Other + SOH;
    public static final char[]  taggedchars_Other                 = {'1','2','7', EQUALSchar, 'Z', SOHchar};
    public static final String  text_Other                        = "Other";

    private static FixDKReasonField flyweightUnknownSymbol;
    public static final FixDKReasonField flyweightUnknownSymbol()
    {
        if (flyweightUnknownSymbol == null)
        {
            synchronized(FixDKReasonField.class)
            {
                if (flyweightUnknownSymbol == null)
                {
                    flyweightUnknownSymbol  = new FixDKReasonField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_UnknownSymbol;}
                     public String  getValueDescription()             {return text_UnknownSymbol;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnknownSymbol).append("|").append(text_UnknownSymbol).append("]").toString();}
                     public boolean isUnknownSymbol()                 {return true;}
                     public char    charValue()                       {return UnknownSymbol;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnknownSymbol);}
                    };
                }
            }
        }

        return flyweightUnknownSymbol;
    }

    private static FixDKReasonField flyweightWrongSide;
    public static final FixDKReasonField flyweightWrongSide()
    {
        if (flyweightWrongSide == null)
        {
            synchronized(FixDKReasonField.class)
            {
                if (flyweightWrongSide == null)
                {
                    flyweightWrongSide  = new FixDKReasonField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_WrongSide;}
                     public String  getValueDescription()             {return text_WrongSide;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_WrongSide).append("|").append(text_WrongSide).append("]").toString();}
                     public boolean isWrongSide()                     {return true;}
                     public char    charValue()                       {return WrongSide;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_WrongSide);}
                    };
                }
            }
        }

        return flyweightWrongSide;
    }

    private static FixDKReasonField flyweightQuantityExceedsOrder;
    public static final FixDKReasonField flyweightQuantityExceedsOrder()
    {
        if (flyweightQuantityExceedsOrder == null)
        {
            synchronized(FixDKReasonField.class)
            {
                if (flyweightQuantityExceedsOrder == null)
                {
                    flyweightQuantityExceedsOrder  = new FixDKReasonField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_QuantityExceedsOrder;}
                     public String  getValueDescription()             {return text_QuantityExceedsOrder;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_QuantityExceedsOrder).append("|").append(text_QuantityExceedsOrder).append("]").toString();}
                     public boolean isQuantityExceedsOrder()          {return true;}
                     public char    charValue()                       {return QuantityExceedsOrder;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_QuantityExceedsOrder);}
                    };
                }
            }
        }

        return flyweightQuantityExceedsOrder;
    }

    private static FixDKReasonField flyweightNoMatchingOrder;
    public static final FixDKReasonField flyweightNoMatchingOrder()
    {
        if (flyweightNoMatchingOrder == null)
        {
            synchronized(FixDKReasonField.class)
            {
                if (flyweightNoMatchingOrder == null)
                {
                    flyweightNoMatchingOrder  = new FixDKReasonField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NoMatchingOrder;}
                     public String  getValueDescription()             {return text_NoMatchingOrder;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NoMatchingOrder).append("|").append(text_NoMatchingOrder).append("]").toString();}
                     public boolean isNoMatchingOrder()               {return true;}
                     public char    charValue()                       {return NoMatchingOrder;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NoMatchingOrder);}
                    };
                }
            }
        }

        return flyweightNoMatchingOrder;
    }

    private static FixDKReasonField flyweightPriceExceedsLimit;
    public static final FixDKReasonField flyweightPriceExceedsLimit()
    {
        if (flyweightPriceExceedsLimit == null)
        {
            synchronized(FixDKReasonField.class)
            {
                if (flyweightPriceExceedsLimit == null)
                {
                    flyweightPriceExceedsLimit  = new FixDKReasonField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PriceExceedsLimit;}
                     public String  getValueDescription()             {return text_PriceExceedsLimit;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PriceExceedsLimit).append("|").append(text_PriceExceedsLimit).append("]").toString();}
                     public boolean isPriceExceedsLimit()             {return true;}
                     public char    charValue()                       {return PriceExceedsLimit;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PriceExceedsLimit);}
                    };
                }
            }
        }

        return flyweightPriceExceedsLimit;
    }

    private static FixDKReasonField flyweightStaleExecution;
    public static final FixDKReasonField flyweightStaleExecution()
    {
        if (flyweightStaleExecution == null)
        {
            synchronized(FixDKReasonField.class)
            {
                if (flyweightStaleExecution == null)
                {
                    flyweightStaleExecution  = new FixDKReasonField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_StaleExecution;}
                     public String  getValueDescription()             {return text_StaleExecution;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_StaleExecution).append("|").append(text_StaleExecution).append("]").toString();}
                     public boolean isStaleExecution()                {return true;}
                     public char    charValue()                       {return StaleExecution;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_StaleExecution);}
                    };
                }
            }
        }

        return flyweightStaleExecution;
    }

    private static FixDKReasonField flyweightOther;
    public static final FixDKReasonField flyweightOther()
    {
        if (flyweightOther == null)
        {
            synchronized(FixDKReasonField.class)
            {
                if (flyweightOther == null)
                {
                    flyweightOther  = new FixDKReasonField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Other;}
                     public String  getValueDescription()             {return text_Other;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Other).append("|").append(text_Other).append("]").toString();}
                     public boolean isOther()                         {return true;}
                     public char    charValue()                       {return Other;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Other);}
                    };
                }
            }
        }

        return flyweightOther;
    }


    public boolean isUnknownSymbol()          {return false;}
    public boolean isWrongSide()              {return false;}
    public boolean isQuantityExceedsOrder()   {return false;}
    public boolean isNoMatchingOrder()        {return false;}
    public boolean isPriceExceedsLimit()      {return false;}
    public boolean isStaleExecution()         {return false;}
    public boolean isOther()                  {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixDKReasonField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixDKReasonField create(final char param)
    {
        switch (param)
        {                                                                                           
            case UnknownSymbol:        return flyweightUnknownSymbol();
            case WrongSide:            return flyweightWrongSide();
            case QuantityExceedsOrder: return flyweightQuantityExceedsOrder();
            case NoMatchingOrder:      return flyweightNoMatchingOrder();
            case PriceExceedsLimit:    return flyweightPriceExceedsLimit();
            case StaleExecution:       return flyweightStaleExecution();
            case Other:                return flyweightOther();
        }
                                                                                                    
        return null;
    }                                                                                               
}
