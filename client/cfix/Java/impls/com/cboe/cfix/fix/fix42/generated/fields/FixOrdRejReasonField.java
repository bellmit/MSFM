package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixOrdRejReasonField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [103] (known as OrdRejReason).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixOrdRejReasonField implements FixFieldIF, HasIntValueIF
{   
    public static final int    TagID         =  103;
    public static final String TagIDAsString = "103";
    public static final char[] TagIDAsChars  = {'1','0','3'};
    public static final String TagName       = "OrdRejReason";
    public static final String TagFixType    = "INT";
    public static final char[]  taggedchars_value0 = {'1','0','3', EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {'1','0','3', EQUALSchar, ONEchar,  SOHchar};

    public static final int     BrokerOption                                = 0;
    public static final String  string_BrokerOption                         = "0";
    public static final String  tagged_BrokerOption                         = TagIDAsString + EQUALS + string_BrokerOption + SOH;
    public static final char[]  taggedchars_BrokerOption                    = {'1','0','3', EQUALSchar, '0', SOHchar};
    public static final String  text_BrokerOption                           = "BrokerOption";
    public static final int     UnknownSymbol                               = 1;
    public static final String  string_UnknownSymbol                        = "1";
    public static final String  tagged_UnknownSymbol                        = TagIDAsString + EQUALS + string_UnknownSymbol + SOH;
    public static final char[]  taggedchars_UnknownSymbol                   = {'1','0','3', EQUALSchar, '1', SOHchar};
    public static final String  text_UnknownSymbol                          = "UnknownSymbol";
    public static final int     ExchangeClosed                              = 2;
    public static final String  string_ExchangeClosed                       = "2";
    public static final String  tagged_ExchangeClosed                       = TagIDAsString + EQUALS + string_ExchangeClosed + SOH;
    public static final char[]  taggedchars_ExchangeClosed                  = {'1','0','3', EQUALSchar, '2', SOHchar};
    public static final String  text_ExchangeClosed                         = "ExchangeClosed";
    public static final int     OrderExceedsLimit                           = 3;
    public static final String  string_OrderExceedsLimit                    = "3";
    public static final String  tagged_OrderExceedsLimit                    = TagIDAsString + EQUALS + string_OrderExceedsLimit + SOH;
    public static final char[]  taggedchars_OrderExceedsLimit               = {'1','0','3', EQUALSchar, '3', SOHchar};
    public static final String  text_OrderExceedsLimit                      = "OrderExceedsLimit";
    public static final int     TooLateToEnter                              = 4;
    public static final String  string_TooLateToEnter                       = "4";
    public static final String  tagged_TooLateToEnter                       = TagIDAsString + EQUALS + string_TooLateToEnter + SOH;
    public static final char[]  taggedchars_TooLateToEnter                  = {'1','0','3', EQUALSchar, '4', SOHchar};
    public static final String  text_TooLateToEnter                         = "TooLateToEnter";
    public static final int     UnknownOrder                                = 5;
    public static final String  string_UnknownOrder                         = "5";
    public static final String  tagged_UnknownOrder                         = TagIDAsString + EQUALS + string_UnknownOrder + SOH;
    public static final char[]  taggedchars_UnknownOrder                    = {'1','0','3', EQUALSchar, '5', SOHchar};
    public static final String  text_UnknownOrder                           = "UnknownOrder";
    public static final int     DuplicateOrder                              = 6;
    public static final String  string_DuplicateOrder                       = "6";
    public static final String  tagged_DuplicateOrder                       = TagIDAsString + EQUALS + string_DuplicateOrder + SOH;
    public static final char[]  taggedchars_DuplicateOrder                  = {'1','0','3', EQUALSchar, '6', SOHchar};
    public static final String  text_DuplicateOrder                         = "DuplicateOrder";
    public static final int     DuplicateVerbalyes                          = 7;
    public static final String  string_DuplicateVerbalyes                   = "7";
    public static final String  tagged_DuplicateVerbalyes                   = TagIDAsString + EQUALS + string_DuplicateVerbalyes + SOH;
    public static final char[]  taggedchars_DuplicateVerbalyes              = {'1','0','3', EQUALSchar, '7', SOHchar};
    public static final String  text_DuplicateVerbalyes                     = "DuplicateVerbalyes";
    public static final int     StaleOrder                                  = 8;
    public static final String  string_StaleOrder                           = "8";
    public static final String  tagged_StaleOrder                           = TagIDAsString + EQUALS + string_StaleOrder + SOH;
    public static final char[]  taggedchars_StaleOrder                      = {'1','0','3', EQUALSchar, '8', SOHchar};
    public static final String  text_StaleOrder                             = "StaleOrder";
    public static final int     UnsupportedOrderCharacteristic              = 9;
    public static final String  string_UnsupportedOrderCharacteristic       = "9";
    public static final String  tagged_UnsupportedOrderCharacteristic       = TagIDAsString + EQUALS + string_UnsupportedOrderCharacteristic + SOH;
    public static final char[]  taggedchars_UnsupportedOrderCharacteristic  = {'1','0','3', EQUALSchar, '9', SOHchar};
    public static final String  text_UnsupportedOrderCharacteristic         = "UnsupportedOrderCharacteristic";

    private static FixOrdRejReasonField flyweightBrokerOption;
    public static final FixOrdRejReasonField flyweightBrokerOption()
    {
        if (flyweightBrokerOption == null)
        {
            synchronized(FixOrdRejReasonField.class)
            {
                if (flyweightBrokerOption == null)
                {
                    flyweightBrokerOption  = new FixOrdRejReasonField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_BrokerOption;}
                     public String  getValueDescription()                {return text_BrokerOption;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_BrokerOption).append("|").append(text_BrokerOption).append("]").toString();}
                     public boolean isBrokerOption()                     {return true;}
                     public int     intValue()                           {return BrokerOption;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_BrokerOption);}
                    };
                }
            }
        }

        return flyweightBrokerOption;
    }

    private static FixOrdRejReasonField flyweightUnknownSymbol;
    public static final FixOrdRejReasonField flyweightUnknownSymbol()
    {
        if (flyweightUnknownSymbol == null)
        {
            synchronized(FixOrdRejReasonField.class)
            {
                if (flyweightUnknownSymbol == null)
                {
                    flyweightUnknownSymbol  = new FixOrdRejReasonField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_UnknownSymbol;}
                     public String  getValueDescription()                {return text_UnknownSymbol;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnknownSymbol).append("|").append(text_UnknownSymbol).append("]").toString();}
                     public boolean isUnknownSymbol()                    {return true;}
                     public int     intValue()                           {return UnknownSymbol;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnknownSymbol);}
                    };
                }
            }
        }

        return flyweightUnknownSymbol;
    }

    private static FixOrdRejReasonField flyweightExchangeClosed;
    public static final FixOrdRejReasonField flyweightExchangeClosed()
    {
        if (flyweightExchangeClosed == null)
        {
            synchronized(FixOrdRejReasonField.class)
            {
                if (flyweightExchangeClosed == null)
                {
                    flyweightExchangeClosed  = new FixOrdRejReasonField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_ExchangeClosed;}
                     public String  getValueDescription()                {return text_ExchangeClosed;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ExchangeClosed).append("|").append(text_ExchangeClosed).append("]").toString();}
                     public boolean isExchangeClosed()                   {return true;}
                     public int     intValue()                           {return ExchangeClosed;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ExchangeClosed);}
                    };
                }
            }
        }

        return flyweightExchangeClosed;
    }

    private static FixOrdRejReasonField flyweightOrderExceedsLimit;
    public static final FixOrdRejReasonField flyweightOrderExceedsLimit()
    {
        if (flyweightOrderExceedsLimit == null)
        {
            synchronized(FixOrdRejReasonField.class)
            {
                if (flyweightOrderExceedsLimit == null)
                {
                    flyweightOrderExceedsLimit  = new FixOrdRejReasonField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_OrderExceedsLimit;}
                     public String  getValueDescription()                {return text_OrderExceedsLimit;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OrderExceedsLimit).append("|").append(text_OrderExceedsLimit).append("]").toString();}
                     public boolean isOrderExceedsLimit()                {return true;}
                     public int     intValue()                           {return OrderExceedsLimit;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OrderExceedsLimit);}
                    };
                }
            }
        }

        return flyweightOrderExceedsLimit;
    }

    private static FixOrdRejReasonField flyweightTooLateToEnter;
    public static final FixOrdRejReasonField flyweightTooLateToEnter()
    {
        if (flyweightTooLateToEnter == null)
        {
            synchronized(FixOrdRejReasonField.class)
            {
                if (flyweightTooLateToEnter == null)
                {
                    flyweightTooLateToEnter  = new FixOrdRejReasonField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_TooLateToEnter;}
                     public String  getValueDescription()                {return text_TooLateToEnter;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_TooLateToEnter).append("|").append(text_TooLateToEnter).append("]").toString();}
                     public boolean isTooLateToEnter()                   {return true;}
                     public int     intValue()                           {return TooLateToEnter;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_TooLateToEnter);}
                    };
                }
            }
        }

        return flyweightTooLateToEnter;
    }

    private static FixOrdRejReasonField flyweightUnknownOrder;
    public static final FixOrdRejReasonField flyweightUnknownOrder()
    {
        if (flyweightUnknownOrder == null)
        {
            synchronized(FixOrdRejReasonField.class)
            {
                if (flyweightUnknownOrder == null)
                {
                    flyweightUnknownOrder  = new FixOrdRejReasonField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_UnknownOrder;}
                     public String  getValueDescription()                {return text_UnknownOrder;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnknownOrder).append("|").append(text_UnknownOrder).append("]").toString();}
                     public boolean isUnknownOrder()                     {return true;}
                     public int     intValue()                           {return UnknownOrder;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnknownOrder);}
                    };
                }
            }
        }

        return flyweightUnknownOrder;
    }

    private static FixOrdRejReasonField flyweightDuplicateOrder;
    public static final FixOrdRejReasonField flyweightDuplicateOrder()
    {
        if (flyweightDuplicateOrder == null)
        {
            synchronized(FixOrdRejReasonField.class)
            {
                if (flyweightDuplicateOrder == null)
                {
                    flyweightDuplicateOrder  = new FixOrdRejReasonField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_DuplicateOrder;}
                     public String  getValueDescription()                {return text_DuplicateOrder;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_DuplicateOrder).append("|").append(text_DuplicateOrder).append("]").toString();}
                     public boolean isDuplicateOrder()                   {return true;}
                     public int     intValue()                           {return DuplicateOrder;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_DuplicateOrder);}
                    };
                }
            }
        }

        return flyweightDuplicateOrder;
    }

    private static FixOrdRejReasonField flyweightDuplicateVerbalyes;
    public static final FixOrdRejReasonField flyweightDuplicateVerbalyes()
    {
        if (flyweightDuplicateVerbalyes == null)
        {
            synchronized(FixOrdRejReasonField.class)
            {
                if (flyweightDuplicateVerbalyes == null)
                {
                    flyweightDuplicateVerbalyes  = new FixOrdRejReasonField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_DuplicateVerbalyes;}
                     public String  getValueDescription()                {return text_DuplicateVerbalyes;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_DuplicateVerbalyes).append("|").append(text_DuplicateVerbalyes).append("]").toString();}
                     public boolean isDuplicateVerbalyes()               {return true;}
                     public int     intValue()                           {return DuplicateVerbalyes;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_DuplicateVerbalyes);}
                    };
                }
            }
        }

        return flyweightDuplicateVerbalyes;
    }

    private static FixOrdRejReasonField flyweightStaleOrder;
    public static final FixOrdRejReasonField flyweightStaleOrder()
    {
        if (flyweightStaleOrder == null)
        {
            synchronized(FixOrdRejReasonField.class)
            {
                if (flyweightStaleOrder == null)
                {
                    flyweightStaleOrder  = new FixOrdRejReasonField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_StaleOrder;}
                     public String  getValueDescription()                {return text_StaleOrder;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_StaleOrder).append("|").append(text_StaleOrder).append("]").toString();}
                     public boolean isStaleOrder()                       {return true;}
                     public int     intValue()                           {return StaleOrder;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_StaleOrder);}
                    };
                }
            }
        }

        return flyweightStaleOrder;
    }

    private static FixOrdRejReasonField flyweightUnsupportedOrderCharacteristic;
    public static final FixOrdRejReasonField flyweightUnsupportedOrderCharacteristic()
    {
        if (flyweightUnsupportedOrderCharacteristic == null)
        {
            synchronized(FixOrdRejReasonField.class)
            {
                if (flyweightUnsupportedOrderCharacteristic == null)
                {
                    flyweightUnsupportedOrderCharacteristic  = new FixOrdRejReasonField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_UnsupportedOrderCharacteristic;}
                     public String  getValueDescription()                {return text_UnsupportedOrderCharacteristic;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnsupportedOrderCharacteristic).append("|").append(text_UnsupportedOrderCharacteristic).append("]").toString();}
                     public boolean isUnsupportedOrderCharacteristic()   {return true;}
                     public int     intValue()                           {return UnsupportedOrderCharacteristic;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnsupportedOrderCharacteristic);}
                    };
                }
            }
        }

        return flyweightUnsupportedOrderCharacteristic;
    }


    public boolean isBrokerOption()                     {return false;}
    public boolean isUnknownSymbol()                    {return false;}
    public boolean isExchangeClosed()                   {return false;}
    public boolean isOrderExceedsLimit()                {return false;}
    public boolean isTooLateToEnter()                   {return false;}
    public boolean isUnknownOrder()                     {return false;}
    public boolean isDuplicateOrder()                   {return false;}
    public boolean isDuplicateVerbalyes()               {return false;}
    public boolean isStaleOrder()                       {return false;}
    public boolean isUnsupportedOrderCharacteristic()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixOrdRejReasonField create(char[] array, int offset, int length)
    {
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static FixOrdRejReasonField create(final int param)
    {
        switch (param)
        {                                                                                           
            case BrokerOption:                   return flyweightBrokerOption();
            case UnknownSymbol:                  return flyweightUnknownSymbol();
            case ExchangeClosed:                 return flyweightExchangeClosed();
            case OrderExceedsLimit:              return flyweightOrderExceedsLimit();
            case TooLateToEnter:                 return flyweightTooLateToEnter();
            case UnknownOrder:                   return flyweightUnknownOrder();
            case DuplicateOrder:                 return flyweightDuplicateOrder();
            case DuplicateVerbalyes:             return flyweightDuplicateVerbalyes();
            case StaleOrder:                     return flyweightStaleOrder();
            case UnsupportedOrderCharacteristic: return flyweightUnsupportedOrderCharacteristic();
        }
                                                                                                    
        return null;
    }                                                                                               
}
