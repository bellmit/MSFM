package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixStandInstDbTypeField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [169] (known as StandInstDbType).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixStandInstDbTypeField implements FixFieldIF, HasIntValueIF
{   
    public static final int    TagID         =  169;
    public static final String TagIDAsString = "169";
    public static final char[] TagIDAsChars  = {'1','6','9'};
    public static final String TagName       = "StandInstDbType";
    public static final String TagFixType    = "INT";
    public static final char[]  taggedchars_value0 = {'1','6','9', EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {'1','6','9', EQUALSchar, ONEchar,  SOHchar};

    public static final int     Other                         = 0;
    public static final String  string_Other                  = "0";
    public static final String  tagged_Other                  = TagIDAsString + EQUALS + string_Other + SOH;
    public static final char[]  taggedchars_Other             = {'1','6','9', EQUALSchar, '0', SOHchar};
    public static final String  text_Other                    = "Other";
    public static final int     DtcSid                        = 1;
    public static final String  string_DtcSid                 = "1";
    public static final String  tagged_DtcSid                 = TagIDAsString + EQUALS + string_DtcSid + SOH;
    public static final char[]  taggedchars_DtcSid            = {'1','6','9', EQUALSchar, '1', SOHchar};
    public static final String  text_DtcSid                   = "DtcSid";
    public static final int     ThomsonAlert                  = 2;
    public static final String  string_ThomsonAlert           = "2";
    public static final String  tagged_ThomsonAlert           = TagIDAsString + EQUALS + string_ThomsonAlert + SOH;
    public static final char[]  taggedchars_ThomsonAlert      = {'1','6','9', EQUALSchar, '2', SOHchar};
    public static final String  text_ThomsonAlert             = "ThomsonAlert";
    public static final int     AGlobalCustodian              = 3;
    public static final String  string_AGlobalCustodian       = "3";
    public static final String  tagged_AGlobalCustodian       = TagIDAsString + EQUALS + string_AGlobalCustodian + SOH;
    public static final char[]  taggedchars_AGlobalCustodian  = {'1','6','9', EQUALSchar, '3', SOHchar};
    public static final String  text_AGlobalCustodian         = "AGlobalCustodian";

    private static FixStandInstDbTypeField flyweightOther;
    public static final FixStandInstDbTypeField flyweightOther()
    {
        if (flyweightOther == null)
        {
            synchronized(FixStandInstDbTypeField.class)
            {
                if (flyweightOther == null)
                {
                    flyweightOther  = new FixStandInstDbTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Other;}
                     public String  getValueDescription()             {return text_Other;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Other).append("|").append(text_Other).append("]").toString();}
                     public boolean isOther()                         {return true;}
                     public int     intValue()                        {return Other;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Other);}
                    };
                }
            }
        }

        return flyweightOther;
    }

    private static FixStandInstDbTypeField flyweightDtcSid;
    public static final FixStandInstDbTypeField flyweightDtcSid()
    {
        if (flyweightDtcSid == null)
        {
            synchronized(FixStandInstDbTypeField.class)
            {
                if (flyweightDtcSid == null)
                {
                    flyweightDtcSid  = new FixStandInstDbTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_DtcSid;}
                     public String  getValueDescription()             {return text_DtcSid;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_DtcSid).append("|").append(text_DtcSid).append("]").toString();}
                     public boolean isDtcSid()                        {return true;}
                     public int     intValue()                        {return DtcSid;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_DtcSid);}
                    };
                }
            }
        }

        return flyweightDtcSid;
    }

    private static FixStandInstDbTypeField flyweightThomsonAlert;
    public static final FixStandInstDbTypeField flyweightThomsonAlert()
    {
        if (flyweightThomsonAlert == null)
        {
            synchronized(FixStandInstDbTypeField.class)
            {
                if (flyweightThomsonAlert == null)
                {
                    flyweightThomsonAlert  = new FixStandInstDbTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ThomsonAlert;}
                     public String  getValueDescription()             {return text_ThomsonAlert;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ThomsonAlert).append("|").append(text_ThomsonAlert).append("]").toString();}
                     public boolean isThomsonAlert()                  {return true;}
                     public int     intValue()                        {return ThomsonAlert;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ThomsonAlert);}
                    };
                }
            }
        }

        return flyweightThomsonAlert;
    }

    private static FixStandInstDbTypeField flyweightAGlobalCustodian;
    public static final FixStandInstDbTypeField flyweightAGlobalCustodian()
    {
        if (flyweightAGlobalCustodian == null)
        {
            synchronized(FixStandInstDbTypeField.class)
            {
                if (flyweightAGlobalCustodian == null)
                {
                    flyweightAGlobalCustodian  = new FixStandInstDbTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AGlobalCustodian;}
                     public String  getValueDescription()             {return text_AGlobalCustodian;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AGlobalCustodian).append("|").append(text_AGlobalCustodian).append("]").toString();}
                     public boolean isAGlobalCustodian()              {return true;}
                     public int     intValue()                        {return AGlobalCustodian;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AGlobalCustodian);}
                    };
                }
            }
        }

        return flyweightAGlobalCustodian;
    }


    public boolean isOther()              {return false;}
    public boolean isDtcSid()             {return false;}
    public boolean isThomsonAlert()       {return false;}
    public boolean isAGlobalCustodian()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixStandInstDbTypeField create(char[] array, int offset, int length)
    {
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static FixStandInstDbTypeField create(final int param)
    {
        switch (param)
        {                                                                                           
            case Other:            return flyweightOther();
            case DtcSid:           return flyweightDtcSid();
            case ThomsonAlert:     return flyweightThomsonAlert();
            case AGlobalCustodian: return flyweightAGlobalCustodian();
        }
                                                                                                    
        return null;
    }                                                                                               
}
