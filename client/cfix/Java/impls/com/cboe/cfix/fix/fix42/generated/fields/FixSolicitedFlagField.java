package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixSolicitedFlagField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [377] (known as SolicitedFlag).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;

public abstract class FixSolicitedFlagField implements FixFieldIF, HasBooleanValueIF
{   
    public static final int    TagID         =  377;
    public static final String TagIDAsString = "377";
    public static final char[] TagIDAsChars  = {'3','7','7'};
    public static final String TagName       = "SolicitedFlag";
    public static final String TagFixType    = "BOOLEAN";

    public static final boolean WasSolicited                 = true;
    public static final String  string_WasSolicited          = FIX_YES;
    public static final String  tagged_WasSolicited          = TagIDAsString + EQUALS + string_WasSolicited + SOH;
    public static final char    char_WasSolicited            = 'Y';
    public static final char[]  taggedchars_WasSolicited     = {'3','7','7', EQUALSchar, 'Y', SOHchar};
    public static final String  text_WasSolicited            = "WasSolicited";
    public static final boolean WasNotSolicited              = false;
    public static final String  string_WasNotSolicited       = FIX_NO;
    public static final String  tagged_WasNotSolicited       = TagIDAsString + EQUALS + string_WasNotSolicited + SOH;
    public static final char    char_WasNotSolicited         = 'N';
    public static final char[]  taggedchars_WasNotSolicited  = {'3','7','7', EQUALSchar, 'N', SOHchar};
    public static final String  text_WasNotSolicited         = "WasNotSolicited";

    private static FixSolicitedFlagField flyweightWasSolicited;
    public static final FixSolicitedFlagField flyweightWasSolicited()
    {
        if (flyweightWasSolicited == null)
        {
            synchronized(FixSolicitedFlagField.class)
            {
                if (flyweightWasSolicited == null)
                {
                    flyweightWasSolicited  = new FixSolicitedFlagField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_WasSolicited;}
                     public String  getValueDescription()             {return text_WasSolicited;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_WasSolicited).append("|").append(text_WasSolicited).append("]").toString();}
                     public boolean isWasSolicited()                  {return true;}
                     public boolean booleanValue()                    {return WasSolicited;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_WasSolicited);}
                    };
                }
            }
        }

        return flyweightWasSolicited;
    }

    private static FixSolicitedFlagField flyweightWasNotSolicited;
    public static final FixSolicitedFlagField flyweightWasNotSolicited()
    {
        if (flyweightWasNotSolicited == null)
        {
            synchronized(FixSolicitedFlagField.class)
            {
                if (flyweightWasNotSolicited == null)
                {
                    flyweightWasNotSolicited  = new FixSolicitedFlagField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_WasNotSolicited;}
                     public String  getValueDescription()             {return text_WasNotSolicited;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_WasNotSolicited).append("|").append(text_WasNotSolicited).append("]").toString();}
                     public boolean isWasNotSolicited()               {return true;}
                     public boolean booleanValue()                    {return WasNotSolicited;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_WasNotSolicited);}
                    };
                }
            }
        }

        return flyweightWasNotSolicited;
    }


    public boolean isWasSolicited()      {return false;}
    public boolean isWasNotSolicited()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixSolicitedFlagField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {                                                                                           
            if (array[offset] == char_WasSolicited)    return flyweightWasSolicited();
            if (array[offset] == char_WasNotSolicited) return flyweightWasNotSolicited();
        }
        return null;
    }

    public static final char[] truefalse_Flyweight  = new char[] {FixFieldIF.FIX_YESchar, FixFieldIF.FIX_NOchar};
    public static FixSolicitedFlagField create(boolean param)
    {
        return create(truefalse_Flyweight, param ? 0 : 1, 1);
    }                                                                                               
}
