package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixAllocRejCodeField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [88] (known as AllocRejCode).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixAllocRejCodeField implements FixFieldIF, HasIntValueIF
{   
    public static final int    TagID         =  88;
    public static final String TagIDAsString = "88";
    public static final char[] TagIDAsChars  = {'8','8'};
    public static final String TagName       = "AllocRejCode";
    public static final String TagFixType    = "INT";
    public static final char[]  taggedchars_value0 = {'8','8', EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {'8','8', EQUALSchar, ONEchar,  SOHchar};

    public static final int     UnknownAccount                              = 0;
    public static final String  string_UnknownAccount                       = "0";
    public static final String  tagged_UnknownAccount                       = TagIDAsString + EQUALS + string_UnknownAccount + SOH;
    public static final char[]  taggedchars_UnknownAccount                  = {'8','8', EQUALSchar, '0', SOHchar};
    public static final String  text_UnknownAccount                         = "UnknownAccount";
    public static final int     IncorrectQuantity                           = 1;
    public static final String  string_IncorrectQuantity                    = "1";
    public static final String  tagged_IncorrectQuantity                    = TagIDAsString + EQUALS + string_IncorrectQuantity + SOH;
    public static final char[]  taggedchars_IncorrectQuantity               = {'8','8', EQUALSchar, '1', SOHchar};
    public static final String  text_IncorrectQuantity                      = "IncorrectQuantity";
    public static final int     IncorrectAveragePrice                       = 2;
    public static final String  string_IncorrectAveragePrice                = "2";
    public static final String  tagged_IncorrectAveragePrice                = TagIDAsString + EQUALS + string_IncorrectAveragePrice + SOH;
    public static final char[]  taggedchars_IncorrectAveragePrice           = {'8','8', EQUALSchar, '2', SOHchar};
    public static final String  text_IncorrectAveragePrice                  = "IncorrectAveragePrice";
    public static final int     UnknownExecutingBrokerMnemonic              = 3;
    public static final String  string_UnknownExecutingBrokerMnemonic       = "3";
    public static final String  tagged_UnknownExecutingBrokerMnemonic       = TagIDAsString + EQUALS + string_UnknownExecutingBrokerMnemonic + SOH;
    public static final char[]  taggedchars_UnknownExecutingBrokerMnemonic  = {'8','8', EQUALSchar, '3', SOHchar};
    public static final String  text_UnknownExecutingBrokerMnemonic         = "UnknownExecutingBrokerMnemonic";
    public static final int     CommissionDifference                        = 4;
    public static final String  string_CommissionDifference                 = "4";
    public static final String  tagged_CommissionDifference                 = TagIDAsString + EQUALS + string_CommissionDifference + SOH;
    public static final char[]  taggedchars_CommissionDifference            = {'8','8', EQUALSchar, '4', SOHchar};
    public static final String  text_CommissionDifference                   = "CommissionDifference";
    public static final int     UnknownOrderId                              = 5;
    public static final String  string_UnknownOrderId                       = "5";
    public static final String  tagged_UnknownOrderId                       = TagIDAsString + EQUALS + string_UnknownOrderId + SOH;
    public static final char[]  taggedchars_UnknownOrderId                  = {'8','8', EQUALSchar, '5', SOHchar};
    public static final String  text_UnknownOrderId                         = "UnknownOrderId";
    public static final int     UnknownListId                               = 6;
    public static final String  string_UnknownListId                        = "6";
    public static final String  tagged_UnknownListId                        = TagIDAsString + EQUALS + string_UnknownListId + SOH;
    public static final char[]  taggedchars_UnknownListId                   = {'8','8', EQUALSchar, '6', SOHchar};
    public static final String  text_UnknownListId                          = "UnknownListId";
    public static final int     Other                                       = 7;
    public static final String  string_Other                                = "7";
    public static final String  tagged_Other                                = TagIDAsString + EQUALS + string_Other + SOH;
    public static final char[]  taggedchars_Other                           = {'8','8', EQUALSchar, '7', SOHchar};
    public static final String  text_Other                                  = "Other";

    private static FixAllocRejCodeField flyweightUnknownAccount;
    public static final FixAllocRejCodeField flyweightUnknownAccount()
    {
        if (flyweightUnknownAccount == null)
        {
            synchronized(FixAllocRejCodeField.class)
            {
                if (flyweightUnknownAccount == null)
                {
                    flyweightUnknownAccount  = new FixAllocRejCodeField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_UnknownAccount;}
                     public String  getValueDescription()                {return text_UnknownAccount;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnknownAccount).append("|").append(text_UnknownAccount).append("]").toString();}
                     public boolean isUnknownAccount()                   {return true;}
                     public int     intValue()                           {return UnknownAccount;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnknownAccount);}
                    };
                }
            }
        }

        return flyweightUnknownAccount;
    }

    private static FixAllocRejCodeField flyweightIncorrectQuantity;
    public static final FixAllocRejCodeField flyweightIncorrectQuantity()
    {
        if (flyweightIncorrectQuantity == null)
        {
            synchronized(FixAllocRejCodeField.class)
            {
                if (flyweightIncorrectQuantity == null)
                {
                    flyweightIncorrectQuantity  = new FixAllocRejCodeField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_IncorrectQuantity;}
                     public String  getValueDescription()                {return text_IncorrectQuantity;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_IncorrectQuantity).append("|").append(text_IncorrectQuantity).append("]").toString();}
                     public boolean isIncorrectQuantity()                {return true;}
                     public int     intValue()                           {return IncorrectQuantity;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_IncorrectQuantity);}
                    };
                }
            }
        }

        return flyweightIncorrectQuantity;
    }

    private static FixAllocRejCodeField flyweightIncorrectAveragePrice;
    public static final FixAllocRejCodeField flyweightIncorrectAveragePrice()
    {
        if (flyweightIncorrectAveragePrice == null)
        {
            synchronized(FixAllocRejCodeField.class)
            {
                if (flyweightIncorrectAveragePrice == null)
                {
                    flyweightIncorrectAveragePrice  = new FixAllocRejCodeField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_IncorrectAveragePrice;}
                     public String  getValueDescription()                {return text_IncorrectAveragePrice;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_IncorrectAveragePrice).append("|").append(text_IncorrectAveragePrice).append("]").toString();}
                     public boolean isIncorrectAveragePrice()            {return true;}
                     public int     intValue()                           {return IncorrectAveragePrice;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_IncorrectAveragePrice);}
                    };
                }
            }
        }

        return flyweightIncorrectAveragePrice;
    }

    private static FixAllocRejCodeField flyweightUnknownExecutingBrokerMnemonic;
    public static final FixAllocRejCodeField flyweightUnknownExecutingBrokerMnemonic()
    {
        if (flyweightUnknownExecutingBrokerMnemonic == null)
        {
            synchronized(FixAllocRejCodeField.class)
            {
                if (flyweightUnknownExecutingBrokerMnemonic == null)
                {
                    flyweightUnknownExecutingBrokerMnemonic  = new FixAllocRejCodeField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_UnknownExecutingBrokerMnemonic;}
                     public String  getValueDescription()                {return text_UnknownExecutingBrokerMnemonic;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnknownExecutingBrokerMnemonic).append("|").append(text_UnknownExecutingBrokerMnemonic).append("]").toString();}
                     public boolean isUnknownExecutingBrokerMnemonic()   {return true;}
                     public int     intValue()                           {return UnknownExecutingBrokerMnemonic;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnknownExecutingBrokerMnemonic);}
                    };
                }
            }
        }

        return flyweightUnknownExecutingBrokerMnemonic;
    }

    private static FixAllocRejCodeField flyweightCommissionDifference;
    public static final FixAllocRejCodeField flyweightCommissionDifference()
    {
        if (flyweightCommissionDifference == null)
        {
            synchronized(FixAllocRejCodeField.class)
            {
                if (flyweightCommissionDifference == null)
                {
                    flyweightCommissionDifference  = new FixAllocRejCodeField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_CommissionDifference;}
                     public String  getValueDescription()                {return text_CommissionDifference;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CommissionDifference).append("|").append(text_CommissionDifference).append("]").toString();}
                     public boolean isCommissionDifference()             {return true;}
                     public int     intValue()                           {return CommissionDifference;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_CommissionDifference);}
                    };
                }
            }
        }

        return flyweightCommissionDifference;
    }

    private static FixAllocRejCodeField flyweightUnknownOrderId;
    public static final FixAllocRejCodeField flyweightUnknownOrderId()
    {
        if (flyweightUnknownOrderId == null)
        {
            synchronized(FixAllocRejCodeField.class)
            {
                if (flyweightUnknownOrderId == null)
                {
                    flyweightUnknownOrderId  = new FixAllocRejCodeField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_UnknownOrderId;}
                     public String  getValueDescription()                {return text_UnknownOrderId;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnknownOrderId).append("|").append(text_UnknownOrderId).append("]").toString();}
                     public boolean isUnknownOrderId()                   {return true;}
                     public int     intValue()                           {return UnknownOrderId;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnknownOrderId);}
                    };
                }
            }
        }

        return flyweightUnknownOrderId;
    }

    private static FixAllocRejCodeField flyweightUnknownListId;
    public static final FixAllocRejCodeField flyweightUnknownListId()
    {
        if (flyweightUnknownListId == null)
        {
            synchronized(FixAllocRejCodeField.class)
            {
                if (flyweightUnknownListId == null)
                {
                    flyweightUnknownListId  = new FixAllocRejCodeField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_UnknownListId;}
                     public String  getValueDescription()                {return text_UnknownListId;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnknownListId).append("|").append(text_UnknownListId).append("]").toString();}
                     public boolean isUnknownListId()                    {return true;}
                     public int     intValue()                           {return UnknownListId;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnknownListId);}
                    };
                }
            }
        }

        return flyweightUnknownListId;
    }

    private static FixAllocRejCodeField flyweightOther;
    public static final FixAllocRejCodeField flyweightOther()
    {
        if (flyweightOther == null)
        {
            synchronized(FixAllocRejCodeField.class)
            {
                if (flyweightOther == null)
                {
                    flyweightOther  = new FixAllocRejCodeField()
                    {public boolean hasValue()                           {return true;}
                     public String  getValue()                           {return string_Other;}
                     public String  getValueDescription()                {return text_Other;}
                     public String  toString()                           {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Other).append("|").append(text_Other).append("]").toString();}
                     public boolean isOther()                            {return true;}
                     public int     intValue()                           {return Other;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Other);}
                    };
                }
            }
        }

        return flyweightOther;
    }


    public boolean isUnknownAccount()                   {return false;}
    public boolean isIncorrectQuantity()                {return false;}
    public boolean isIncorrectAveragePrice()            {return false;}
    public boolean isUnknownExecutingBrokerMnemonic()   {return false;}
    public boolean isCommissionDifference()             {return false;}
    public boolean isUnknownOrderId()                   {return false;}
    public boolean isUnknownListId()                    {return false;}
    public boolean isOther()                            {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixAllocRejCodeField create(char[] array, int offset, int length)
    {
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static FixAllocRejCodeField create(final int param)
    {
        switch (param)
        {                                                                                           
            case UnknownAccount:                 return flyweightUnknownAccount();
            case IncorrectQuantity:              return flyweightIncorrectQuantity();
            case IncorrectAveragePrice:          return flyweightIncorrectAveragePrice();
            case UnknownExecutingBrokerMnemonic: return flyweightUnknownExecutingBrokerMnemonic();
            case CommissionDifference:           return flyweightCommissionDifference();
            case UnknownOrderId:                 return flyweightUnknownOrderId();
            case UnknownListId:                  return flyweightUnknownListId();
            case Other:                          return flyweightOther();
        }
                                                                                                    
        return null;
    }                                                                                               
}
