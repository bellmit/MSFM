package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixIOINaturalFlagField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [130] (known as IOINaturalFlag).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;

public abstract class FixIOINaturalFlagField implements FixFieldIF, HasBooleanValueIF
{   
    public static final int    TagID         =  130;
    public static final String TagIDAsString = "130";
    public static final char[] TagIDAsChars  = {'1','3','0'};
    public static final String TagName       = "IOINaturalFlag";
    public static final String TagFixType    = "BOOLEAN";

    public static final boolean Natural                 = true;
    public static final String  string_Natural          = FIX_YES;
    public static final String  tagged_Natural          = TagIDAsString + EQUALS + string_Natural + SOH;
    public static final char    char_Natural            = 'Y';
    public static final char[]  taggedchars_Natural     = {'1','3','0', EQUALSchar, 'Y', SOHchar};
    public static final String  text_Natural            = "Natural";
    public static final boolean NotNatural              = false;
    public static final String  string_NotNatural       = FIX_NO;
    public static final String  tagged_NotNatural       = TagIDAsString + EQUALS + string_NotNatural + SOH;
    public static final char    char_NotNatural         = 'N';
    public static final char[]  taggedchars_NotNatural  = {'1','3','0', EQUALSchar, 'N', SOHchar};
    public static final String  text_NotNatural         = "NotNatural";

    private static FixIOINaturalFlagField flyweightNatural;
    public static final FixIOINaturalFlagField flyweightNatural()
    {
        if (flyweightNatural == null)
        {
            synchronized(FixIOINaturalFlagField.class)
            {
                if (flyweightNatural == null)
                {
                    flyweightNatural  = new FixIOINaturalFlagField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Natural;}
                     public String  getValueDescription()             {return text_Natural;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Natural).append("|").append(text_Natural).append("]").toString();}
                     public boolean isNatural()                       {return true;}
                     public boolean booleanValue()                    {return Natural;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Natural);}
                    };
                }
            }
        }

        return flyweightNatural;
    }

    private static FixIOINaturalFlagField flyweightNotNatural;
    public static final FixIOINaturalFlagField flyweightNotNatural()
    {
        if (flyweightNotNatural == null)
        {
            synchronized(FixIOINaturalFlagField.class)
            {
                if (flyweightNotNatural == null)
                {
                    flyweightNotNatural  = new FixIOINaturalFlagField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NotNatural;}
                     public String  getValueDescription()             {return text_NotNatural;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NotNatural).append("|").append(text_NotNatural).append("]").toString();}
                     public boolean isNotNatural()                    {return true;}
                     public boolean booleanValue()                    {return NotNatural;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NotNatural);}
                    };
                }
            }
        }

        return flyweightNotNatural;
    }


    public boolean isNatural()      {return false;}
    public boolean isNotNatural()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixIOINaturalFlagField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {                                                                                           
            if (array[offset] == char_Natural)    return flyweightNatural();
            if (array[offset] == char_NotNatural) return flyweightNotNatural();
        }
        return null;
    }

    public static final char[] truefalse_Flyweight  = new char[] {FixFieldIF.FIX_YESchar, FixFieldIF.FIX_NOchar};
    public static FixIOINaturalFlagField create(boolean param)
    {
        return create(truefalse_Flyweight, param ? 0 : 1, 1);
    }                                                                                               
}
