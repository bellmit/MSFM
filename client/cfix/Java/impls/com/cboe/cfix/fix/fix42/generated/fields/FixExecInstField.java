package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixExecInstField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [18] (known as ExecInst).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixExecInstField implements FixFieldIF
{   
    public static final int    TagID         =  18;
    public static final String TagIDAsString = "18";
    public static final char[] TagIDAsChars  = {'1','8'};
    public static final String TagName       = "ExecInst";
    public static final String TagFixType    = "MULTIPLEVALUESTRING";

    public static final char    NotHeld                                 = '1';
    public static final String  string_NotHeld                          = "1";
    public static final String  tagged_NotHeld                          = TagIDAsString + EQUALS + string_NotHeld + SOH;
    public static final char[]  taggedchars_NotHeld                     = {'1','8', EQUALSchar, '1', SOHchar};
    public static final int     bitmask_NotHeld                         = 1 << 1;  public static final String text_NotHeld                          = "NotHeld";
    public static final char    Work                                    = '2';
    public static final String  string_Work                             = "2";
    public static final String  tagged_Work                             = TagIDAsString + EQUALS + string_Work + SOH;
    public static final char[]  taggedchars_Work                        = {'1','8', EQUALSchar, '2', SOHchar};
    public static final int     bitmask_Work                            = 1 << 2;  public static final String text_Work                             = "Work";
    public static final char    GoAlong                                 = '3';
    public static final String  string_GoAlong                          = "3";
    public static final String  tagged_GoAlong                          = TagIDAsString + EQUALS + string_GoAlong + SOH;
    public static final char[]  taggedchars_GoAlong                     = {'1','8', EQUALSchar, '3', SOHchar};
    public static final int     bitmask_GoAlong                         = 1 << 3;  public static final String text_GoAlong                          = "GoAlong";
    public static final char    OverTheDay                              = '4';
    public static final String  string_OverTheDay                       = "4";
    public static final String  tagged_OverTheDay                       = TagIDAsString + EQUALS + string_OverTheDay + SOH;
    public static final char[]  taggedchars_OverTheDay                  = {'1','8', EQUALSchar, '4', SOHchar};
    public static final int     bitmask_OverTheDay                      = 1 << 4;  public static final String text_OverTheDay                       = "OverTheDay";
    public static final char    Held                                    = '5';
    public static final String  string_Held                             = "5";
    public static final String  tagged_Held                             = TagIDAsString + EQUALS + string_Held + SOH;
    public static final char[]  taggedchars_Held                        = {'1','8', EQUALSchar, '5', SOHchar};
    public static final int     bitmask_Held                            = 1 << 5;  public static final String text_Held                             = "Held";
    public static final char    ParticipateDontInitiate                 = '6';
    public static final String  string_ParticipateDontInitiate          = "6";
    public static final String  tagged_ParticipateDontInitiate          = TagIDAsString + EQUALS + string_ParticipateDontInitiate + SOH;
    public static final char[]  taggedchars_ParticipateDontInitiate     = {'1','8', EQUALSchar, '6', SOHchar};
    public static final int     bitmask_ParticipateDontInitiate         = 1 << 6;  public static final String text_ParticipateDontInitiate          = "ParticipateDontInitiate";
    public static final char    StrictScale                             = '7';
    public static final String  string_StrictScale                      = "7";
    public static final String  tagged_StrictScale                      = TagIDAsString + EQUALS + string_StrictScale + SOH;
    public static final char[]  taggedchars_StrictScale                 = {'1','8', EQUALSchar, '7', SOHchar};
    public static final int     bitmask_StrictScale                     = 1 << 7;  public static final String text_StrictScale                      = "StrictScale";
    public static final char    TryToScale                              = '8';
    public static final String  string_TryToScale                       = "8";
    public static final String  tagged_TryToScale                       = TagIDAsString + EQUALS + string_TryToScale + SOH;
    public static final char[]  taggedchars_TryToScale                  = {'1','8', EQUALSchar, '8', SOHchar};
    public static final int     bitmask_TryToScale                      = 1 << 8;  public static final String text_TryToScale                       = "TryToScale";
    public static final char    StayOnBidSide                           = '9';
    public static final String  string_StayOnBidSide                    = "9";
    public static final String  tagged_StayOnBidSide                    = TagIDAsString + EQUALS + string_StayOnBidSide + SOH;
    public static final char[]  taggedchars_StayOnBidSide               = {'1','8', EQUALSchar, '9', SOHchar};
    public static final int     bitmask_StayOnBidSide                   = 1 << 9;  public static final String text_StayOnBidSide                    = "StayOnBidSide";
    public static final char    StayOnOfferSide                         = '0';
    public static final String  string_StayOnOfferSide                  = "0";
    public static final String  tagged_StayOnOfferSide                  = TagIDAsString + EQUALS + string_StayOnOfferSide + SOH;
    public static final char[]  taggedchars_StayOnOfferSide             = {'1','8', EQUALSchar, '0', SOHchar};
    public static final int     bitmask_StayOnOfferSide                 = 1 << 10; public static final String text_StayOnOfferSide                  = "StayOnOfferSide";
    public static final char    NoCross                                 = 'A';
    public static final String  string_NoCross                          = "A";
    public static final String  tagged_NoCross                          = TagIDAsString + EQUALS + string_NoCross + SOH;
    public static final char[]  taggedchars_NoCross                     = {'1','8', EQUALSchar, 'A', SOHchar};
    public static final int     bitmask_NoCross                         = 1 << 11; public static final String text_NoCross                          = "NoCross";
    public static final char    OkToCross                               = 'B';
    public static final String  string_OkToCross                        = "B";
    public static final String  tagged_OkToCross                        = TagIDAsString + EQUALS + string_OkToCross + SOH;
    public static final char[]  taggedchars_OkToCross                   = {'1','8', EQUALSchar, 'B', SOHchar};
    public static final int     bitmask_OkToCross                       = 1 << 12; public static final String text_OkToCross                        = "OkToCross";
    public static final char    CallFirst                               = 'C';
    public static final String  string_CallFirst                        = "C";
    public static final String  tagged_CallFirst                        = TagIDAsString + EQUALS + string_CallFirst + SOH;
    public static final char[]  taggedchars_CallFirst                   = {'1','8', EQUALSchar, 'C', SOHchar};
    public static final int     bitmask_CallFirst                       = 1 << 13; public static final String text_CallFirst                        = "CallFirst";
    public static final char    PercentOfVolume                         = 'D';
    public static final String  string_PercentOfVolume                  = "D";
    public static final String  tagged_PercentOfVolume                  = TagIDAsString + EQUALS + string_PercentOfVolume + SOH;
    public static final char[]  taggedchars_PercentOfVolume             = {'1','8', EQUALSchar, 'D', SOHchar};
    public static final int     bitmask_PercentOfVolume                 = 1 << 14; public static final String text_PercentOfVolume                  = "PercentOfVolume";
    public static final char    DoNotIncrease                           = 'E';
    public static final String  string_DoNotIncrease                    = "E";
    public static final String  tagged_DoNotIncrease                    = TagIDAsString + EQUALS + string_DoNotIncrease + SOH;
    public static final char[]  taggedchars_DoNotIncrease               = {'1','8', EQUALSchar, 'E', SOHchar};
    public static final int     bitmask_DoNotIncrease                   = 1 << 15; public static final String text_DoNotIncrease                    = "DoNotIncrease";
    public static final char    DoNotReduce                             = 'F';
    public static final String  string_DoNotReduce                      = "F";
    public static final String  tagged_DoNotReduce                      = TagIDAsString + EQUALS + string_DoNotReduce + SOH;
    public static final char[]  taggedchars_DoNotReduce                 = {'1','8', EQUALSchar, 'F', SOHchar};
    public static final int     bitmask_DoNotReduce                     = 1 << 16; public static final String text_DoNotReduce                      = "DoNotReduce";
    public static final char    AllOrNone                               = 'G';
    public static final String  string_AllOrNone                        = "G";
    public static final String  tagged_AllOrNone                        = TagIDAsString + EQUALS + string_AllOrNone + SOH;
    public static final char[]  taggedchars_AllOrNone                   = {'1','8', EQUALSchar, 'G', SOHchar};
    public static final int     bitmask_AllOrNone                       = 1 << 17; public static final String text_AllOrNone                        = "AllOrNone";
    public static final char    InstitutionsOnly                        = 'I';
    public static final String  string_InstitutionsOnly                 = "I";
    public static final String  tagged_InstitutionsOnly                 = TagIDAsString + EQUALS + string_InstitutionsOnly + SOH;
    public static final char[]  taggedchars_InstitutionsOnly            = {'1','8', EQUALSchar, 'I', SOHchar};
    public static final int     bitmask_InstitutionsOnly                = 1 << 18; public static final String text_InstitutionsOnly                 = "InstitutionsOnly";
    public static final char    LastPeg                                 = 'L';
    public static final String  string_LastPeg                          = "L";
    public static final String  tagged_LastPeg                          = TagIDAsString + EQUALS + string_LastPeg + SOH;
    public static final char[]  taggedchars_LastPeg                     = {'1','8', EQUALSchar, 'L', SOHchar};
    public static final int     bitmask_LastPeg                         = 1 << 19; public static final String text_LastPeg                          = "LastPeg";
    public static final char    MidPricePeg                             = 'M';
    public static final String  string_MidPricePeg                      = "M";
    public static final String  tagged_MidPricePeg                      = TagIDAsString + EQUALS + string_MidPricePeg + SOH;
    public static final char[]  taggedchars_MidPricePeg                 = {'1','8', EQUALSchar, 'M', SOHchar};
    public static final int     bitmask_MidPricePeg                     = 1 << 20; public static final String text_MidPricePeg                      = "MidPricePeg";
    public static final char    NonNegotiable                           = 'N';
    public static final String  string_NonNegotiable                    = "N";
    public static final String  tagged_NonNegotiable                    = TagIDAsString + EQUALS + string_NonNegotiable + SOH;
    public static final char[]  taggedchars_NonNegotiable               = {'1','8', EQUALSchar, 'N', SOHchar};
    public static final int     bitmask_NonNegotiable                   = 1 << 21; public static final String text_NonNegotiable                    = "NonNegotiable";
    public static final char    OpeningPeg                              = 'O';
    public static final String  string_OpeningPeg                       = "O";
    public static final String  tagged_OpeningPeg                       = TagIDAsString + EQUALS + string_OpeningPeg + SOH;
    public static final char[]  taggedchars_OpeningPeg                  = {'1','8', EQUALSchar, 'O', SOHchar};
    public static final int     bitmask_OpeningPeg                      = 1 << 22; public static final String text_OpeningPeg                       = "OpeningPeg";
    public static final char    PrimaryPeg                              = 'R';
    public static final String  string_PrimaryPeg                       = "R";
    public static final String  tagged_PrimaryPeg                       = TagIDAsString + EQUALS + string_PrimaryPeg + SOH;
    public static final char[]  taggedchars_PrimaryPeg                  = {'1','8', EQUALSchar, 'R', SOHchar};
    public static final int     bitmask_PrimaryPeg                      = 1 << 23; public static final String text_PrimaryPeg                       = "PrimaryPeg";
    public static final char    Suspend                                 = 'S';
    public static final String  string_Suspend                          = "S";
    public static final String  tagged_Suspend                          = TagIDAsString + EQUALS + string_Suspend + SOH;
    public static final char[]  taggedchars_Suspend                     = {'1','8', EQUALSchar, 'S', SOHchar};
    public static final int     bitmask_Suspend                         = 1 << 24; public static final String text_Suspend                          = "Suspend";
    public static final char    FixedPeg                                = 'T';
    public static final String  string_FixedPeg                         = "T";
    public static final String  tagged_FixedPeg                         = TagIDAsString + EQUALS + string_FixedPeg + SOH;
    public static final char[]  taggedchars_FixedPeg                    = {'1','8', EQUALSchar, 'T', SOHchar};
    public static final int     bitmask_FixedPeg                        = 1 << 25; public static final String text_FixedPeg                         = "FixedPeg";
    public static final char    CustomerDisplayInstruction              = 'U';
    public static final String  string_CustomerDisplayInstruction       = "U";
    public static final String  tagged_CustomerDisplayInstruction       = TagIDAsString + EQUALS + string_CustomerDisplayInstruction + SOH;
    public static final char[]  taggedchars_CustomerDisplayInstruction  = {'1','8', EQUALSchar, 'U', SOHchar};
    public static final int     bitmask_CustomerDisplayInstruction      = 1 << 26; public static final String text_CustomerDisplayInstruction       = "CustomerDisplayInstruction";
    public static final char    Netting                                 = 'V';
    public static final String  string_Netting                          = "V";
    public static final String  tagged_Netting                          = TagIDAsString + EQUALS + string_Netting + SOH;
    public static final char[]  taggedchars_Netting                     = {'1','8', EQUALSchar, 'V', SOHchar};
    public static final int     bitmask_Netting                         = 1 << 27; public static final String text_Netting                          = "Netting";
    public static final char    PegToVwap                               = 'W';
    public static final String  string_PegToVwap                        = "W";
    public static final String  tagged_PegToVwap                        = TagIDAsString + EQUALS + string_PegToVwap + SOH;
    public static final char[]  taggedchars_PegToVwap                   = {'1','8', EQUALSchar, 'W', SOHchar};
    public static final int     bitmask_PegToVwap                       = 1 << 28; public static final String text_PegToVwap                        = "PegToVwap";

    private static FixExecInstField flyweightNotHeld;
    public static final FixExecInstField flyweightNotHeld()
    {
        if (flyweightNotHeld == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightNotHeld == null)
                {
                    flyweightNotHeld  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NotHeld;}
                     public String  getValueDescription()             {return text_NotHeld;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NotHeld).append("|").append(text_NotHeld).append("]").toString();}
                     public boolean isNotHeld()                       {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NotHeld);}
                    };
                }
            }
        }

        return flyweightNotHeld;
    }

    private static FixExecInstField flyweightWork;
    public static final FixExecInstField flyweightWork()
    {
        if (flyweightWork == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightWork == null)
                {
                    flyweightWork  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Work;}
                     public String  getValueDescription()             {return text_Work;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Work).append("|").append(text_Work).append("]").toString();}
                     public boolean isWork()                          {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Work);}
                    };
                }
            }
        }

        return flyweightWork;
    }

    private static FixExecInstField flyweightGoAlong;
    public static final FixExecInstField flyweightGoAlong()
    {
        if (flyweightGoAlong == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightGoAlong == null)
                {
                    flyweightGoAlong  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_GoAlong;}
                     public String  getValueDescription()             {return text_GoAlong;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_GoAlong).append("|").append(text_GoAlong).append("]").toString();}
                     public boolean isGoAlong()                       {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_GoAlong);}
                    };
                }
            }
        }

        return flyweightGoAlong;
    }

    private static FixExecInstField flyweightOverTheDay;
    public static final FixExecInstField flyweightOverTheDay()
    {
        if (flyweightOverTheDay == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightOverTheDay == null)
                {
                    flyweightOverTheDay  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_OverTheDay;}
                     public String  getValueDescription()             {return text_OverTheDay;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OverTheDay).append("|").append(text_OverTheDay).append("]").toString();}
                     public boolean isOverTheDay()                    {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OverTheDay);}
                    };
                }
            }
        }

        return flyweightOverTheDay;
    }

    private static FixExecInstField flyweightHeld;
    public static final FixExecInstField flyweightHeld()
    {
        if (flyweightHeld == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightHeld == null)
                {
                    flyweightHeld  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Held;}
                     public String  getValueDescription()             {return text_Held;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Held).append("|").append(text_Held).append("]").toString();}
                     public boolean isHeld()                          {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Held);}
                    };
                }
            }
        }

        return flyweightHeld;
    }

    private static FixExecInstField flyweightParticipateDontInitiate;
    public static final FixExecInstField flyweightParticipateDontInitiate()
    {
        if (flyweightParticipateDontInitiate == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightParticipateDontInitiate == null)
                {
                    flyweightParticipateDontInitiate  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ParticipateDontInitiate;}
                     public String  getValueDescription()             {return text_ParticipateDontInitiate;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ParticipateDontInitiate).append("|").append(text_ParticipateDontInitiate).append("]").toString();}
                     public boolean isParticipateDontInitiate()       {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ParticipateDontInitiate);}
                    };
                }
            }
        }

        return flyweightParticipateDontInitiate;
    }

    private static FixExecInstField flyweightStrictScale;
    public static final FixExecInstField flyweightStrictScale()
    {
        if (flyweightStrictScale == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightStrictScale == null)
                {
                    flyweightStrictScale  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_StrictScale;}
                     public String  getValueDescription()             {return text_StrictScale;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_StrictScale).append("|").append(text_StrictScale).append("]").toString();}
                     public boolean isStrictScale()                   {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_StrictScale);}
                    };
                }
            }
        }

        return flyweightStrictScale;
    }

    private static FixExecInstField flyweightTryToScale;
    public static final FixExecInstField flyweightTryToScale()
    {
        if (flyweightTryToScale == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightTryToScale == null)
                {
                    flyweightTryToScale  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_TryToScale;}
                     public String  getValueDescription()             {return text_TryToScale;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_TryToScale).append("|").append(text_TryToScale).append("]").toString();}
                     public boolean isTryToScale()                    {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_TryToScale);}
                    };
                }
            }
        }

        return flyweightTryToScale;
    }

    private static FixExecInstField flyweightStayOnBidSide;
    public static final FixExecInstField flyweightStayOnBidSide()
    {
        if (flyweightStayOnBidSide == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightStayOnBidSide == null)
                {
                    flyweightStayOnBidSide  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_StayOnBidSide;}
                     public String  getValueDescription()             {return text_StayOnBidSide;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_StayOnBidSide).append("|").append(text_StayOnBidSide).append("]").toString();}
                     public boolean isStayOnBidSide()                 {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_StayOnBidSide);}
                    };
                }
            }
        }

        return flyweightStayOnBidSide;
    }

    private static FixExecInstField flyweightStayOnOfferSide;
    public static final FixExecInstField flyweightStayOnOfferSide()
    {
        if (flyweightStayOnOfferSide == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightStayOnOfferSide == null)
                {
                    flyweightStayOnOfferSide  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_StayOnOfferSide;}
                     public String  getValueDescription()             {return text_StayOnOfferSide;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_StayOnOfferSide).append("|").append(text_StayOnOfferSide).append("]").toString();}
                     public boolean isStayOnOfferSide()               {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_StayOnOfferSide);}
                    };
                }
            }
        }

        return flyweightStayOnOfferSide;
    }

    private static FixExecInstField flyweightNoCross;
    public static final FixExecInstField flyweightNoCross()
    {
        if (flyweightNoCross == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightNoCross == null)
                {
                    flyweightNoCross  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NoCross;}
                     public String  getValueDescription()             {return text_NoCross;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NoCross).append("|").append(text_NoCross).append("]").toString();}
                     public boolean isNoCross()                       {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NoCross);}
                    };
                }
            }
        }

        return flyweightNoCross;
    }

    private static FixExecInstField flyweightOkToCross;
    public static final FixExecInstField flyweightOkToCross()
    {
        if (flyweightOkToCross == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightOkToCross == null)
                {
                    flyweightOkToCross  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_OkToCross;}
                     public String  getValueDescription()             {return text_OkToCross;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OkToCross).append("|").append(text_OkToCross).append("]").toString();}
                     public boolean isOkToCross()                     {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OkToCross);}
                    };
                }
            }
        }

        return flyweightOkToCross;
    }

    private static FixExecInstField flyweightCallFirst;
    public static final FixExecInstField flyweightCallFirst()
    {
        if (flyweightCallFirst == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightCallFirst == null)
                {
                    flyweightCallFirst  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_CallFirst;}
                     public String  getValueDescription()             {return text_CallFirst;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CallFirst).append("|").append(text_CallFirst).append("]").toString();}
                     public boolean isCallFirst()                     {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_CallFirst);}
                    };
                }
            }
        }

        return flyweightCallFirst;
    }

    private static FixExecInstField flyweightPercentOfVolume;
    public static final FixExecInstField flyweightPercentOfVolume()
    {
        if (flyweightPercentOfVolume == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightPercentOfVolume == null)
                {
                    flyweightPercentOfVolume  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PercentOfVolume;}
                     public String  getValueDescription()             {return text_PercentOfVolume;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PercentOfVolume).append("|").append(text_PercentOfVolume).append("]").toString();}
                     public boolean isPercentOfVolume()               {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PercentOfVolume);}
                    };
                }
            }
        }

        return flyweightPercentOfVolume;
    }

    private static FixExecInstField flyweightDoNotIncrease;
    public static final FixExecInstField flyweightDoNotIncrease()
    {
        if (flyweightDoNotIncrease == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightDoNotIncrease == null)
                {
                    flyweightDoNotIncrease  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_DoNotIncrease;}
                     public String  getValueDescription()             {return text_DoNotIncrease;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_DoNotIncrease).append("|").append(text_DoNotIncrease).append("]").toString();}
                     public boolean isDoNotIncrease()                 {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_DoNotIncrease);}
                    };
                }
            }
        }

        return flyweightDoNotIncrease;
    }

    private static FixExecInstField flyweightDoNotReduce;
    public static final FixExecInstField flyweightDoNotReduce()
    {
        if (flyweightDoNotReduce == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightDoNotReduce == null)
                {
                    flyweightDoNotReduce  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_DoNotReduce;}
                     public String  getValueDescription()             {return text_DoNotReduce;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_DoNotReduce).append("|").append(text_DoNotReduce).append("]").toString();}
                     public boolean isDoNotReduce()                   {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_DoNotReduce);}
                    };
                }
            }
        }

        return flyweightDoNotReduce;
    }

    private static FixExecInstField flyweightAllOrNone;
    public static final FixExecInstField flyweightAllOrNone()
    {
        if (flyweightAllOrNone == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightAllOrNone == null)
                {
                    flyweightAllOrNone  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AllOrNone;}
                     public String  getValueDescription()             {return text_AllOrNone;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AllOrNone).append("|").append(text_AllOrNone).append("]").toString();}
                     public boolean isAllOrNone()                     {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AllOrNone);}
                    };
                }
            }
        }

        return flyweightAllOrNone;
    }

    private static FixExecInstField flyweightInstitutionsOnly;
    public static final FixExecInstField flyweightInstitutionsOnly()
    {
        if (flyweightInstitutionsOnly == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightInstitutionsOnly == null)
                {
                    flyweightInstitutionsOnly  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_InstitutionsOnly;}
                     public String  getValueDescription()             {return text_InstitutionsOnly;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_InstitutionsOnly).append("|").append(text_InstitutionsOnly).append("]").toString();}
                     public boolean isInstitutionsOnly()              {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_InstitutionsOnly);}
                    };
                }
            }
        }

        return flyweightInstitutionsOnly;
    }

    private static FixExecInstField flyweightLastPeg;
    public static final FixExecInstField flyweightLastPeg()
    {
        if (flyweightLastPeg == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightLastPeg == null)
                {
                    flyweightLastPeg  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_LastPeg;}
                     public String  getValueDescription()             {return text_LastPeg;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_LastPeg).append("|").append(text_LastPeg).append("]").toString();}
                     public boolean isLastPeg()                       {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_LastPeg);}
                    };
                }
            }
        }

        return flyweightLastPeg;
    }

    private static FixExecInstField flyweightMidPricePeg;
    public static final FixExecInstField flyweightMidPricePeg()
    {
        if (flyweightMidPricePeg == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightMidPricePeg == null)
                {
                    flyweightMidPricePeg  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_MidPricePeg;}
                     public String  getValueDescription()             {return text_MidPricePeg;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_MidPricePeg).append("|").append(text_MidPricePeg).append("]").toString();}
                     public boolean isMidPricePeg()                   {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_MidPricePeg);}
                    };
                }
            }
        }

        return flyweightMidPricePeg;
    }

    private static FixExecInstField flyweightNonNegotiable;
    public static final FixExecInstField flyweightNonNegotiable()
    {
        if (flyweightNonNegotiable == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightNonNegotiable == null)
                {
                    flyweightNonNegotiable  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NonNegotiable;}
                     public String  getValueDescription()             {return text_NonNegotiable;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NonNegotiable).append("|").append(text_NonNegotiable).append("]").toString();}
                     public boolean isNonNegotiable()                 {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NonNegotiable);}
                    };
                }
            }
        }

        return flyweightNonNegotiable;
    }

    private static FixExecInstField flyweightOpeningPeg;
    public static final FixExecInstField flyweightOpeningPeg()
    {
        if (flyweightOpeningPeg == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightOpeningPeg == null)
                {
                    flyweightOpeningPeg  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_OpeningPeg;}
                     public String  getValueDescription()             {return text_OpeningPeg;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OpeningPeg).append("|").append(text_OpeningPeg).append("]").toString();}
                     public boolean isOpeningPeg()                    {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OpeningPeg);}
                    };
                }
            }
        }

        return flyweightOpeningPeg;
    }

    private static FixExecInstField flyweightPrimaryPeg;
    public static final FixExecInstField flyweightPrimaryPeg()
    {
        if (flyweightPrimaryPeg == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightPrimaryPeg == null)
                {
                    flyweightPrimaryPeg  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PrimaryPeg;}
                     public String  getValueDescription()             {return text_PrimaryPeg;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PrimaryPeg).append("|").append(text_PrimaryPeg).append("]").toString();}
                     public boolean isPrimaryPeg()                    {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PrimaryPeg);}
                    };
                }
            }
        }

        return flyweightPrimaryPeg;
    }

    private static FixExecInstField flyweightSuspend;
    public static final FixExecInstField flyweightSuspend()
    {
        if (flyweightSuspend == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightSuspend == null)
                {
                    flyweightSuspend  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Suspend;}
                     public String  getValueDescription()             {return text_Suspend;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Suspend).append("|").append(text_Suspend).append("]").toString();}
                     public boolean isSuspend()                       {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Suspend);}
                    };
                }
            }
        }

        return flyweightSuspend;
    }

    private static FixExecInstField flyweightFixedPeg;
    public static final FixExecInstField flyweightFixedPeg()
    {
        if (flyweightFixedPeg == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightFixedPeg == null)
                {
                    flyweightFixedPeg  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_FixedPeg;}
                     public String  getValueDescription()             {return text_FixedPeg;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_FixedPeg).append("|").append(text_FixedPeg).append("]").toString();}
                     public boolean isFixedPeg()                      {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_FixedPeg);}
                    };
                }
            }
        }

        return flyweightFixedPeg;
    }

    private static FixExecInstField flyweightCustomerDisplayInstruction;
    public static final FixExecInstField flyweightCustomerDisplayInstruction()
    {
        if (flyweightCustomerDisplayInstruction == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightCustomerDisplayInstruction == null)
                {
                    flyweightCustomerDisplayInstruction  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_CustomerDisplayInstruction;}
                     public String  getValueDescription()             {return text_CustomerDisplayInstruction;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CustomerDisplayInstruction).append("|").append(text_CustomerDisplayInstruction).append("]").toString();}
                     public boolean isCustomerDisplayInstruction()    {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_CustomerDisplayInstruction);}
                    };
                }
            }
        }

        return flyweightCustomerDisplayInstruction;
    }

    private static FixExecInstField flyweightNetting;
    public static final FixExecInstField flyweightNetting()
    {
        if (flyweightNetting == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightNetting == null)
                {
                    flyweightNetting  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Netting;}
                     public String  getValueDescription()             {return text_Netting;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Netting).append("|").append(text_Netting).append("]").toString();}
                     public boolean isNetting()                       {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Netting);}
                    };
                }
            }
        }

        return flyweightNetting;
    }

    private static FixExecInstField flyweightPegToVwap;
    public static final FixExecInstField flyweightPegToVwap()
    {
        if (flyweightPegToVwap == null)
        {
            synchronized(FixExecInstField.class)
            {
                if (flyweightPegToVwap == null)
                {
                    flyweightPegToVwap  = new FixExecInstField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PegToVwap;}
                     public String  getValueDescription()             {return text_PegToVwap;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PegToVwap).append("|").append(text_PegToVwap).append("]").toString();}
                     public boolean isPegToVwap()                     {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PegToVwap);}
                    };
                }
            }
        }

        return flyweightPegToVwap;
    }


    public boolean isNotHeld()                      {return false;}
    public boolean isWork()                         {return false;}
    public boolean isGoAlong()                      {return false;}
    public boolean isOverTheDay()                   {return false;}
    public boolean isHeld()                         {return false;}
    public boolean isParticipateDontInitiate()      {return false;}
    public boolean isStrictScale()                  {return false;}
    public boolean isTryToScale()                   {return false;}
    public boolean isStayOnBidSide()                {return false;}
    public boolean isStayOnOfferSide()              {return false;}
    public boolean isNoCross()                      {return false;}
    public boolean isOkToCross()                    {return false;}
    public boolean isCallFirst()                    {return false;}
    public boolean isPercentOfVolume()              {return false;}
    public boolean isDoNotIncrease()                {return false;}
    public boolean isDoNotReduce()                  {return false;}
    public boolean isAllOrNone()                    {return false;}
    public boolean isInstitutionsOnly()             {return false;}
    public boolean isLastPeg()                      {return false;}
    public boolean isMidPricePeg()                  {return false;}
    public boolean isNonNegotiable()                {return false;}
    public boolean isOpeningPeg()                   {return false;}
    public boolean isPrimaryPeg()                   {return false;}
    public boolean isSuspend()                      {return false;}
    public boolean isFixedPeg()                     {return false;}
    public boolean isCustomerDisplayInstruction()   {return false;}
    public boolean isNetting()                      {return false;}
    public boolean isPegToVwap()                    {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixExecInstField create(char[] array, int offset, int length)
    {
        return create(new String(array, offset, length));
    }

    public static FixExecInstField create(final String multiparam)
    {
        int bitmask = 0;

        for (int i = 0; i < multiparam.length(); i++)
        {
            switch (multiparam.charAt(i))
            {                                                                                           
                case NotHeld:
                    if (multiparam.length() == 1) return flyweightNotHeld();
                    bitmask |= bitmask_NotHeld;
                    break;
                case Work:
                    if (multiparam.length() == 1) return flyweightWork();
                    bitmask |= bitmask_Work;
                    break;
                case GoAlong:
                    if (multiparam.length() == 1) return flyweightGoAlong();
                    bitmask |= bitmask_GoAlong;
                    break;
                case OverTheDay:
                    if (multiparam.length() == 1) return flyweightOverTheDay();
                    bitmask |= bitmask_OverTheDay;
                    break;
                case Held:
                    if (multiparam.length() == 1) return flyweightHeld();
                    bitmask |= bitmask_Held;
                    break;
                case ParticipateDontInitiate:
                    if (multiparam.length() == 1) return flyweightParticipateDontInitiate();
                    bitmask |= bitmask_ParticipateDontInitiate;
                    break;
                case StrictScale:
                    if (multiparam.length() == 1) return flyweightStrictScale();
                    bitmask |= bitmask_StrictScale;
                    break;
                case TryToScale:
                    if (multiparam.length() == 1) return flyweightTryToScale();
                    bitmask |= bitmask_TryToScale;
                    break;
                case StayOnBidSide:
                    if (multiparam.length() == 1) return flyweightStayOnBidSide();
                    bitmask |= bitmask_StayOnBidSide;
                    break;
                case StayOnOfferSide:
                    if (multiparam.length() == 1) return flyweightStayOnOfferSide();
                    bitmask |= bitmask_StayOnOfferSide;
                    break;
                case NoCross:
                    if (multiparam.length() == 1) return flyweightNoCross();
                    bitmask |= bitmask_NoCross;
                    break;
                case OkToCross:
                    if (multiparam.length() == 1) return flyweightOkToCross();
                    bitmask |= bitmask_OkToCross;
                    break;
                case CallFirst:
                    if (multiparam.length() == 1) return flyweightCallFirst();
                    bitmask |= bitmask_CallFirst;
                    break;
                case PercentOfVolume:
                    if (multiparam.length() == 1) return flyweightPercentOfVolume();
                    bitmask |= bitmask_PercentOfVolume;
                    break;
                case DoNotIncrease:
                    if (multiparam.length() == 1) return flyweightDoNotIncrease();
                    bitmask |= bitmask_DoNotIncrease;
                    break;
                case DoNotReduce:
                    if (multiparam.length() == 1) return flyweightDoNotReduce();
                    bitmask |= bitmask_DoNotReduce;
                    break;
                case AllOrNone:
                    if (multiparam.length() == 1) return flyweightAllOrNone();
                    bitmask |= bitmask_AllOrNone;
                    break;
                case InstitutionsOnly:
                    if (multiparam.length() == 1) return flyweightInstitutionsOnly();
                    bitmask |= bitmask_InstitutionsOnly;
                    break;
                case LastPeg:
                    if (multiparam.length() == 1) return flyweightLastPeg();
                    bitmask |= bitmask_LastPeg;
                    break;
                case MidPricePeg:
                    if (multiparam.length() == 1) return flyweightMidPricePeg();
                    bitmask |= bitmask_MidPricePeg;
                    break;
                case NonNegotiable:
                    if (multiparam.length() == 1) return flyweightNonNegotiable();
                    bitmask |= bitmask_NonNegotiable;
                    break;
                case OpeningPeg:
                    if (multiparam.length() == 1) return flyweightOpeningPeg();
                    bitmask |= bitmask_OpeningPeg;
                    break;
                case PrimaryPeg:
                    if (multiparam.length() == 1) return flyweightPrimaryPeg();
                    bitmask |= bitmask_PrimaryPeg;
                    break;
                case Suspend:
                    if (multiparam.length() == 1) return flyweightSuspend();
                    bitmask |= bitmask_Suspend;
                    break;
                case FixedPeg:
                    if (multiparam.length() == 1) return flyweightFixedPeg();
                    bitmask |= bitmask_FixedPeg;
                    break;
                case CustomerDisplayInstruction:
                    if (multiparam.length() == 1) return flyweightCustomerDisplayInstruction();
                    bitmask |= bitmask_CustomerDisplayInstruction;
                    break;
                case Netting:
                    if (multiparam.length() == 1) return flyweightNetting();
                    bitmask |= bitmask_Netting;
                    break;
                case PegToVwap:
                    if (multiparam.length() == 1) return flyweightPegToVwap();
                    bitmask |= bitmask_PegToVwap;
                    break;
                default:
                    return null;
            }
        }

        if (bitmask == 0)
        {
            return null;
        }

        final int bits = bitmask;

        return new FixExecInstField()
        {       public int value = bits;
                public boolean hasValue()                        {return bits != 0;}
                public String  getValue()                        {return this.toMultipleValueString(value);}
        };
    }                                                                                               
    public static String toMultipleValueString(int bitmask)
    {
        StringBuilder buffer = new StringBuilder();
                                                                                                        
        if (BitHelper.isBitMaskSet(bitmask, bitmask_NotHeld)) buffer.append(string_NotHeld).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_Work)) buffer.append(string_Work).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_GoAlong)) buffer.append(string_GoAlong).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_OverTheDay)) buffer.append(string_OverTheDay).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_Held)) buffer.append(string_Held).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_ParticipateDontInitiate)) buffer.append(string_ParticipateDontInitiate).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_StrictScale)) buffer.append(string_StrictScale).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_TryToScale)) buffer.append(string_TryToScale).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_StayOnBidSide)) buffer.append(string_StayOnBidSide).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_StayOnOfferSide)) buffer.append(string_StayOnOfferSide).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_NoCross)) buffer.append(string_NoCross).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_OkToCross)) buffer.append(string_OkToCross).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_CallFirst)) buffer.append(string_CallFirst).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_PercentOfVolume)) buffer.append(string_PercentOfVolume).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_DoNotIncrease)) buffer.append(string_DoNotIncrease).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_DoNotReduce)) buffer.append(string_DoNotReduce).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_AllOrNone)) buffer.append(string_AllOrNone).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_InstitutionsOnly)) buffer.append(string_InstitutionsOnly).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_LastPeg)) buffer.append(string_LastPeg).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_MidPricePeg)) buffer.append(string_MidPricePeg).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_NonNegotiable)) buffer.append(string_NonNegotiable).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_OpeningPeg)) buffer.append(string_OpeningPeg).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_PrimaryPeg)) buffer.append(string_PrimaryPeg).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_Suspend)) buffer.append(string_Suspend).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_FixedPeg)) buffer.append(string_FixedPeg).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_CustomerDisplayInstruction)) buffer.append(string_CustomerDisplayInstruction).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_Netting)) buffer.append(string_Netting).append(' ');
        if (BitHelper.isBitMaskSet(bitmask, bitmask_PegToVwap)) buffer.append(string_PegToVwap).append(' ');

        if (buffer.charAt(buffer.length() - 1) == ' ') buffer.setLength(buffer.length() - 1);

        return buffer.toString();
    }                                                                                                   
}
