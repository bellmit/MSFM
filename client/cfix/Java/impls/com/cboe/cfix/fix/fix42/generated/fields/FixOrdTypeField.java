package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixOrdTypeField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [40] (known as OrdType).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixOrdTypeField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  40;
    public static final String TagIDAsString = "40";
    public static final char[] TagIDAsChars  = {'4','0'};
    public static final String TagName       = "OrdType";
    public static final String TagFixType    = "CHAR";

    public static final char    Market                             = '1';
    public static final String  string_Market                      = "1";
    public static final String  tagged_Market                      = TagIDAsString + EQUALS + string_Market + SOH;
    public static final char[]  taggedchars_Market                 = {'4','0', EQUALSchar, '1', SOHchar};
    public static final String  text_Market                        = "Market";
    public static final char    Limit                              = '2';
    public static final String  string_Limit                       = "2";
    public static final String  tagged_Limit                       = TagIDAsString + EQUALS + string_Limit + SOH;
    public static final char[]  taggedchars_Limit                  = {'4','0', EQUALSchar, '2', SOHchar};
    public static final String  text_Limit                         = "Limit";
    public static final char    Stop                               = '3';
    public static final String  string_Stop                        = "3";
    public static final String  tagged_Stop                        = TagIDAsString + EQUALS + string_Stop + SOH;
    public static final char[]  taggedchars_Stop                   = {'4','0', EQUALSchar, '3', SOHchar};
    public static final String  text_Stop                          = "Stop";
    public static final char    StopLimit                          = '4';
    public static final String  string_StopLimit                   = "4";
    public static final String  tagged_StopLimit                   = TagIDAsString + EQUALS + string_StopLimit + SOH;
    public static final char[]  taggedchars_StopLimit              = {'4','0', EQUALSchar, '4', SOHchar};
    public static final String  text_StopLimit                     = "StopLimit";
    public static final char    MarketOnClose                      = '5';
    public static final String  string_MarketOnClose               = "5";
    public static final String  tagged_MarketOnClose               = TagIDAsString + EQUALS + string_MarketOnClose + SOH;
    public static final char[]  taggedchars_MarketOnClose          = {'4','0', EQUALSchar, '5', SOHchar};
    public static final String  text_MarketOnClose                 = "MarketOnClose";
    public static final char    WithOrWithout                      = '6';
    public static final String  string_WithOrWithout               = "6";
    public static final String  tagged_WithOrWithout               = TagIDAsString + EQUALS + string_WithOrWithout + SOH;
    public static final char[]  taggedchars_WithOrWithout          = {'4','0', EQUALSchar, '6', SOHchar};
    public static final String  text_WithOrWithout                 = "WithOrWithout";
    public static final char    LimitOrBetter                      = '7';
    public static final String  string_LimitOrBetter               = "7";
    public static final String  tagged_LimitOrBetter               = TagIDAsString + EQUALS + string_LimitOrBetter + SOH;
    public static final char[]  taggedchars_LimitOrBetter          = {'4','0', EQUALSchar, '7', SOHchar};
    public static final String  text_LimitOrBetter                 = "LimitOrBetter";
    public static final char    LimitWithOrWithout                 = '8';
    public static final String  string_LimitWithOrWithout          = "8";
    public static final String  tagged_LimitWithOrWithout          = TagIDAsString + EQUALS + string_LimitWithOrWithout + SOH;
    public static final char[]  taggedchars_LimitWithOrWithout     = {'4','0', EQUALSchar, '8', SOHchar};
    public static final String  text_LimitWithOrWithout            = "LimitWithOrWithout";
    public static final char    OnBasis                            = '9';
    public static final String  string_OnBasis                     = "9";
    public static final String  tagged_OnBasis                     = TagIDAsString + EQUALS + string_OnBasis + SOH;
    public static final char[]  taggedchars_OnBasis                = {'4','0', EQUALSchar, '9', SOHchar};
    public static final String  text_OnBasis                       = "OnBasis";
    public static final char    OnClose                            = 'A';
    public static final String  string_OnClose                     = "A";
    public static final String  tagged_OnClose                     = TagIDAsString + EQUALS + string_OnClose + SOH;
    public static final char[]  taggedchars_OnClose                = {'4','0', EQUALSchar, 'A', SOHchar};
    public static final String  text_OnClose                       = "OnClose";
    public static final char    LimitOnClose                       = 'B';
    public static final String  string_LimitOnClose                = "B";
    public static final String  tagged_LimitOnClose                = TagIDAsString + EQUALS + string_LimitOnClose + SOH;
    public static final char[]  taggedchars_LimitOnClose           = {'4','0', EQUALSchar, 'B', SOHchar};
    public static final String  text_LimitOnClose                  = "LimitOnClose";
    public static final char    ForexMarket                        = 'C';
    public static final String  string_ForexMarket                 = "C";
    public static final String  tagged_ForexMarket                 = TagIDAsString + EQUALS + string_ForexMarket + SOH;
    public static final char[]  taggedchars_ForexMarket            = {'4','0', EQUALSchar, 'C', SOHchar};
    public static final String  text_ForexMarket                   = "ForexMarket";
    public static final char    PreviouslyQuoted                   = 'D';
    public static final String  string_PreviouslyQuoted            = "D";
    public static final String  tagged_PreviouslyQuoted            = TagIDAsString + EQUALS + string_PreviouslyQuoted + SOH;
    public static final char[]  taggedchars_PreviouslyQuoted       = {'4','0', EQUALSchar, 'D', SOHchar};
    public static final String  text_PreviouslyQuoted              = "PreviouslyQuoted";
    public static final char    PreviouslyIndicated                = 'E';
    public static final String  string_PreviouslyIndicated         = "E";
    public static final String  tagged_PreviouslyIndicated         = TagIDAsString + EQUALS + string_PreviouslyIndicated + SOH;
    public static final char[]  taggedchars_PreviouslyIndicated    = {'4','0', EQUALSchar, 'E', SOHchar};
    public static final String  text_PreviouslyIndicated           = "PreviouslyIndicated";
    public static final char    ForexLimit                         = 'F';
    public static final String  string_ForexLimit                  = "F";
    public static final String  tagged_ForexLimit                  = TagIDAsString + EQUALS + string_ForexLimit + SOH;
    public static final char[]  taggedchars_ForexLimit             = {'4','0', EQUALSchar, 'F', SOHchar};
    public static final String  text_ForexLimit                    = "ForexLimit";
    public static final char    ForexSwap                          = 'G';
    public static final String  string_ForexSwap                   = "G";
    public static final String  tagged_ForexSwap                   = TagIDAsString + EQUALS + string_ForexSwap + SOH;
    public static final char[]  taggedchars_ForexSwap              = {'4','0', EQUALSchar, 'G', SOHchar};
    public static final String  text_ForexSwap                     = "ForexSwap";
    public static final char    ForexPreviouslyQuoted              = 'H';
    public static final String  string_ForexPreviouslyQuoted       = "H";
    public static final String  tagged_ForexPreviouslyQuoted       = TagIDAsString + EQUALS + string_ForexPreviouslyQuoted + SOH;
    public static final char[]  taggedchars_ForexPreviouslyQuoted  = {'4','0', EQUALSchar, 'H', SOHchar};
    public static final String  text_ForexPreviouslyQuoted         = "ForexPreviouslyQuoted";
    public static final char    Funari                             = 'I';
    public static final String  string_Funari                      = "I";
    public static final String  tagged_Funari                      = TagIDAsString + EQUALS + string_Funari + SOH;
    public static final char[]  taggedchars_Funari                 = {'4','0', EQUALSchar, 'I', SOHchar};
    public static final String  text_Funari                        = "Funari";
    public static final char    MarketIfTouched                    = 'J';
    public static final String  string_MarketIfTouched             = "J";
    public static final String  tagged_MarketIfTouched             = TagIDAsString + EQUALS + string_MarketIfTouched + SOH;
    public static final char[]  taggedchars_MarketIfTouched        = {'4','0', EQUALSchar, 'J', SOHchar};
    public static final String  text_MarketIfTouched               = "MarketIfTouched";
    public static final char    Pegged                             = 'P';
    public static final String  string_Pegged                      = "P";
    public static final String  tagged_Pegged                      = TagIDAsString + EQUALS + string_Pegged + SOH;
    public static final char[]  taggedchars_Pegged                 = {'4','0', EQUALSchar, 'P', SOHchar};
    public static final String  text_Pegged                        = "Pegged";

    private static FixOrdTypeField flyweightMarket;
    public static final FixOrdTypeField flyweightMarket()
    {
        if (flyweightMarket == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightMarket == null)
                {
                    flyweightMarket  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Market;}
                     public String  getValueDescription()             {return text_Market;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Market).append("|").append(text_Market).append("]").toString();}
                     public boolean isMarket()                        {return true;}
                     public char    charValue()                       {return Market;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Market);}
                    };
                }
            }
        }

        return flyweightMarket;
    }

    private static FixOrdTypeField flyweightLimit;
    public static final FixOrdTypeField flyweightLimit()
    {
        if (flyweightLimit == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightLimit == null)
                {
                    flyweightLimit  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Limit;}
                     public String  getValueDescription()             {return text_Limit;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Limit).append("|").append(text_Limit).append("]").toString();}
                     public boolean isLimit()                         {return true;}
                     public char    charValue()                       {return Limit;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Limit);}
                    };
                }
            }
        }

        return flyweightLimit;
    }

    private static FixOrdTypeField flyweightStop;
    public static final FixOrdTypeField flyweightStop()
    {
        if (flyweightStop == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightStop == null)
                {
                    flyweightStop  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Stop;}
                     public String  getValueDescription()             {return text_Stop;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Stop).append("|").append(text_Stop).append("]").toString();}
                     public boolean isStop()                          {return true;}
                     public char    charValue()                       {return Stop;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Stop);}
                    };
                }
            }
        }

        return flyweightStop;
    }

    private static FixOrdTypeField flyweightStopLimit;
    public static final FixOrdTypeField flyweightStopLimit()
    {
        if (flyweightStopLimit == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightStopLimit == null)
                {
                    flyweightStopLimit  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_StopLimit;}
                     public String  getValueDescription()             {return text_StopLimit;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_StopLimit).append("|").append(text_StopLimit).append("]").toString();}
                     public boolean isStopLimit()                     {return true;}
                     public char    charValue()                       {return StopLimit;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_StopLimit);}
                    };
                }
            }
        }

        return flyweightStopLimit;
    }

    private static FixOrdTypeField flyweightMarketOnClose;
    public static final FixOrdTypeField flyweightMarketOnClose()
    {
        if (flyweightMarketOnClose == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightMarketOnClose == null)
                {
                    flyweightMarketOnClose  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_MarketOnClose;}
                     public String  getValueDescription()             {return text_MarketOnClose;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_MarketOnClose).append("|").append(text_MarketOnClose).append("]").toString();}
                     public boolean isMarketOnClose()                 {return true;}
                     public char    charValue()                       {return MarketOnClose;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_MarketOnClose);}
                    };
                }
            }
        }

        return flyweightMarketOnClose;
    }

    private static FixOrdTypeField flyweightWithOrWithout;
    public static final FixOrdTypeField flyweightWithOrWithout()
    {
        if (flyweightWithOrWithout == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightWithOrWithout == null)
                {
                    flyweightWithOrWithout  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_WithOrWithout;}
                     public String  getValueDescription()             {return text_WithOrWithout;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_WithOrWithout).append("|").append(text_WithOrWithout).append("]").toString();}
                     public boolean isWithOrWithout()                 {return true;}
                     public char    charValue()                       {return WithOrWithout;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_WithOrWithout);}
                    };
                }
            }
        }

        return flyweightWithOrWithout;
    }

    private static FixOrdTypeField flyweightLimitOrBetter;
    public static final FixOrdTypeField flyweightLimitOrBetter()
    {
        if (flyweightLimitOrBetter == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightLimitOrBetter == null)
                {
                    flyweightLimitOrBetter  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_LimitOrBetter;}
                     public String  getValueDescription()             {return text_LimitOrBetter;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_LimitOrBetter).append("|").append(text_LimitOrBetter).append("]").toString();}
                     public boolean isLimitOrBetter()                 {return true;}
                     public char    charValue()                       {return LimitOrBetter;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_LimitOrBetter);}
                    };
                }
            }
        }

        return flyweightLimitOrBetter;
    }

    private static FixOrdTypeField flyweightLimitWithOrWithout;
    public static final FixOrdTypeField flyweightLimitWithOrWithout()
    {
        if (flyweightLimitWithOrWithout == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightLimitWithOrWithout == null)
                {
                    flyweightLimitWithOrWithout  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_LimitWithOrWithout;}
                     public String  getValueDescription()             {return text_LimitWithOrWithout;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_LimitWithOrWithout).append("|").append(text_LimitWithOrWithout).append("]").toString();}
                     public boolean isLimitWithOrWithout()            {return true;}
                     public char    charValue()                       {return LimitWithOrWithout;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_LimitWithOrWithout);}
                    };
                }
            }
        }

        return flyweightLimitWithOrWithout;
    }

    private static FixOrdTypeField flyweightOnBasis;
    public static final FixOrdTypeField flyweightOnBasis()
    {
        if (flyweightOnBasis == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightOnBasis == null)
                {
                    flyweightOnBasis  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_OnBasis;}
                     public String  getValueDescription()             {return text_OnBasis;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OnBasis).append("|").append(text_OnBasis).append("]").toString();}
                     public boolean isOnBasis()                       {return true;}
                     public char    charValue()                       {return OnBasis;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OnBasis);}
                    };
                }
            }
        }

        return flyweightOnBasis;
    }

    private static FixOrdTypeField flyweightOnClose;
    public static final FixOrdTypeField flyweightOnClose()
    {
        if (flyweightOnClose == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightOnClose == null)
                {
                    flyweightOnClose  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_OnClose;}
                     public String  getValueDescription()             {return text_OnClose;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OnClose).append("|").append(text_OnClose).append("]").toString();}
                     public boolean isOnClose()                       {return true;}
                     public char    charValue()                       {return OnClose;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OnClose);}
                    };
                }
            }
        }

        return flyweightOnClose;
    }

    private static FixOrdTypeField flyweightLimitOnClose;
    public static final FixOrdTypeField flyweightLimitOnClose()
    {
        if (flyweightLimitOnClose == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightLimitOnClose == null)
                {
                    flyweightLimitOnClose  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_LimitOnClose;}
                     public String  getValueDescription()             {return text_LimitOnClose;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_LimitOnClose).append("|").append(text_LimitOnClose).append("]").toString();}
                     public boolean isLimitOnClose()                  {return true;}
                     public char    charValue()                       {return LimitOnClose;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_LimitOnClose);}
                    };
                }
            }
        }

        return flyweightLimitOnClose;
    }

    private static FixOrdTypeField flyweightForexMarket;
    public static final FixOrdTypeField flyweightForexMarket()
    {
        if (flyweightForexMarket == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightForexMarket == null)
                {
                    flyweightForexMarket  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ForexMarket;}
                     public String  getValueDescription()             {return text_ForexMarket;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ForexMarket).append("|").append(text_ForexMarket).append("]").toString();}
                     public boolean isForexMarket()                   {return true;}
                     public char    charValue()                       {return ForexMarket;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ForexMarket);}
                    };
                }
            }
        }

        return flyweightForexMarket;
    }

    private static FixOrdTypeField flyweightPreviouslyQuoted;
    public static final FixOrdTypeField flyweightPreviouslyQuoted()
    {
        if (flyweightPreviouslyQuoted == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightPreviouslyQuoted == null)
                {
                    flyweightPreviouslyQuoted  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PreviouslyQuoted;}
                     public String  getValueDescription()             {return text_PreviouslyQuoted;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PreviouslyQuoted).append("|").append(text_PreviouslyQuoted).append("]").toString();}
                     public boolean isPreviouslyQuoted()              {return true;}
                     public char    charValue()                       {return PreviouslyQuoted;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PreviouslyQuoted);}
                    };
                }
            }
        }

        return flyweightPreviouslyQuoted;
    }

    private static FixOrdTypeField flyweightPreviouslyIndicated;
    public static final FixOrdTypeField flyweightPreviouslyIndicated()
    {
        if (flyweightPreviouslyIndicated == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightPreviouslyIndicated == null)
                {
                    flyweightPreviouslyIndicated  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PreviouslyIndicated;}
                     public String  getValueDescription()             {return text_PreviouslyIndicated;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PreviouslyIndicated).append("|").append(text_PreviouslyIndicated).append("]").toString();}
                     public boolean isPreviouslyIndicated()           {return true;}
                     public char    charValue()                       {return PreviouslyIndicated;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PreviouslyIndicated);}
                    };
                }
            }
        }

        return flyweightPreviouslyIndicated;
    }

    private static FixOrdTypeField flyweightForexLimit;
    public static final FixOrdTypeField flyweightForexLimit()
    {
        if (flyweightForexLimit == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightForexLimit == null)
                {
                    flyweightForexLimit  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ForexLimit;}
                     public String  getValueDescription()             {return text_ForexLimit;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ForexLimit).append("|").append(text_ForexLimit).append("]").toString();}
                     public boolean isForexLimit()                    {return true;}
                     public char    charValue()                       {return ForexLimit;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ForexLimit);}
                    };
                }
            }
        }

        return flyweightForexLimit;
    }

    private static FixOrdTypeField flyweightForexSwap;
    public static final FixOrdTypeField flyweightForexSwap()
    {
        if (flyweightForexSwap == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightForexSwap == null)
                {
                    flyweightForexSwap  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ForexSwap;}
                     public String  getValueDescription()             {return text_ForexSwap;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ForexSwap).append("|").append(text_ForexSwap).append("]").toString();}
                     public boolean isForexSwap()                     {return true;}
                     public char    charValue()                       {return ForexSwap;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ForexSwap);}
                    };
                }
            }
        }

        return flyweightForexSwap;
    }

    private static FixOrdTypeField flyweightForexPreviouslyQuoted;
    public static final FixOrdTypeField flyweightForexPreviouslyQuoted()
    {
        if (flyweightForexPreviouslyQuoted == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightForexPreviouslyQuoted == null)
                {
                    flyweightForexPreviouslyQuoted  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ForexPreviouslyQuoted;}
                     public String  getValueDescription()             {return text_ForexPreviouslyQuoted;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ForexPreviouslyQuoted).append("|").append(text_ForexPreviouslyQuoted).append("]").toString();}
                     public boolean isForexPreviouslyQuoted()         {return true;}
                     public char    charValue()                       {return ForexPreviouslyQuoted;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ForexPreviouslyQuoted);}
                    };
                }
            }
        }

        return flyweightForexPreviouslyQuoted;
    }

    private static FixOrdTypeField flyweightFunari;
    public static final FixOrdTypeField flyweightFunari()
    {
        if (flyweightFunari == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightFunari == null)
                {
                    flyweightFunari  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Funari;}
                     public String  getValueDescription()             {return text_Funari;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Funari).append("|").append(text_Funari).append("]").toString();}
                     public boolean isFunari()                        {return true;}
                     public char    charValue()                       {return Funari;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Funari);}
                    };
                }
            }
        }

        return flyweightFunari;
    }

    private static FixOrdTypeField flyweightMarketIfTouched;
    public static final FixOrdTypeField flyweightMarketIfTouched()
    {
        if (flyweightMarketIfTouched == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightMarketIfTouched == null)
                {
                    flyweightMarketIfTouched  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_MarketIfTouched;}
                     public String  getValueDescription()             {return text_MarketIfTouched;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_MarketIfTouched).append("|").append(text_MarketIfTouched).append("]").toString();}
                     public boolean isMarketIfTouched()               {return true;}
                     public char    charValue()                       {return MarketIfTouched;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_MarketIfTouched);}
                    };
                }
            }
        }

        return flyweightMarketIfTouched;
    }

    private static FixOrdTypeField flyweightPegged;
    public static final FixOrdTypeField flyweightPegged()
    {
        if (flyweightPegged == null)
        {
            synchronized(FixOrdTypeField.class)
            {
                if (flyweightPegged == null)
                {
                    flyweightPegged  = new FixOrdTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Pegged;}
                     public String  getValueDescription()             {return text_Pegged;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Pegged).append("|").append(text_Pegged).append("]").toString();}
                     public boolean isPegged()                        {return true;}
                     public char    charValue()                       {return Pegged;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Pegged);}
                    };
                }
            }
        }

        return flyweightPegged;
    }


    public boolean isMarket()                  {return false;}
    public boolean isLimit()                   {return false;}
    public boolean isStop()                    {return false;}
    public boolean isStopLimit()               {return false;}
    public boolean isMarketOnClose()           {return false;}
    public boolean isWithOrWithout()           {return false;}
    public boolean isLimitOrBetter()           {return false;}
    public boolean isLimitWithOrWithout()      {return false;}
    public boolean isOnBasis()                 {return false;}
    public boolean isOnClose()                 {return false;}
    public boolean isLimitOnClose()            {return false;}
    public boolean isForexMarket()             {return false;}
    public boolean isPreviouslyQuoted()        {return false;}
    public boolean isPreviouslyIndicated()     {return false;}
    public boolean isForexLimit()              {return false;}
    public boolean isForexSwap()               {return false;}
    public boolean isForexPreviouslyQuoted()   {return false;}
    public boolean isFunari()                  {return false;}
    public boolean isMarketIfTouched()         {return false;}
    public boolean isPegged()                  {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixOrdTypeField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixOrdTypeField create(final char param)
    {
        switch (param)
        {                                                                                           
            case Market:                return flyweightMarket();
            case Limit:                 return flyweightLimit();
            case Stop:                  return flyweightStop();
            case StopLimit:             return flyweightStopLimit();
            case MarketOnClose:         return flyweightMarketOnClose();
            case WithOrWithout:         return flyweightWithOrWithout();
            case LimitOrBetter:         return flyweightLimitOrBetter();
            case LimitWithOrWithout:    return flyweightLimitWithOrWithout();
            case OnBasis:               return flyweightOnBasis();
            case OnClose:               return flyweightOnClose();
            case LimitOnClose:          return flyweightLimitOnClose();
            case ForexMarket:           return flyweightForexMarket();
            case PreviouslyQuoted:      return flyweightPreviouslyQuoted();
            case PreviouslyIndicated:   return flyweightPreviouslyIndicated();
            case ForexLimit:            return flyweightForexLimit();
            case ForexSwap:             return flyweightForexSwap();
            case ForexPreviouslyQuoted: return flyweightForexPreviouslyQuoted();
            case Funari:                return flyweightFunari();
            case MarketIfTouched:       return flyweightMarketIfTouched();
            case Pegged:                return flyweightPegged();
        }
                                                                                                    
        return null;
    }                                                                                               
}
