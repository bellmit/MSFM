package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixQuoteEntryRejectReasonField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [368] (known as QuoteEntryRejectReason).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixQuoteEntryRejectReasonField implements FixFieldIF, HasIntValueIF
{   
    public static final int    TagID         =  368;
    public static final String TagIDAsString = "368";
    public static final char[] TagIDAsChars  = {'3','6','8'};
    public static final String TagName       = "QuoteEntryRejectReason";
    public static final String TagFixType    = "INT";
    public static final char[]  taggedchars_value0 = {'3','6','8', EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {'3','6','8', EQUALSchar, ONEchar,  SOHchar};

    public static final int     UnknownSymbol                             = 1;
    public static final String  string_UnknownSymbol                      = "1";
    public static final String  tagged_UnknownSymbol                      = TagIDAsString + EQUALS + string_UnknownSymbol + SOH;
    public static final char[]  taggedchars_UnknownSymbol                 = {'3','6','8', EQUALSchar, '1', SOHchar};
    public static final String  text_UnknownSymbol                        = "UnknownSymbol";
    public static final int     Exchange                                  = 2;
    public static final String  string_Exchange                           = "2";
    public static final String  tagged_Exchange                           = TagIDAsString + EQUALS + string_Exchange + SOH;
    public static final char[]  taggedchars_Exchange                      = {'3','6','8', EQUALSchar, '2', SOHchar};
    public static final String  text_Exchange                             = "Exchange";
    public static final int     QuoteExceedsLimit                         = 3;
    public static final String  string_QuoteExceedsLimit                  = "3";
    public static final String  tagged_QuoteExceedsLimit                  = TagIDAsString + EQUALS + string_QuoteExceedsLimit + SOH;
    public static final char[]  taggedchars_QuoteExceedsLimit             = {'3','6','8', EQUALSchar, '3', SOHchar};
    public static final String  text_QuoteExceedsLimit                    = "QuoteExceedsLimit";
    public static final int     TooLateToEnter                            = 4;
    public static final String  string_TooLateToEnter                     = "4";
    public static final String  tagged_TooLateToEnter                     = TagIDAsString + EQUALS + string_TooLateToEnter + SOH;
    public static final char[]  taggedchars_TooLateToEnter                = {'3','6','8', EQUALSchar, '4', SOHchar};
    public static final String  text_TooLateToEnter                       = "TooLateToEnter";
    public static final int     UnknownQuote                              = 5;
    public static final String  string_UnknownQuote                       = "5";
    public static final String  tagged_UnknownQuote                       = TagIDAsString + EQUALS + string_UnknownQuote + SOH;
    public static final char[]  taggedchars_UnknownQuote                  = {'3','6','8', EQUALSchar, '5', SOHchar};
    public static final String  text_UnknownQuote                         = "UnknownQuote";
    public static final int     DuplicateQuote                            = 6;
    public static final String  string_DuplicateQuote                     = "6";
    public static final String  tagged_DuplicateQuote                     = TagIDAsString + EQUALS + string_DuplicateQuote + SOH;
    public static final char[]  taggedchars_DuplicateQuote                = {'3','6','8', EQUALSchar, '6', SOHchar};
    public static final String  text_DuplicateQuote                       = "DuplicateQuote";
    public static final int     InvalidBidaskSpread                       = 7;
    public static final String  string_InvalidBidaskSpread                = "7";
    public static final String  tagged_InvalidBidaskSpread                = TagIDAsString + EQUALS + string_InvalidBidaskSpread + SOH;
    public static final char[]  taggedchars_InvalidBidaskSpread           = {'3','6','8', EQUALSchar, '7', SOHchar};
    public static final String  text_InvalidBidaskSpread                  = "InvalidBidaskSpread";
    public static final int     InvalidPrice                              = 8;
    public static final String  string_InvalidPrice                       = "8";
    public static final String  tagged_InvalidPrice                       = TagIDAsString + EQUALS + string_InvalidPrice + SOH;
    public static final char[]  taggedchars_InvalidPrice                  = {'3','6','8', EQUALSchar, '8', SOHchar};
    public static final String  text_InvalidPrice                         = "InvalidPrice";
    public static final int     NotAuthorizedToQuoteSecurity              = 9;
    public static final String  string_NotAuthorizedToQuoteSecurity       = "9";
    public static final String  tagged_NotAuthorizedToQuoteSecurity       = TagIDAsString + EQUALS + string_NotAuthorizedToQuoteSecurity + SOH;
    public static final char[]  taggedchars_NotAuthorizedToQuoteSecurity  = {'3','6','8', EQUALSchar, '9', SOHchar};
    public static final String  text_NotAuthorizedToQuoteSecurity         = "NotAuthorizedToQuoteSecurity";
    public static final int     InsufficientQuantity                      = 11;
    public static final String  string_InsufficientQuantity               = "11";
    public static final String  tagged_InsufficientQuantity               = TagIDAsString + EQUALS + string_InsufficientQuantity + SOH;
    public static final char[]  taggedchars_InsufficientQuantity          = {'3','6','8', EQUALSchar, '1','1', SOHchar};
    public static final String  text_InsufficientQuantity                 = "InsufficientQuantity";
    public static final int     IncompleteQuote                           = 12;
    public static final String  string_IncompleteQuote                    = "12";
    public static final String  tagged_IncompleteQuote                    = TagIDAsString + EQUALS + string_IncompleteQuote + SOH;
    public static final char[]  taggedchars_IncompleteQuote               = {'3','6','8', EQUALSchar, '1','2', SOHchar};
    public static final String  text_IncompleteQuote                      = "IncompleteQuote";
    public static final int     TwoSidedQuoteRequired                     = 13;
    public static final String  string_TwoSidedQuoteRequired              = "13";
    public static final String  tagged_TwoSidedQuoteRequired              = TagIDAsString + EQUALS + string_TwoSidedQuoteRequired + SOH;
    public static final char[]  taggedchars_TwoSidedQuoteRequired         = {'3','6','8', EQUALSchar, '1','3', SOHchar};
    public static final String  text_TwoSidedQuoteRequired                = "TwoSidedQuoteRequired";
    public static final int     InvalidSide                               = 14;
    public static final String  string_InvalidSide                        = "14";
    public static final String  tagged_InvalidSide                        = TagIDAsString + EQUALS + string_InvalidSide + SOH;
    public static final char[]  taggedchars_InvalidSide                   = {'3','6','8', EQUALSchar, '1','4', SOHchar};
    public static final String  text_InvalidSide                          = "InvalidSide";
    public static final int     InvalidTradingSession                     = 15;
    public static final String  string_InvalidTradingSession              = "15";
    public static final String  tagged_InvalidTradingSession              = TagIDAsString + EQUALS + string_InvalidTradingSession + SOH;
    public static final char[]  taggedchars_InvalidTradingSession         = {'3','6','8', EQUALSchar, '1','5', SOHchar};
    public static final String  text_InvalidTradingSession                = "InvalidTradingSession";
    public static final int     ExchangeOrBrokerOption                    = 16;
    public static final String  string_ExchangeOrBrokerOption             = "16";
    public static final String  tagged_ExchangeOrBrokerOption             = TagIDAsString + EQUALS + string_ExchangeOrBrokerOption + SOH;
    public static final char[]  taggedchars_ExchangeOrBrokerOption        = {'3','6','8', EQUALSchar, '1','6', SOHchar};
    public static final String  text_ExchangeOrBrokerOption               = "ExchangeOrBrokerOption";
    public static final int     UnspecifiedReason                         = 99;
    public static final String  string_UnspecifiedReason                  = "99";
    public static final String  tagged_UnspecifiedReason                  = TagIDAsString + EQUALS + string_UnspecifiedReason + SOH;
    public static final char[]  taggedchars_UnspecifiedReason             = {'3','6','8', EQUALSchar, '9','9', SOHchar};
    public static final String  text_UnspecifiedReason                    = "UnspecifiedReason";

    private static FixQuoteEntryRejectReasonField flyweightUnknownSymbol;
    public static final FixQuoteEntryRejectReasonField flyweightUnknownSymbol()
    {
        if (flyweightUnknownSymbol == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightUnknownSymbol == null)
                {
                    flyweightUnknownSymbol  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_UnknownSymbol;}
                     public String  getValueDescription()              {return text_UnknownSymbol;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnknownSymbol).append("|").append(text_UnknownSymbol).append("]").toString();}
                     public boolean isUnknownSymbol()                  {return true;}
                     public int     intValue()                         {return UnknownSymbol;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnknownSymbol);}
                    };
                }
            }
        }

        return flyweightUnknownSymbol;
    }

    private static FixQuoteEntryRejectReasonField flyweightExchange;
    public static final FixQuoteEntryRejectReasonField flyweightExchange()
    {
        if (flyweightExchange == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightExchange == null)
                {
                    flyweightExchange  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_Exchange;}
                     public String  getValueDescription()              {return text_Exchange;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Exchange).append("|").append(text_Exchange).append("]").toString();}
                     public boolean isExchange()                       {return true;}
                     public int     intValue()                         {return Exchange;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Exchange);}
                    };
                }
            }
        }

        return flyweightExchange;
    }

    private static FixQuoteEntryRejectReasonField flyweightQuoteExceedsLimit;
    public static final FixQuoteEntryRejectReasonField flyweightQuoteExceedsLimit()
    {
        if (flyweightQuoteExceedsLimit == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightQuoteExceedsLimit == null)
                {
                    flyweightQuoteExceedsLimit  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_QuoteExceedsLimit;}
                     public String  getValueDescription()              {return text_QuoteExceedsLimit;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_QuoteExceedsLimit).append("|").append(text_QuoteExceedsLimit).append("]").toString();}
                     public boolean isQuoteExceedsLimit()              {return true;}
                     public int     intValue()                         {return QuoteExceedsLimit;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_QuoteExceedsLimit);}
                    };
                }
            }
        }

        return flyweightQuoteExceedsLimit;
    }

    private static FixQuoteEntryRejectReasonField flyweightTooLateToEnter;
    public static final FixQuoteEntryRejectReasonField flyweightTooLateToEnter()
    {
        if (flyweightTooLateToEnter == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightTooLateToEnter == null)
                {
                    flyweightTooLateToEnter  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_TooLateToEnter;}
                     public String  getValueDescription()              {return text_TooLateToEnter;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_TooLateToEnter).append("|").append(text_TooLateToEnter).append("]").toString();}
                     public boolean isTooLateToEnter()                 {return true;}
                     public int     intValue()                         {return TooLateToEnter;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_TooLateToEnter);}
                    };
                }
            }
        }

        return flyweightTooLateToEnter;
    }

    private static FixQuoteEntryRejectReasonField flyweightUnknownQuote;
    public static final FixQuoteEntryRejectReasonField flyweightUnknownQuote()
    {
        if (flyweightUnknownQuote == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightUnknownQuote == null)
                {
                    flyweightUnknownQuote  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_UnknownQuote;}
                     public String  getValueDescription()              {return text_UnknownQuote;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnknownQuote).append("|").append(text_UnknownQuote).append("]").toString();}
                     public boolean isUnknownQuote()                   {return true;}
                     public int     intValue()                         {return UnknownQuote;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnknownQuote);}
                    };
                }
            }
        }

        return flyweightUnknownQuote;
    }

    private static FixQuoteEntryRejectReasonField flyweightDuplicateQuote;
    public static final FixQuoteEntryRejectReasonField flyweightDuplicateQuote()
    {
        if (flyweightDuplicateQuote == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightDuplicateQuote == null)
                {
                    flyweightDuplicateQuote  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_DuplicateQuote;}
                     public String  getValueDescription()              {return text_DuplicateQuote;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_DuplicateQuote).append("|").append(text_DuplicateQuote).append("]").toString();}
                     public boolean isDuplicateQuote()                 {return true;}
                     public int     intValue()                         {return DuplicateQuote;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_DuplicateQuote);}
                    };
                }
            }
        }

        return flyweightDuplicateQuote;
    }

    private static FixQuoteEntryRejectReasonField flyweightInvalidBidaskSpread;
    public static final FixQuoteEntryRejectReasonField flyweightInvalidBidaskSpread()
    {
        if (flyweightInvalidBidaskSpread == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightInvalidBidaskSpread == null)
                {
                    flyweightInvalidBidaskSpread  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_InvalidBidaskSpread;}
                     public String  getValueDescription()              {return text_InvalidBidaskSpread;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_InvalidBidaskSpread).append("|").append(text_InvalidBidaskSpread).append("]").toString();}
                     public boolean isInvalidBidaskSpread()            {return true;}
                     public int     intValue()                         {return InvalidBidaskSpread;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_InvalidBidaskSpread);}
                    };
                }
            }
        }

        return flyweightInvalidBidaskSpread;
    }

    private static FixQuoteEntryRejectReasonField flyweightInvalidPrice;
    public static final FixQuoteEntryRejectReasonField flyweightInvalidPrice()
    {
        if (flyweightInvalidPrice == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightInvalidPrice == null)
                {
                    flyweightInvalidPrice  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_InvalidPrice;}
                     public String  getValueDescription()              {return text_InvalidPrice;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_InvalidPrice).append("|").append(text_InvalidPrice).append("]").toString();}
                     public boolean isInvalidPrice()                   {return true;}
                     public int     intValue()                         {return InvalidPrice;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_InvalidPrice);}
                    };
                }
            }
        }

        return flyweightInvalidPrice;
    }

    private static FixQuoteEntryRejectReasonField flyweightNotAuthorizedToQuoteSecurity;
    public static final FixQuoteEntryRejectReasonField flyweightNotAuthorizedToQuoteSecurity()
    {
        if (flyweightNotAuthorizedToQuoteSecurity == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightNotAuthorizedToQuoteSecurity == null)
                {
                    flyweightNotAuthorizedToQuoteSecurity  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_NotAuthorizedToQuoteSecurity;}
                     public String  getValueDescription()              {return text_NotAuthorizedToQuoteSecurity;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NotAuthorizedToQuoteSecurity).append("|").append(text_NotAuthorizedToQuoteSecurity).append("]").toString();}
                     public boolean isNotAuthorizedToQuoteSecurity()   {return true;}
                     public int     intValue()                         {return NotAuthorizedToQuoteSecurity;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NotAuthorizedToQuoteSecurity);}
                    };
                }
            }
        }

        return flyweightNotAuthorizedToQuoteSecurity;
    }

    private static FixQuoteEntryRejectReasonField flyweightInsufficientQuantity;
    public static final FixQuoteEntryRejectReasonField flyweightInsufficientQuantity()
    {
        if (flyweightInsufficientQuantity == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightInsufficientQuantity == null)
                {
                    flyweightInsufficientQuantity  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_InsufficientQuantity;}
                     public String  getValueDescription()              {return text_InsufficientQuantity;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_InsufficientQuantity).append("|").append(text_InsufficientQuantity).append("]").toString();}
                     public boolean isInsufficientQuantity()           {return true;}
                     public int     intValue()                         {return InsufficientQuantity;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_InsufficientQuantity);}
                    };
                }
            }
        }

        return flyweightInsufficientQuantity;
    }

    private static FixQuoteEntryRejectReasonField flyweightIncompleteQuote;
    public static final FixQuoteEntryRejectReasonField flyweightIncompleteQuote()
    {
        if (flyweightIncompleteQuote == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightIncompleteQuote == null)
                {
                    flyweightIncompleteQuote  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_IncompleteQuote;}
                     public String  getValueDescription()              {return text_IncompleteQuote;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_IncompleteQuote).append("|").append(text_IncompleteQuote).append("]").toString();}
                     public boolean isIncompleteQuote()                {return true;}
                     public int     intValue()                         {return IncompleteQuote;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_IncompleteQuote);}
                    };
                }
            }
        }

        return flyweightIncompleteQuote;
    }

    private static FixQuoteEntryRejectReasonField flyweightTwoSidedQuoteRequired;
    public static final FixQuoteEntryRejectReasonField flyweightTwoSidedQuoteRequired()
    {
        if (flyweightTwoSidedQuoteRequired == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightTwoSidedQuoteRequired == null)
                {
                    flyweightTwoSidedQuoteRequired  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_TwoSidedQuoteRequired;}
                     public String  getValueDescription()              {return text_TwoSidedQuoteRequired;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_TwoSidedQuoteRequired).append("|").append(text_TwoSidedQuoteRequired).append("]").toString();}
                     public boolean isTwoSidedQuoteRequired()          {return true;}
                     public int     intValue()                         {return TwoSidedQuoteRequired;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_TwoSidedQuoteRequired);}
                    };
                }
            }
        }

        return flyweightTwoSidedQuoteRequired;
    }

    private static FixQuoteEntryRejectReasonField flyweightInvalidSide;
    public static final FixQuoteEntryRejectReasonField flyweightInvalidSide()
    {
        if (flyweightInvalidSide == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightInvalidSide == null)
                {
                    flyweightInvalidSide  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_InvalidSide;}
                     public String  getValueDescription()              {return text_InvalidSide;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_InvalidSide).append("|").append(text_InvalidSide).append("]").toString();}
                     public boolean isInvalidSide()                    {return true;}
                     public int     intValue()                         {return InvalidSide;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_InvalidSide);}
                    };
                }
            }
        }

        return flyweightInvalidSide;
    }

    private static FixQuoteEntryRejectReasonField flyweightInvalidTradingSession;
    public static final FixQuoteEntryRejectReasonField flyweightInvalidTradingSession()
    {
        if (flyweightInvalidTradingSession == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightInvalidTradingSession == null)
                {
                    flyweightInvalidTradingSession  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_InvalidTradingSession;}
                     public String  getValueDescription()              {return text_InvalidTradingSession;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_InvalidTradingSession).append("|").append(text_InvalidTradingSession).append("]").toString();}
                     public boolean isInvalidTradingSession()          {return true;}
                     public int     intValue()                         {return InvalidTradingSession;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_InvalidTradingSession);}
                    };
                }
            }
        }

        return flyweightInvalidTradingSession;
    }

    private static FixQuoteEntryRejectReasonField flyweightExchangeOrBrokerOption;
    public static final FixQuoteEntryRejectReasonField flyweightExchangeOrBrokerOption()
    {
        if (flyweightExchangeOrBrokerOption == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightExchangeOrBrokerOption == null)
                {
                    flyweightExchangeOrBrokerOption  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_ExchangeOrBrokerOption;}
                     public String  getValueDescription()              {return text_ExchangeOrBrokerOption;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ExchangeOrBrokerOption).append("|").append(text_ExchangeOrBrokerOption).append("]").toString();}
                     public boolean isExchangeOrBrokerOption()         {return true;}
                     public int     intValue()                         {return ExchangeOrBrokerOption;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ExchangeOrBrokerOption);}
                    };
                }
            }
        }

        return flyweightExchangeOrBrokerOption;
    }

    private static FixQuoteEntryRejectReasonField flyweightUnspecifiedReason;
    public static final FixQuoteEntryRejectReasonField flyweightUnspecifiedReason()
    {
        if (flyweightUnspecifiedReason == null)
        {
            synchronized(FixQuoteEntryRejectReasonField.class)
            {
                if (flyweightUnspecifiedReason == null)
                {
                    flyweightUnspecifiedReason  = new FixQuoteEntryRejectReasonField()
                    {public boolean hasValue()                         {return true;}
                     public String  getValue()                         {return string_UnspecifiedReason;}
                     public String  getValueDescription()              {return text_UnspecifiedReason;}
                     public String  toString()                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnspecifiedReason).append("|").append(text_UnspecifiedReason).append("]").toString();}
                     public boolean isUnspecifiedReason()              {return true;}
                     public int     intValue()                         {return UnspecifiedReason;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnspecifiedReason);}
                    };
                }
            }
        }

        return flyweightUnspecifiedReason;
    }


    public boolean isUnknownSymbol()                  {return false;}
    public boolean isExchange()                       {return false;}
    public boolean isQuoteExceedsLimit()              {return false;}
    public boolean isTooLateToEnter()                 {return false;}
    public boolean isUnknownQuote()                   {return false;}
    public boolean isDuplicateQuote()                 {return false;}
    public boolean isInvalidBidaskSpread()            {return false;}
    public boolean isInvalidPrice()                   {return false;}
    public boolean isNotAuthorizedToQuoteSecurity()   {return false;}
    public boolean isInsufficientQuantity()           {return false;}
    public boolean isIncompleteQuote()                {return false;}
    public boolean isTwoSidedQuoteRequired()          {return false;}
    public boolean isInvalidSide()                    {return false;}
    public boolean isInvalidTradingSession()          {return false;}
    public boolean isExchangeOrBrokerOption()         {return false;}
    public boolean isUnspecifiedReason()              {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixQuoteEntryRejectReasonField create(char[] array, int offset, int length)
    {
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static FixQuoteEntryRejectReasonField create(final int param)
    {
        switch (param)
        {                                                                                           
            case UnknownSymbol:                return flyweightUnknownSymbol();
            case Exchange:                     return flyweightExchange();
            case QuoteExceedsLimit:            return flyweightQuoteExceedsLimit();
            case TooLateToEnter:               return flyweightTooLateToEnter();
            case UnknownQuote:                 return flyweightUnknownQuote();
            case DuplicateQuote:               return flyweightDuplicateQuote();
            case InvalidBidaskSpread:          return flyweightInvalidBidaskSpread();
            case InvalidPrice:                 return flyweightInvalidPrice();
            case NotAuthorizedToQuoteSecurity: return flyweightNotAuthorizedToQuoteSecurity();
            case InsufficientQuantity:         return flyweightInsufficientQuantity();
            case IncompleteQuote:              return flyweightIncompleteQuote();
            case TwoSidedQuoteRequired:        return flyweightTwoSidedQuoteRequired();
            case InvalidSide:                  return flyweightInvalidSide();
            case InvalidTradingSession:        return flyweightInvalidTradingSession();
            case ExchangeOrBrokerOption:       return flyweightExchangeOrBrokerOption();
            case UnspecifiedReason:            return flyweightUnspecifiedReason();
        }
                                                                                                    
        return null;
    }                                                                                               
}
