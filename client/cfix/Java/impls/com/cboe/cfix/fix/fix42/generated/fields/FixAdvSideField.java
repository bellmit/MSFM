package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixAdvSideField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [4] (known as AdvSide).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixAdvSideField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  4;
    public static final String TagIDAsString = "4";
    public static final char[] TagIDAsChars  = {'4'};
    public static final String TagName       = "AdvSide";
    public static final String TagFixType    = "CHAR";

    public static final char    Buy                = 'B';
    public static final String  string_Buy         = "B";
    public static final String  tagged_Buy         = TagIDAsString + EQUALS + string_Buy + SOH;
    public static final char[]  taggedchars_Buy    = {'4', EQUALSchar, 'B', SOHchar};
    public static final String  text_Buy           = "Buy";
    public static final char    Sell               = 'S';
    public static final String  string_Sell        = "S";
    public static final String  tagged_Sell        = TagIDAsString + EQUALS + string_Sell + SOH;
    public static final char[]  taggedchars_Sell   = {'4', EQUALSchar, 'S', SOHchar};
    public static final String  text_Sell          = "Sell";
    public static final char    Cross              = 'X';
    public static final String  string_Cross       = "X";
    public static final String  tagged_Cross       = TagIDAsString + EQUALS + string_Cross + SOH;
    public static final char[]  taggedchars_Cross  = {'4', EQUALSchar, 'X', SOHchar};
    public static final String  text_Cross         = "Cross";
    public static final char    Trade              = 'T';
    public static final String  string_Trade       = "T";
    public static final String  tagged_Trade       = TagIDAsString + EQUALS + string_Trade + SOH;
    public static final char[]  taggedchars_Trade  = {'4', EQUALSchar, 'T', SOHchar};
    public static final String  text_Trade         = "Trade";

    private static FixAdvSideField flyweightBuy;
    public static final FixAdvSideField flyweightBuy()
    {
        if (flyweightBuy == null)
        {
            synchronized(FixAdvSideField.class)
            {
                if (flyweightBuy == null)
                {
                    flyweightBuy  = new FixAdvSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Buy;}
                     public String  getValueDescription()             {return text_Buy;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Buy).append("|").append(text_Buy).append("]").toString();}
                     public boolean isBuy()                           {return true;}
                     public char    charValue()                       {return Buy;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Buy);}
                    };
                }
            }
        }

        return flyweightBuy;
    }

    private static FixAdvSideField flyweightSell;
    public static final FixAdvSideField flyweightSell()
    {
        if (flyweightSell == null)
        {
            synchronized(FixAdvSideField.class)
            {
                if (flyweightSell == null)
                {
                    flyweightSell  = new FixAdvSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Sell;}
                     public String  getValueDescription()             {return text_Sell;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Sell).append("|").append(text_Sell).append("]").toString();}
                     public boolean isSell()                          {return true;}
                     public char    charValue()                       {return Sell;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Sell);}
                    };
                }
            }
        }

        return flyweightSell;
    }

    private static FixAdvSideField flyweightCross;
    public static final FixAdvSideField flyweightCross()
    {
        if (flyweightCross == null)
        {
            synchronized(FixAdvSideField.class)
            {
                if (flyweightCross == null)
                {
                    flyweightCross  = new FixAdvSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Cross;}
                     public String  getValueDescription()             {return text_Cross;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Cross).append("|").append(text_Cross).append("]").toString();}
                     public boolean isCross()                         {return true;}
                     public char    charValue()                       {return Cross;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Cross);}
                    };
                }
            }
        }

        return flyweightCross;
    }

    private static FixAdvSideField flyweightTrade;
    public static final FixAdvSideField flyweightTrade()
    {
        if (flyweightTrade == null)
        {
            synchronized(FixAdvSideField.class)
            {
                if (flyweightTrade == null)
                {
                    flyweightTrade  = new FixAdvSideField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Trade;}
                     public String  getValueDescription()             {return text_Trade;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Trade).append("|").append(text_Trade).append("]").toString();}
                     public boolean isTrade()                         {return true;}
                     public char    charValue()                       {return Trade;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Trade);}
                    };
                }
            }
        }

        return flyweightTrade;
    }


    public boolean isBuy()     {return false;}
    public boolean isSell()    {return false;}
    public boolean isCross()   {return false;}
    public boolean isTrade()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixAdvSideField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixAdvSideField create(final char param)
    {
        switch (param)
        {                                                                                           
            case Buy:   return flyweightBuy();
            case Sell:  return flyweightSell();
            case Cross: return flyweightCross();
            case Trade: return flyweightTrade();
        }
                                                                                                    
        return null;
    }                                                                                               
}
