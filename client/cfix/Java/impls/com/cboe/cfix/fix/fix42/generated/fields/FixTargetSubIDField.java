package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixTargetSubIDField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [57] (known as TargetSubID).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;

public abstract class FixTargetSubIDField implements FixFieldIF
{   
    public static final int    TagID         =  57;
    public static final String TagIDAsString = "57";
    public static final char[] TagIDAsChars  = {'5','7'};
    public static final String TagName       = "TargetSubID";
    public static final String TagFixType    = "STRING";

    public static final String  Production              = "PROD";
    public static final String  string_Production       = Production;
    public static final char[]  chars_Production        = {'P','R','O','D'};
    public static final String  tagged_Production       = TagIDAsString + EQUALS + string_Production + SOH;
    public static final char[]  taggedchars_Production  = {'5','7', EQUALSchar, 'P','R','O','D', SOHchar};
    public static final String  text_Production         = "Production";
    public static final String  Simulator               = "SIM";
    public static final String  string_Simulator        = Simulator;
    public static final char[]  chars_Simulator         = {'S','I','M'};
    public static final String  tagged_Simulator        = TagIDAsString + EQUALS + string_Simulator + SOH;
    public static final char[]  taggedchars_Simulator   = {'5','7', EQUALSchar, 'S','I','M', SOHchar};
    public static final String  text_Simulator          = "Simulator";
    public static final String  Test                    = "TEST";
    public static final String  string_Test             = Test;
    public static final char[]  chars_Test              = {'T','E','S','T'};
    public static final String  tagged_Test             = TagIDAsString + EQUALS + string_Test + SOH;
    public static final char[]  taggedchars_Test        = {'5','7', EQUALSchar, 'T','E','S','T', SOHchar};
    public static final String  text_Test               = "Test";

    private static FixTargetSubIDField flyweightProduction;
    public static final FixTargetSubIDField flyweightProduction()
    {
        if (flyweightProduction == null)
        {
            synchronized(FixTargetSubIDField.class)
            {
                if (flyweightProduction == null)
                {
                    flyweightProduction  = new FixTargetSubIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Production;}
                     public String  getValueDescription()             {return text_Production;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Production).append("|").append(text_Production).append("]").toString();}
                     public boolean isProduction()                    {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Production);}
                    };
                }
            }
        }

        return flyweightProduction;
    }

    private static FixTargetSubIDField flyweightSimulator;
    public static final FixTargetSubIDField flyweightSimulator()
    {
        if (flyweightSimulator == null)
        {
            synchronized(FixTargetSubIDField.class)
            {
                if (flyweightSimulator == null)
                {
                    flyweightSimulator  = new FixTargetSubIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Simulator;}
                     public String  getValueDescription()             {return text_Simulator;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Simulator).append("|").append(text_Simulator).append("]").toString();}
                     public boolean isSimulator()                     {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Simulator);}
                    };
                }
            }
        }

        return flyweightSimulator;
    }

    private static FixTargetSubIDField flyweightTest;
    public static final FixTargetSubIDField flyweightTest()
    {
        if (flyweightTest == null)
        {
            synchronized(FixTargetSubIDField.class)
            {
                if (flyweightTest == null)
                {
                    flyweightTest  = new FixTargetSubIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Test;}
                     public String  getValueDescription()             {return text_Test;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Test).append("|").append(text_Test).append("]").toString();}
                     public boolean isTest()                          {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Test);}
                    };
                }
            }
        }

        return flyweightTest;
    }


    public boolean isProduction()   {return false;}
    public boolean isSimulator()    {return false;}
    public boolean isTest()         {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixTargetSubIDField create(char[] array, int offset, int length)
    {
        return create(new String(array, offset, length));
    }

    public static FixTargetSubIDField create(final String paramString)
    {                                                                                               
        if (Production.equals(paramString)) return flyweightProduction();
        if (Simulator.equals(paramString)) return flyweightSimulator();
        if (Test.equals(paramString)) return flyweightTest();
        return new FixTargetSubIDField()
        {       public String  valueString = paramString;
                public boolean hasValue()                        {return valueString != null;}
                public String  getValue()                        {return valueString;}
                public String  getValueDescription()             {return valueString;}
        };
    }                                                                                               
}
