package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixOrderCapacityField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [47] (known as OrderCapacity).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixOrderCapacityField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  47;
    public static final String TagIDAsString = "47";
    public static final char[] TagIDAsChars  = {'4','7'};
    public static final String TagName       = "OrderCapacity";
    public static final String TagFixType    = "CHAR";

    public static final char    AgencySingleOrder                                         = 'A';
    public static final String  string_AgencySingleOrder                                  = "A";
    public static final String  tagged_AgencySingleOrder                                  = TagIDAsString + EQUALS + string_AgencySingleOrder + SOH;
    public static final char[]  taggedchars_AgencySingleOrder                             = {'4','7', EQUALSchar, 'A', SOHchar};
    public static final String  text_AgencySingleOrder                                    = "AgencySingleOrder";
    public static final char    ShortExemptTransactionB                                   = 'B';
    public static final String  string_ShortExemptTransactionB                            = "B";
    public static final String  tagged_ShortExemptTransactionB                            = TagIDAsString + EQUALS + string_ShortExemptTransactionB + SOH;
    public static final char[]  taggedchars_ShortExemptTransactionB                       = {'4','7', EQUALSchar, 'B', SOHchar};
    public static final String  text_ShortExemptTransactionB                              = "ShortExemptTransactionB";
    public static final char    ProgramOrderNonIndexArbForMemberFirmOrg                   = 'C';
    public static final String  string_ProgramOrderNonIndexArbForMemberFirmOrg            = "C";
    public static final String  tagged_ProgramOrderNonIndexArbForMemberFirmOrg            = TagIDAsString + EQUALS + string_ProgramOrderNonIndexArbForMemberFirmOrg + SOH;
    public static final char[]  taggedchars_ProgramOrderNonIndexArbForMemberFirmOrg       = {'4','7', EQUALSchar, 'C', SOHchar};
    public static final String  text_ProgramOrderNonIndexArbForMemberFirmOrg              = "ProgramOrderNonIndexArbForMemberFirmOrg";
    public static final char    ProgramOrderIndexArbForMemberFirmOrg                      = 'D';
    public static final String  string_ProgramOrderIndexArbForMemberFirmOrg               = "D";
    public static final String  tagged_ProgramOrderIndexArbForMemberFirmOrg               = TagIDAsString + EQUALS + string_ProgramOrderIndexArbForMemberFirmOrg + SOH;
    public static final char[]  taggedchars_ProgramOrderIndexArbForMemberFirmOrg          = {'4','7', EQUALSchar, 'D', SOHchar};
    public static final String  text_ProgramOrderIndexArbForMemberFirmOrg                 = "ProgramOrderIndexArbForMemberFirmOrg";
    public static final char    RegisteredEquityMarketMakerTrades                         = 'E';
    public static final String  string_RegisteredEquityMarketMakerTrades                  = "E";
    public static final String  tagged_RegisteredEquityMarketMakerTrades                  = TagIDAsString + EQUALS + string_RegisteredEquityMarketMakerTrades + SOH;
    public static final char[]  taggedchars_RegisteredEquityMarketMakerTrades             = {'4','7', EQUALSchar, 'E', SOHchar};
    public static final String  text_RegisteredEquityMarketMakerTrades                    = "RegisteredEquityMarketMakerTrades";
    public static final char    ShortExemptTransactionF                                   = 'F';
    public static final String  string_ShortExemptTransactionF                            = "F";
    public static final String  tagged_ShortExemptTransactionF                            = TagIDAsString + EQUALS + string_ShortExemptTransactionF + SOH;
    public static final char[]  taggedchars_ShortExemptTransactionF                       = {'4','7', EQUALSchar, 'F', SOHchar};
    public static final String  text_ShortExemptTransactionF                              = "ShortExemptTransactionF";
    public static final char    ShortExemptTransactionH                                   = 'H';
    public static final String  string_ShortExemptTransactionH                            = "H";
    public static final String  tagged_ShortExemptTransactionH                            = TagIDAsString + EQUALS + string_ShortExemptTransactionH + SOH;
    public static final char[]  taggedchars_ShortExemptTransactionH                       = {'4','7', EQUALSchar, 'H', SOHchar};
    public static final String  text_ShortExemptTransactionH                              = "ShortExemptTransactionH";
    public static final char    ProgramOrderIndexArbForIndividualCustomer                 = 'J';
    public static final String  string_ProgramOrderIndexArbForIndividualCustomer          = "J";
    public static final String  tagged_ProgramOrderIndexArbForIndividualCustomer          = TagIDAsString + EQUALS + string_ProgramOrderIndexArbForIndividualCustomer + SOH;
    public static final char[]  taggedchars_ProgramOrderIndexArbForIndividualCustomer     = {'4','7', EQUALSchar, 'J', SOHchar};
    public static final String  text_ProgramOrderIndexArbForIndividualCustomer            = "ProgramOrderIndexArbForIndividualCustomer";
    public static final char    ProgramOrderNonIndexArbForIndividualCustomer              = 'K';
    public static final String  string_ProgramOrderNonIndexArbForIndividualCustomer       = "K";
    public static final String  tagged_ProgramOrderNonIndexArbForIndividualCustomer       = TagIDAsString + EQUALS + string_ProgramOrderNonIndexArbForIndividualCustomer + SOH;
    public static final char[]  taggedchars_ProgramOrderNonIndexArbForIndividualCustomer  = {'4','7', EQUALSchar, 'K', SOHchar};
    public static final String  text_ProgramOrderNonIndexArbForIndividualCustomer         = "ProgramOrderNonIndexArbForIndividualCustomer";
    public static final char    ShortExemptAffiliated                                     = 'L';
    public static final String  string_ShortExemptAffiliated                              = "L";
    public static final String  tagged_ShortExemptAffiliated                              = TagIDAsString + EQUALS + string_ShortExemptAffiliated + SOH;
    public static final char[]  taggedchars_ShortExemptAffiliated                         = {'4','7', EQUALSchar, 'L', SOHchar};
    public static final String  text_ShortExemptAffiliated                                = "ShortExemptAffiliated";
    public static final char    ProgramOrderIndexArbForOtherMember                        = 'M';
    public static final String  string_ProgramOrderIndexArbForOtherMember                 = "M";
    public static final String  tagged_ProgramOrderIndexArbForOtherMember                 = TagIDAsString + EQUALS + string_ProgramOrderIndexArbForOtherMember + SOH;
    public static final char[]  taggedchars_ProgramOrderIndexArbForOtherMember            = {'4','7', EQUALSchar, 'M', SOHchar};
    public static final String  text_ProgramOrderIndexArbForOtherMember                   = "ProgramOrderIndexArbForOtherMember";
    public static final char    ProgramOrderNonIndexArbForOtherMember                     = 'N';
    public static final String  string_ProgramOrderNonIndexArbForOtherMember              = "N";
    public static final String  tagged_ProgramOrderNonIndexArbForOtherMember              = TagIDAsString + EQUALS + string_ProgramOrderNonIndexArbForOtherMember + SOH;
    public static final char[]  taggedchars_ProgramOrderNonIndexArbForOtherMember         = {'4','7', EQUALSchar, 'N', SOHchar};
    public static final String  text_ProgramOrderNonIndexArbForOtherMember                = "ProgramOrderNonIndexArbForOtherMember";
    public static final char    CompetingDealerTradesO                                    = 'O';
    public static final String  string_CompetingDealerTradesO                             = "O";
    public static final String  tagged_CompetingDealerTradesO                             = TagIDAsString + EQUALS + string_CompetingDealerTradesO + SOH;
    public static final char[]  taggedchars_CompetingDealerTradesO                        = {'4','7', EQUALSchar, 'O', SOHchar};
    public static final String  text_CompetingDealerTradesO                               = "CompetingDealerTradesO";
    public static final char    Principal                                                 = 'P';
    public static final String  string_Principal                                          = "P";
    public static final String  tagged_Principal                                          = TagIDAsString + EQUALS + string_Principal + SOH;
    public static final char[]  taggedchars_Principal                                     = {'4','7', EQUALSchar, 'P', SOHchar};
    public static final String  text_Principal                                            = "Principal";
    public static final char    CompetingDealerTradesR                                    = 'R';
    public static final String  string_CompetingDealerTradesR                             = "R";
    public static final String  tagged_CompetingDealerTradesR                             = TagIDAsString + EQUALS + string_CompetingDealerTradesR + SOH;
    public static final char[]  taggedchars_CompetingDealerTradesR                        = {'4','7', EQUALSchar, 'R', SOHchar};
    public static final String  text_CompetingDealerTradesR                               = "CompetingDealerTradesR";
    public static final char    SpecialistTrades                                          = 'S';
    public static final String  string_SpecialistTrades                                   = "S";
    public static final String  tagged_SpecialistTrades                                   = TagIDAsString + EQUALS + string_SpecialistTrades + SOH;
    public static final char[]  taggedchars_SpecialistTrades                              = {'4','7', EQUALSchar, 'S', SOHchar};
    public static final String  text_SpecialistTrades                                     = "SpecialistTrades";
    public static final char    CompetingDealerTradesT                                    = 'T';
    public static final String  string_CompetingDealerTradesT                             = "T";
    public static final String  tagged_CompetingDealerTradesT                             = TagIDAsString + EQUALS + string_CompetingDealerTradesT + SOH;
    public static final char[]  taggedchars_CompetingDealerTradesT                        = {'4','7', EQUALSchar, 'T', SOHchar};
    public static final String  text_CompetingDealerTradesT                               = "CompetingDealerTradesT";
    public static final char    ProgramOrderIndexArbForOtherAgency                        = 'U';
    public static final String  string_ProgramOrderIndexArbForOtherAgency                 = "U";
    public static final String  tagged_ProgramOrderIndexArbForOtherAgency                 = TagIDAsString + EQUALS + string_ProgramOrderIndexArbForOtherAgency + SOH;
    public static final char[]  taggedchars_ProgramOrderIndexArbForOtherAgency            = {'4','7', EQUALSchar, 'U', SOHchar};
    public static final String  text_ProgramOrderIndexArbForOtherAgency                   = "ProgramOrderIndexArbForOtherAgency";
    public static final char    AllOtherOrdersAsAgentForOtherMember                       = 'W';
    public static final String  string_AllOtherOrdersAsAgentForOtherMember                = "W";
    public static final String  tagged_AllOtherOrdersAsAgentForOtherMember                = TagIDAsString + EQUALS + string_AllOtherOrdersAsAgentForOtherMember + SOH;
    public static final char[]  taggedchars_AllOtherOrdersAsAgentForOtherMember           = {'4','7', EQUALSchar, 'W', SOHchar};
    public static final String  text_AllOtherOrdersAsAgentForOtherMember                  = "AllOtherOrdersAsAgentForOtherMember";
    public static final char    ShortExemptNotAffiliated                                  = 'X';
    public static final String  string_ShortExemptNotAffiliated                           = "X";
    public static final String  tagged_ShortExemptNotAffiliated                           = TagIDAsString + EQUALS + string_ShortExemptNotAffiliated + SOH;
    public static final char[]  taggedchars_ShortExemptNotAffiliated                      = {'4','7', EQUALSchar, 'X', SOHchar};
    public static final String  text_ShortExemptNotAffiliated                             = "ShortExemptNotAffiliated";
    public static final char    ProgramOrderNonIndexArbForOtherAgency                     = 'Y';
    public static final String  string_ProgramOrderNonIndexArbForOtherAgency              = "Y";
    public static final String  tagged_ProgramOrderNonIndexArbForOtherAgency              = TagIDAsString + EQUALS + string_ProgramOrderNonIndexArbForOtherAgency + SOH;
    public static final char[]  taggedchars_ProgramOrderNonIndexArbForOtherAgency         = {'4','7', EQUALSchar, 'Y', SOHchar};
    public static final String  text_ProgramOrderNonIndexArbForOtherAgency                = "ProgramOrderNonIndexArbForOtherAgency";
    public static final char    ShortExemptNonMember                                      = 'Z';
    public static final String  string_ShortExemptNonMember                               = "Z";
    public static final String  tagged_ShortExemptNonMember                               = TagIDAsString + EQUALS + string_ShortExemptNonMember + SOH;
    public static final char[]  taggedchars_ShortExemptNonMember                          = {'4','7', EQUALSchar, 'Z', SOHchar};
    public static final String  text_ShortExemptNonMember                                 = "ShortExemptNonMember";

    private static FixOrderCapacityField flyweightAgencySingleOrder;
    public static final FixOrderCapacityField flyweightAgencySingleOrder()
    {
        if (flyweightAgencySingleOrder == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightAgencySingleOrder == null)
                {
                    flyweightAgencySingleOrder  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_AgencySingleOrder;}
                     public String  getValueDescription()                              {return text_AgencySingleOrder;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AgencySingleOrder).append("|").append(text_AgencySingleOrder).append("]").toString();}
                     public boolean isAgencySingleOrder()                              {return true;}
                     public char    charValue()                                        {return AgencySingleOrder;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_AgencySingleOrder);}
                    };
                }
            }
        }

        return flyweightAgencySingleOrder;
    }

    private static FixOrderCapacityField flyweightShortExemptTransactionB;
    public static final FixOrderCapacityField flyweightShortExemptTransactionB()
    {
        if (flyweightShortExemptTransactionB == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightShortExemptTransactionB == null)
                {
                    flyweightShortExemptTransactionB  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_ShortExemptTransactionB;}
                     public String  getValueDescription()                              {return text_ShortExemptTransactionB;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ShortExemptTransactionB).append("|").append(text_ShortExemptTransactionB).append("]").toString();}
                     public boolean isShortExemptTransactionB()                        {return true;}
                     public char    charValue()                                        {return ShortExemptTransactionB;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_ShortExemptTransactionB);}
                    };
                }
            }
        }

        return flyweightShortExemptTransactionB;
    }

    private static FixOrderCapacityField flyweightProgramOrderNonIndexArbForMemberFirmOrg;
    public static final FixOrderCapacityField flyweightProgramOrderNonIndexArbForMemberFirmOrg()
    {
        if (flyweightProgramOrderNonIndexArbForMemberFirmOrg == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightProgramOrderNonIndexArbForMemberFirmOrg == null)
                {
                    flyweightProgramOrderNonIndexArbForMemberFirmOrg  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_ProgramOrderNonIndexArbForMemberFirmOrg;}
                     public String  getValueDescription()                              {return text_ProgramOrderNonIndexArbForMemberFirmOrg;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ProgramOrderNonIndexArbForMemberFirmOrg).append("|").append(text_ProgramOrderNonIndexArbForMemberFirmOrg).append("]").toString();}
                     public boolean isProgramOrderNonIndexArbForMemberFirmOrg()        {return true;}
                     public char    charValue()                                        {return ProgramOrderNonIndexArbForMemberFirmOrg;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_ProgramOrderNonIndexArbForMemberFirmOrg);}
                    };
                }
            }
        }

        return flyweightProgramOrderNonIndexArbForMemberFirmOrg;
    }

    private static FixOrderCapacityField flyweightProgramOrderIndexArbForMemberFirmOrg;
    public static final FixOrderCapacityField flyweightProgramOrderIndexArbForMemberFirmOrg()
    {
        if (flyweightProgramOrderIndexArbForMemberFirmOrg == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightProgramOrderIndexArbForMemberFirmOrg == null)
                {
                    flyweightProgramOrderIndexArbForMemberFirmOrg  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_ProgramOrderIndexArbForMemberFirmOrg;}
                     public String  getValueDescription()                              {return text_ProgramOrderIndexArbForMemberFirmOrg;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ProgramOrderIndexArbForMemberFirmOrg).append("|").append(text_ProgramOrderIndexArbForMemberFirmOrg).append("]").toString();}
                     public boolean isProgramOrderIndexArbForMemberFirmOrg()           {return true;}
                     public char    charValue()                                        {return ProgramOrderIndexArbForMemberFirmOrg;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_ProgramOrderIndexArbForMemberFirmOrg);}
                    };
                }
            }
        }

        return flyweightProgramOrderIndexArbForMemberFirmOrg;
    }

    private static FixOrderCapacityField flyweightRegisteredEquityMarketMakerTrades;
    public static final FixOrderCapacityField flyweightRegisteredEquityMarketMakerTrades()
    {
        if (flyweightRegisteredEquityMarketMakerTrades == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightRegisteredEquityMarketMakerTrades == null)
                {
                    flyweightRegisteredEquityMarketMakerTrades  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_RegisteredEquityMarketMakerTrades;}
                     public String  getValueDescription()                              {return text_RegisteredEquityMarketMakerTrades;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_RegisteredEquityMarketMakerTrades).append("|").append(text_RegisteredEquityMarketMakerTrades).append("]").toString();}
                     public boolean isRegisteredEquityMarketMakerTrades()              {return true;}
                     public char    charValue()                                        {return RegisteredEquityMarketMakerTrades;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_RegisteredEquityMarketMakerTrades);}
                    };
                }
            }
        }

        return flyweightRegisteredEquityMarketMakerTrades;
    }

    private static FixOrderCapacityField flyweightShortExemptTransactionF;
    public static final FixOrderCapacityField flyweightShortExemptTransactionF()
    {
        if (flyweightShortExemptTransactionF == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightShortExemptTransactionF == null)
                {
                    flyweightShortExemptTransactionF  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_ShortExemptTransactionF;}
                     public String  getValueDescription()                              {return text_ShortExemptTransactionF;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ShortExemptTransactionF).append("|").append(text_ShortExemptTransactionF).append("]").toString();}
                     public boolean isShortExemptTransactionF()                        {return true;}
                     public char    charValue()                                        {return ShortExemptTransactionF;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_ShortExemptTransactionF);}
                    };
                }
            }
        }

        return flyweightShortExemptTransactionF;
    }

    private static FixOrderCapacityField flyweightShortExemptTransactionH;
    public static final FixOrderCapacityField flyweightShortExemptTransactionH()
    {
        if (flyweightShortExemptTransactionH == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightShortExemptTransactionH == null)
                {
                    flyweightShortExemptTransactionH  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_ShortExemptTransactionH;}
                     public String  getValueDescription()                              {return text_ShortExemptTransactionH;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ShortExemptTransactionH).append("|").append(text_ShortExemptTransactionH).append("]").toString();}
                     public boolean isShortExemptTransactionH()                        {return true;}
                     public char    charValue()                                        {return ShortExemptTransactionH;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_ShortExemptTransactionH);}
                    };
                }
            }
        }

        return flyweightShortExemptTransactionH;
    }

    private static FixOrderCapacityField flyweightProgramOrderIndexArbForIndividualCustomer;
    public static final FixOrderCapacityField flyweightProgramOrderIndexArbForIndividualCustomer()
    {
        if (flyweightProgramOrderIndexArbForIndividualCustomer == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightProgramOrderIndexArbForIndividualCustomer == null)
                {
                    flyweightProgramOrderIndexArbForIndividualCustomer  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_ProgramOrderIndexArbForIndividualCustomer;}
                     public String  getValueDescription()                              {return text_ProgramOrderIndexArbForIndividualCustomer;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ProgramOrderIndexArbForIndividualCustomer).append("|").append(text_ProgramOrderIndexArbForIndividualCustomer).append("]").toString();}
                     public boolean isProgramOrderIndexArbForIndividualCustomer()      {return true;}
                     public char    charValue()                                        {return ProgramOrderIndexArbForIndividualCustomer;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_ProgramOrderIndexArbForIndividualCustomer);}
                    };
                }
            }
        }

        return flyweightProgramOrderIndexArbForIndividualCustomer;
    }

    private static FixOrderCapacityField flyweightProgramOrderNonIndexArbForIndividualCustomer;
    public static final FixOrderCapacityField flyweightProgramOrderNonIndexArbForIndividualCustomer()
    {
        if (flyweightProgramOrderNonIndexArbForIndividualCustomer == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightProgramOrderNonIndexArbForIndividualCustomer == null)
                {
                    flyweightProgramOrderNonIndexArbForIndividualCustomer  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_ProgramOrderNonIndexArbForIndividualCustomer;}
                     public String  getValueDescription()                              {return text_ProgramOrderNonIndexArbForIndividualCustomer;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ProgramOrderNonIndexArbForIndividualCustomer).append("|").append(text_ProgramOrderNonIndexArbForIndividualCustomer).append("]").toString();}
                     public boolean isProgramOrderNonIndexArbForIndividualCustomer()   {return true;}
                     public char    charValue()                                        {return ProgramOrderNonIndexArbForIndividualCustomer;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_ProgramOrderNonIndexArbForIndividualCustomer);}
                    };
                }
            }
        }

        return flyweightProgramOrderNonIndexArbForIndividualCustomer;
    }

    private static FixOrderCapacityField flyweightShortExemptAffiliated;
    public static final FixOrderCapacityField flyweightShortExemptAffiliated()
    {
        if (flyweightShortExemptAffiliated == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightShortExemptAffiliated == null)
                {
                    flyweightShortExemptAffiliated  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_ShortExemptAffiliated;}
                     public String  getValueDescription()                              {return text_ShortExemptAffiliated;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ShortExemptAffiliated).append("|").append(text_ShortExemptAffiliated).append("]").toString();}
                     public boolean isShortExemptAffiliated()                          {return true;}
                     public char    charValue()                                        {return ShortExemptAffiliated;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_ShortExemptAffiliated);}
                    };
                }
            }
        }

        return flyweightShortExemptAffiliated;
    }

    private static FixOrderCapacityField flyweightProgramOrderIndexArbForOtherMember;
    public static final FixOrderCapacityField flyweightProgramOrderIndexArbForOtherMember()
    {
        if (flyweightProgramOrderIndexArbForOtherMember == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightProgramOrderIndexArbForOtherMember == null)
                {
                    flyweightProgramOrderIndexArbForOtherMember  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_ProgramOrderIndexArbForOtherMember;}
                     public String  getValueDescription()                              {return text_ProgramOrderIndexArbForOtherMember;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ProgramOrderIndexArbForOtherMember).append("|").append(text_ProgramOrderIndexArbForOtherMember).append("]").toString();}
                     public boolean isProgramOrderIndexArbForOtherMember()             {return true;}
                     public char    charValue()                                        {return ProgramOrderIndexArbForOtherMember;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_ProgramOrderIndexArbForOtherMember);}
                    };
                }
            }
        }

        return flyweightProgramOrderIndexArbForOtherMember;
    }

    private static FixOrderCapacityField flyweightProgramOrderNonIndexArbForOtherMember;
    public static final FixOrderCapacityField flyweightProgramOrderNonIndexArbForOtherMember()
    {
        if (flyweightProgramOrderNonIndexArbForOtherMember == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightProgramOrderNonIndexArbForOtherMember == null)
                {
                    flyweightProgramOrderNonIndexArbForOtherMember  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_ProgramOrderNonIndexArbForOtherMember;}
                     public String  getValueDescription()                              {return text_ProgramOrderNonIndexArbForOtherMember;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ProgramOrderNonIndexArbForOtherMember).append("|").append(text_ProgramOrderNonIndexArbForOtherMember).append("]").toString();}
                     public boolean isProgramOrderNonIndexArbForOtherMember()          {return true;}
                     public char    charValue()                                        {return ProgramOrderNonIndexArbForOtherMember;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_ProgramOrderNonIndexArbForOtherMember);}
                    };
                }
            }
        }

        return flyweightProgramOrderNonIndexArbForOtherMember;
    }

    private static FixOrderCapacityField flyweightCompetingDealerTradesO;
    public static final FixOrderCapacityField flyweightCompetingDealerTradesO()
    {
        if (flyweightCompetingDealerTradesO == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightCompetingDealerTradesO == null)
                {
                    flyweightCompetingDealerTradesO  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_CompetingDealerTradesO;}
                     public String  getValueDescription()                              {return text_CompetingDealerTradesO;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CompetingDealerTradesO).append("|").append(text_CompetingDealerTradesO).append("]").toString();}
                     public boolean isCompetingDealerTradesO()                         {return true;}
                     public char    charValue()                                        {return CompetingDealerTradesO;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_CompetingDealerTradesO);}
                    };
                }
            }
        }

        return flyweightCompetingDealerTradesO;
    }

    private static FixOrderCapacityField flyweightPrincipal;
    public static final FixOrderCapacityField flyweightPrincipal()
    {
        if (flyweightPrincipal == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightPrincipal == null)
                {
                    flyweightPrincipal  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_Principal;}
                     public String  getValueDescription()                              {return text_Principal;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Principal).append("|").append(text_Principal).append("]").toString();}
                     public boolean isPrincipal()                                      {return true;}
                     public char    charValue()                                        {return Principal;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_Principal);}
                    };
                }
            }
        }

        return flyweightPrincipal;
    }

    private static FixOrderCapacityField flyweightCompetingDealerTradesR;
    public static final FixOrderCapacityField flyweightCompetingDealerTradesR()
    {
        if (flyweightCompetingDealerTradesR == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightCompetingDealerTradesR == null)
                {
                    flyweightCompetingDealerTradesR  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_CompetingDealerTradesR;}
                     public String  getValueDescription()                              {return text_CompetingDealerTradesR;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CompetingDealerTradesR).append("|").append(text_CompetingDealerTradesR).append("]").toString();}
                     public boolean isCompetingDealerTradesR()                         {return true;}
                     public char    charValue()                                        {return CompetingDealerTradesR;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_CompetingDealerTradesR);}
                    };
                }
            }
        }

        return flyweightCompetingDealerTradesR;
    }

    private static FixOrderCapacityField flyweightSpecialistTrades;
    public static final FixOrderCapacityField flyweightSpecialistTrades()
    {
        if (flyweightSpecialistTrades == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightSpecialistTrades == null)
                {
                    flyweightSpecialistTrades  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_SpecialistTrades;}
                     public String  getValueDescription()                              {return text_SpecialistTrades;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_SpecialistTrades).append("|").append(text_SpecialistTrades).append("]").toString();}
                     public boolean isSpecialistTrades()                               {return true;}
                     public char    charValue()                                        {return SpecialistTrades;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_SpecialistTrades);}
                    };
                }
            }
        }

        return flyweightSpecialistTrades;
    }

    private static FixOrderCapacityField flyweightCompetingDealerTradesT;
    public static final FixOrderCapacityField flyweightCompetingDealerTradesT()
    {
        if (flyweightCompetingDealerTradesT == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightCompetingDealerTradesT == null)
                {
                    flyweightCompetingDealerTradesT  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_CompetingDealerTradesT;}
                     public String  getValueDescription()                              {return text_CompetingDealerTradesT;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CompetingDealerTradesT).append("|").append(text_CompetingDealerTradesT).append("]").toString();}
                     public boolean isCompetingDealerTradesT()                         {return true;}
                     public char    charValue()                                        {return CompetingDealerTradesT;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_CompetingDealerTradesT);}
                    };
                }
            }
        }

        return flyweightCompetingDealerTradesT;
    }

    private static FixOrderCapacityField flyweightProgramOrderIndexArbForOtherAgency;
    public static final FixOrderCapacityField flyweightProgramOrderIndexArbForOtherAgency()
    {
        if (flyweightProgramOrderIndexArbForOtherAgency == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightProgramOrderIndexArbForOtherAgency == null)
                {
                    flyweightProgramOrderIndexArbForOtherAgency  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_ProgramOrderIndexArbForOtherAgency;}
                     public String  getValueDescription()                              {return text_ProgramOrderIndexArbForOtherAgency;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ProgramOrderIndexArbForOtherAgency).append("|").append(text_ProgramOrderIndexArbForOtherAgency).append("]").toString();}
                     public boolean isProgramOrderIndexArbForOtherAgency()             {return true;}
                     public char    charValue()                                        {return ProgramOrderIndexArbForOtherAgency;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_ProgramOrderIndexArbForOtherAgency);}
                    };
                }
            }
        }

        return flyweightProgramOrderIndexArbForOtherAgency;
    }

    private static FixOrderCapacityField flyweightAllOtherOrdersAsAgentForOtherMember;
    public static final FixOrderCapacityField flyweightAllOtherOrdersAsAgentForOtherMember()
    {
        if (flyweightAllOtherOrdersAsAgentForOtherMember == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightAllOtherOrdersAsAgentForOtherMember == null)
                {
                    flyweightAllOtherOrdersAsAgentForOtherMember  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_AllOtherOrdersAsAgentForOtherMember;}
                     public String  getValueDescription()                              {return text_AllOtherOrdersAsAgentForOtherMember;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AllOtherOrdersAsAgentForOtherMember).append("|").append(text_AllOtherOrdersAsAgentForOtherMember).append("]").toString();}
                     public boolean isAllOtherOrdersAsAgentForOtherMember()            {return true;}
                     public char    charValue()                                        {return AllOtherOrdersAsAgentForOtherMember;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_AllOtherOrdersAsAgentForOtherMember);}
                    };
                }
            }
        }

        return flyweightAllOtherOrdersAsAgentForOtherMember;
    }

    private static FixOrderCapacityField flyweightShortExemptNotAffiliated;
    public static final FixOrderCapacityField flyweightShortExemptNotAffiliated()
    {
        if (flyweightShortExemptNotAffiliated == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightShortExemptNotAffiliated == null)
                {
                    flyweightShortExemptNotAffiliated  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_ShortExemptNotAffiliated;}
                     public String  getValueDescription()                              {return text_ShortExemptNotAffiliated;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ShortExemptNotAffiliated).append("|").append(text_ShortExemptNotAffiliated).append("]").toString();}
                     public boolean isShortExemptNotAffiliated()                       {return true;}
                     public char    charValue()                                        {return ShortExemptNotAffiliated;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_ShortExemptNotAffiliated);}
                    };
                }
            }
        }

        return flyweightShortExemptNotAffiliated;
    }

    private static FixOrderCapacityField flyweightProgramOrderNonIndexArbForOtherAgency;
    public static final FixOrderCapacityField flyweightProgramOrderNonIndexArbForOtherAgency()
    {
        if (flyweightProgramOrderNonIndexArbForOtherAgency == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightProgramOrderNonIndexArbForOtherAgency == null)
                {
                    flyweightProgramOrderNonIndexArbForOtherAgency  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_ProgramOrderNonIndexArbForOtherAgency;}
                     public String  getValueDescription()                              {return text_ProgramOrderNonIndexArbForOtherAgency;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ProgramOrderNonIndexArbForOtherAgency).append("|").append(text_ProgramOrderNonIndexArbForOtherAgency).append("]").toString();}
                     public boolean isProgramOrderNonIndexArbForOtherAgency()          {return true;}
                     public char    charValue()                                        {return ProgramOrderNonIndexArbForOtherAgency;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_ProgramOrderNonIndexArbForOtherAgency);}
                    };
                }
            }
        }

        return flyweightProgramOrderNonIndexArbForOtherAgency;
    }

    private static FixOrderCapacityField flyweightShortExemptNonMember;
    public static final FixOrderCapacityField flyweightShortExemptNonMember()
    {
        if (flyweightShortExemptNonMember == null)
        {
            synchronized(FixOrderCapacityField.class)
            {
                if (flyweightShortExemptNonMember == null)
                {
                    flyweightShortExemptNonMember  = new FixOrderCapacityField()
                    {public boolean hasValue()                                         {return true;}
                     public String  getValue()                                         {return string_ShortExemptNonMember;}
                     public String  getValueDescription()                              {return text_ShortExemptNonMember;}
                     public String  toString()                                         {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ShortExemptNonMember).append("|").append(text_ShortExemptNonMember).append("]").toString();}
                     public boolean isShortExemptNonMember()                           {return true;}
                     public char    charValue()                                        {return ShortExemptNonMember;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder)      {fixMessageBuilder.append(taggedchars_ShortExemptNonMember);}
                    };
                }
            }
        }

        return flyweightShortExemptNonMember;
    }


    public boolean isAgencySingleOrder()                              {return false;}
    public boolean isShortExemptTransactionB()                        {return false;}
    public boolean isProgramOrderNonIndexArbForMemberFirmOrg()        {return false;}
    public boolean isProgramOrderIndexArbForMemberFirmOrg()           {return false;}
    public boolean isRegisteredEquityMarketMakerTrades()              {return false;}
    public boolean isShortExemptTransactionF()                        {return false;}
    public boolean isShortExemptTransactionH()                        {return false;}
    public boolean isProgramOrderIndexArbForIndividualCustomer()      {return false;}
    public boolean isProgramOrderNonIndexArbForIndividualCustomer()   {return false;}
    public boolean isShortExemptAffiliated()                          {return false;}
    public boolean isProgramOrderIndexArbForOtherMember()             {return false;}
    public boolean isProgramOrderNonIndexArbForOtherMember()          {return false;}
    public boolean isCompetingDealerTradesO()                         {return false;}
    public boolean isPrincipal()                                      {return false;}
    public boolean isCompetingDealerTradesR()                         {return false;}
    public boolean isSpecialistTrades()                               {return false;}
    public boolean isCompetingDealerTradesT()                         {return false;}
    public boolean isProgramOrderIndexArbForOtherAgency()             {return false;}
    public boolean isAllOtherOrdersAsAgentForOtherMember()            {return false;}
    public boolean isShortExemptNotAffiliated()                       {return false;}
    public boolean isProgramOrderNonIndexArbForOtherAgency()          {return false;}
    public boolean isShortExemptNonMember()                           {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixOrderCapacityField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixOrderCapacityField create(final char param)
    {
        switch (param)
        {                                                                                           
            case AgencySingleOrder:                            return flyweightAgencySingleOrder();
            case ShortExemptTransactionB:                      return flyweightShortExemptTransactionB();
            case ProgramOrderNonIndexArbForMemberFirmOrg:      return flyweightProgramOrderNonIndexArbForMemberFirmOrg();
            case ProgramOrderIndexArbForMemberFirmOrg:         return flyweightProgramOrderIndexArbForMemberFirmOrg();
            case RegisteredEquityMarketMakerTrades:            return flyweightRegisteredEquityMarketMakerTrades();
            case ShortExemptTransactionF:                      return flyweightShortExemptTransactionF();
            case ShortExemptTransactionH:                      return flyweightShortExemptTransactionH();
            case ProgramOrderIndexArbForIndividualCustomer:    return flyweightProgramOrderIndexArbForIndividualCustomer();
            case ProgramOrderNonIndexArbForIndividualCustomer: return flyweightProgramOrderNonIndexArbForIndividualCustomer();
            case ShortExemptAffiliated:                        return flyweightShortExemptAffiliated();
            case ProgramOrderIndexArbForOtherMember:           return flyweightProgramOrderIndexArbForOtherMember();
            case ProgramOrderNonIndexArbForOtherMember:        return flyweightProgramOrderNonIndexArbForOtherMember();
            case CompetingDealerTradesO:                       return flyweightCompetingDealerTradesO();
            case Principal:                                    return flyweightPrincipal();
            case CompetingDealerTradesR:                       return flyweightCompetingDealerTradesR();
            case SpecialistTrades:                             return flyweightSpecialistTrades();
            case CompetingDealerTradesT:                       return flyweightCompetingDealerTradesT();
            case ProgramOrderIndexArbForOtherAgency:           return flyweightProgramOrderIndexArbForOtherAgency();
            case AllOtherOrdersAsAgentForOtherMember:          return flyweightAllOtherOrdersAsAgentForOtherMember();
            case ShortExemptNotAffiliated:                     return flyweightShortExemptNotAffiliated();
            case ProgramOrderNonIndexArbForOtherAgency:        return flyweightProgramOrderNonIndexArbForOtherAgency();
            case ShortExemptNonMember:                         return flyweightShortExemptNonMember();
        }
                                                                                                    
        return null;
    }                                                                                               
}
