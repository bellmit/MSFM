package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixExecTransTypeField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [20] (known as ExecTransType).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixExecTransTypeField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  20;
    public static final String TagIDAsString = "20";
    public static final char[] TagIDAsChars  = {'2','0'};
    public static final String TagName       = "ExecTransType";
    public static final String TagFixType    = "CHAR";

    public static final char    New                  = '0';
    public static final String  string_New           = "0";
    public static final String  tagged_New           = TagIDAsString + EQUALS + string_New + SOH;
    public static final char[]  taggedchars_New      = {'2','0', EQUALSchar, '0', SOHchar};
    public static final String  text_New             = "New";
    public static final char    Cancel               = '1';
    public static final String  string_Cancel        = "1";
    public static final String  tagged_Cancel        = TagIDAsString + EQUALS + string_Cancel + SOH;
    public static final char[]  taggedchars_Cancel   = {'2','0', EQUALSchar, '1', SOHchar};
    public static final String  text_Cancel          = "Cancel";
    public static final char    Correct              = '2';
    public static final String  string_Correct       = "2";
    public static final String  tagged_Correct       = TagIDAsString + EQUALS + string_Correct + SOH;
    public static final char[]  taggedchars_Correct  = {'2','0', EQUALSchar, '2', SOHchar};
    public static final String  text_Correct         = "Correct";
    public static final char    Status               = '3';
    public static final String  string_Status        = "3";
    public static final String  tagged_Status        = TagIDAsString + EQUALS + string_Status + SOH;
    public static final char[]  taggedchars_Status   = {'2','0', EQUALSchar, '3', SOHchar};
    public static final String  text_Status          = "Status";

    private static FixExecTransTypeField flyweightNew;
    public static final FixExecTransTypeField flyweightNew()
    {
        if (flyweightNew == null)
        {
            synchronized(FixExecTransTypeField.class)
            {
                if (flyweightNew == null)
                {
                    flyweightNew  = new FixExecTransTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_New;}
                     public String  getValueDescription()             {return text_New;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_New).append("|").append(text_New).append("]").toString();}
                     public boolean isNew()                           {return true;}
                     public char    charValue()                       {return New;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_New);}
                    };
                }
            }
        }

        return flyweightNew;
    }

    private static FixExecTransTypeField flyweightCancel;
    public static final FixExecTransTypeField flyweightCancel()
    {
        if (flyweightCancel == null)
        {
            synchronized(FixExecTransTypeField.class)
            {
                if (flyweightCancel == null)
                {
                    flyweightCancel  = new FixExecTransTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Cancel;}
                     public String  getValueDescription()             {return text_Cancel;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Cancel).append("|").append(text_Cancel).append("]").toString();}
                     public boolean isCancel()                        {return true;}
                     public char    charValue()                       {return Cancel;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Cancel);}
                    };
                }
            }
        }

        return flyweightCancel;
    }

    private static FixExecTransTypeField flyweightCorrect;
    public static final FixExecTransTypeField flyweightCorrect()
    {
        if (flyweightCorrect == null)
        {
            synchronized(FixExecTransTypeField.class)
            {
                if (flyweightCorrect == null)
                {
                    flyweightCorrect  = new FixExecTransTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Correct;}
                     public String  getValueDescription()             {return text_Correct;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Correct).append("|").append(text_Correct).append("]").toString();}
                     public boolean isCorrect()                       {return true;}
                     public char    charValue()                       {return Correct;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Correct);}
                    };
                }
            }
        }

        return flyweightCorrect;
    }

    private static FixExecTransTypeField flyweightStatus;
    public static final FixExecTransTypeField flyweightStatus()
    {
        if (flyweightStatus == null)
        {
            synchronized(FixExecTransTypeField.class)
            {
                if (flyweightStatus == null)
                {
                    flyweightStatus  = new FixExecTransTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Status;}
                     public String  getValueDescription()             {return text_Status;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Status).append("|").append(text_Status).append("]").toString();}
                     public boolean isStatus()                        {return true;}
                     public char    charValue()                       {return Status;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Status);}
                    };
                }
            }
        }

        return flyweightStatus;
    }


    public boolean isNew()       {return false;}
    public boolean isCancel()    {return false;}
    public boolean isCorrect()   {return false;}
    public boolean isStatus()    {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixExecTransTypeField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixExecTransTypeField create(final char param)
    {
        switch (param)
        {                                                                                           
            case New:     return flyweightNew();
            case Cancel:  return flyweightCancel();
            case Correct: return flyweightCorrect();
            case Status:  return flyweightStatus();
        }
                                                                                                    
        return null;
    }                                                                                               
}
