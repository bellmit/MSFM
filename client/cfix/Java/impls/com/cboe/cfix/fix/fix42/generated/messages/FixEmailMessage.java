package com.cboe.cfix.fix.fix42.generated.messages;

/**
 * FixEmailMessage.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Email Message.
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import java.util.*;

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.cfix.fix.fix42.field.*;
import com.cboe.cfix.fix.fix42.generated.fields.*;
import com.cboe.cfix.fix.fix42.generated.helpers.*;
import com.cboe.cfix.fix.util.*;
import com.cboe.client.util.*;
import com.cboe.infrastructureServices.foundationFramework.utilities.*;

public class FixEmailMessage extends FixMessage
{   
    public static final String MsgType        = "C";
    public static final char   MsgTypeAsChar  = 'C';
    public static final char[] MsgTypeAsChars = {'C'};
    public static final String MsgTypeName    = "Email";

    public FixEmailThreadIDField        fieldEmailThreadID;
    public FixEmailTypeField            fieldEmailType;
    public FixOrigTimeField             fieldOrigTime;
    public FixSubjectField              fieldSubject;
    //     FixEncodedSubjectLenField    fieldEncodedSubjectLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    //     FixEncodedSubjectField       fieldEncodedSubject;// NOT GENERATED (marked as unused_by_cboe in the XML file)
    public FixNoRoutingIDsField         fieldNoRoutingIDs;
    public RoutingIDsGroup[]            groupRoutingIDs;
    public FixNoRelatedSymField         fieldNoRelatedSym;
    public RelatedSymGroup[]            groupRelatedSym;
    public FixOrderIDField              fieldOrderID;
    public FixClOrdIDField              fieldClOrdID;
    public FixLinesOfTextField          fieldLinesOfText;
    public LinesOfTextGroup[]           groupLinesOfText;
    public FixRawDataLengthField        fieldRawDataLength;
    public FixRawDataField              fieldRawData;
    public List                         additionalUserFields;

    public static class RoutingIDsGroup implements PrettyPrintWriterVisitorIF
    {   
        public FixRoutingTypeField          fieldRoutingType;
        public FixRoutingIDField            fieldRoutingID;

        public String toString()
        {
            PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

            accept(prettyPrintWriter);

            return prettyPrintWriter.toString();
        }

        public void accept(PrettyPrintWriterIF prettyPrintWriter)
        {
            prettyPrintWriter.startPrintingGroup("RoutingIDsGroup");  
            prettyPrintWriter.printGroupItem(fieldRoutingType);
            prettyPrintWriter.printGroupItem(fieldRoutingID);

            prettyPrintWriter.endPrintingGroup();
        }                                                                                                 

        public void accept(FixMessageBuilderIF fixMessageBuilder)
        {                                                                                             
            fixMessageBuilder.append(fieldRoutingType);
            fixMessageBuilder.append(fieldRoutingID);
        }                                                                                                 
    }

    public static class RelatedSymGroup implements PrettyPrintWriterVisitorIF
    {   
        public FixRelatedSymField           fieldRelatedSym;
        public FixSymbolSfxField            fieldSymbolSfx;
        public FixSecurityIDField           fieldSecurityID;
        public FixIDSourceField             fieldIDSource;
        public FixSecurityTypeField         fieldSecurityType;
        public FixMaturityMonthYearField    fieldMaturityMonthYear;
        public FixMaturityDayField          fieldMaturityDay;
        public FixPutOrCallField            fieldPutOrCall;
        public FixStrikePriceField          fieldStrikePrice;
        public FixOptAttributeField         fieldOptAttribute;
        public FixContractMultiplierField   fieldContractMultiplier;
        public FixCouponRateField           fieldCouponRate;
        public FixSecurityExchangeField     fieldSecurityExchange;
        public FixIssuerField               fieldIssuer;
        //     FixEncodedIssuerLenField     fieldEncodedIssuerLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        //     FixEncodedIssuerField        fieldEncodedIssuer;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        public FixSecurityDescField         fieldSecurityDesc;
        //     FixEncodedSecurityDescLenField fieldEncodedSecurityDescLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        //     FixEncodedSecurityDescField  fieldEncodedSecurityDesc;// NOT GENERATED (marked as unused_by_cboe in the XML file)

        public String toString()
        {
            PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

            accept(prettyPrintWriter);

            return prettyPrintWriter.toString();
        }

        public void accept(PrettyPrintWriterIF prettyPrintWriter)
        {
            prettyPrintWriter.startPrintingGroup("RelatedSymGroup");  
            prettyPrintWriter.printGroupItem(fieldRelatedSym);
            prettyPrintWriter.printGroupItem(fieldSymbolSfx);
            prettyPrintWriter.printGroupItem(fieldSecurityID);
            prettyPrintWriter.printGroupItem(fieldIDSource);
            prettyPrintWriter.printGroupItem(fieldSecurityType);
            prettyPrintWriter.printGroupItem(fieldMaturityMonthYear);
            prettyPrintWriter.printGroupItem(fieldMaturityDay);
            prettyPrintWriter.printGroupItem(fieldPutOrCall);
            prettyPrintWriter.printGroupItem(fieldStrikePrice);
            prettyPrintWriter.printGroupItem(fieldOptAttribute);
            prettyPrintWriter.printGroupItem(fieldContractMultiplier);
            prettyPrintWriter.printGroupItem(fieldCouponRate);
            prettyPrintWriter.printGroupItem(fieldSecurityExchange);
            prettyPrintWriter.printGroupItem(fieldIssuer);
            prettyPrintWriter.printGroupItem(fieldSecurityDesc);

            prettyPrintWriter.endPrintingGroup();
        }                                                                                                 

        public void accept(FixMessageBuilderIF fixMessageBuilder)
        {                                                                                             
            fixMessageBuilder.append(fieldRelatedSym);
            fixMessageBuilder.append(fieldSymbolSfx);
            fixMessageBuilder.append(fieldSecurityID);
            fixMessageBuilder.append(fieldIDSource);
            fixMessageBuilder.append(fieldSecurityType);
            fixMessageBuilder.append(fieldMaturityMonthYear);
            fixMessageBuilder.append(fieldMaturityDay);
            fixMessageBuilder.append(fieldPutOrCall);
            fixMessageBuilder.append(fieldStrikePrice);
            fixMessageBuilder.append(fieldOptAttribute);
            fixMessageBuilder.append(fieldContractMultiplier);
            fixMessageBuilder.append(fieldCouponRate);
            fixMessageBuilder.append(fieldSecurityExchange);
            fixMessageBuilder.append(fieldIssuer);
            fixMessageBuilder.append(fieldSecurityDesc);
        }                                                                                                 
    }

    public static class LinesOfTextGroup implements PrettyPrintWriterVisitorIF
    {   
        public FixTextField                 fieldText;
        //     FixEncodedTextLenField       fieldEncodedTextLen;// NOT GENERATED (marked as unused_by_cboe in the XML file)
        //     FixEncodedTextField          fieldEncodedText;// NOT GENERATED (marked as unused_by_cboe in the XML file)

        public String toString()
        {
            PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

            accept(prettyPrintWriter);

            return prettyPrintWriter.toString();
        }

        public void accept(PrettyPrintWriterIF prettyPrintWriter)
        {
            prettyPrintWriter.startPrintingGroup("LinesOfTextGroup");  
            prettyPrintWriter.printGroupItem(fieldText);

            prettyPrintWriter.endPrintingGroup();
        }                                                                                                 

        public void accept(FixMessageBuilderIF fixMessageBuilder)
        {                                                                                             
            fixMessageBuilder.append(fieldText);
        }                                                                                                 
    }

    public FixEmailMessage()
    {

    }

    public boolean isFixEmailMessage() {return true;}
    public String getMsgType()        {return MsgType;}
    public char   getMsgTypeAsChar()  {return MsgTypeAsChar;}
    public char[] getMsgTypeAsChars() {return MsgTypeAsChars;}
    public String getMsgTypeName()    {return MsgTypeName;}
    
    public String toString()
    {
        PrettyPrintWriter prettyPrintWriter = new PrettyPrintWriter();

        accept(prettyPrintWriter);

        return prettyPrintWriter.toString();
    }

    public void accept(PrettyPrintWriterIF prettyPrintWriter)
    {
        prettyPrintWriter.startPrintingGroup(MsgTypeName);

        super.accept(prettyPrintWriter);
                                                                                                      
        prettyPrintWriter.printGroupItem(fieldEmailThreadID);
        prettyPrintWriter.printGroupItem(fieldEmailType);
        prettyPrintWriter.printGroupItem(fieldOrigTime);
        prettyPrintWriter.printGroupItem(fieldSubject);
        prettyPrintWriter.printGroupItem(fieldNoRoutingIDs);
        if (groupRoutingIDs != null)
        {
            for (int i = 0; i < groupRoutingIDs.length; i++)
            {
                if (groupRoutingIDs[i] != null) groupRoutingIDs[i].accept(prettyPrintWriter);
            }
        }                                                                                             
        prettyPrintWriter.printGroupItem(fieldNoRelatedSym);
        if (groupRelatedSym != null)
        {
            for (int i = 0; i < groupRelatedSym.length; i++)
            {
                if (groupRelatedSym[i] != null) groupRelatedSym[i].accept(prettyPrintWriter);
            }
        }                                                                                             
        prettyPrintWriter.printGroupItem(fieldOrderID);
        prettyPrintWriter.printGroupItem(fieldClOrdID);
        prettyPrintWriter.printGroupItem(fieldLinesOfText);
        if (groupLinesOfText != null)
        {
            for (int i = 0; i < groupLinesOfText.length; i++)
            {
                if (groupLinesOfText[i] != null) groupLinesOfText[i].accept(prettyPrintWriter);
            }
        }                                                                                             
        prettyPrintWriter.printGroupItem(fieldRawDataLength);
        prettyPrintWriter.printGroupItem(fieldRawData);

        prettyPrintWriter.endPrintingGroup();
    }                                                                                                 

    public void accept(FixMessageBuilderIF fixMessageBuilder)
    {
        super.accept(fixMessageBuilder);
                                                                                                      
        fixMessageBuilder.append(fieldEmailThreadID);
        fixMessageBuilder.append(fieldEmailType);
        fixMessageBuilder.append(fieldOrigTime);
        fixMessageBuilder.append(fieldSubject);
        fixMessageBuilder.append(fieldNoRoutingIDs);
        if (groupRoutingIDs != null)
        {
            for (int i = 0; i < groupRoutingIDs.length; i++)
            {
                if (groupRoutingIDs[i] != null) groupRoutingIDs[i].accept(fixMessageBuilder);
            }
        }                                                                                             
        fixMessageBuilder.append(fieldNoRelatedSym);
        if (groupRelatedSym != null)
        {
            for (int i = 0; i < groupRelatedSym.length; i++)
            {
                if (groupRelatedSym[i] != null) groupRelatedSym[i].accept(fixMessageBuilder);
            }
        }                                                                                             
        fixMessageBuilder.append(fieldOrderID);
        fixMessageBuilder.append(fieldClOrdID);
        fixMessageBuilder.append(fieldLinesOfText);
        if (groupLinesOfText != null)
        {
            for (int i = 0; i < groupLinesOfText.length; i++)
            {
                if (groupLinesOfText[i] != null) groupLinesOfText[i].accept(fixMessageBuilder);
            }
        }                                                                                             
        fixMessageBuilder.append(fieldRawDataLength);
        fixMessageBuilder.append(fieldRawData);

        if (additionalUserFields != null)
        {
            for (Iterator iterator = additionalUserFields.iterator(); iterator.hasNext(); )
            {
                fixMessageBuilder.append((FixFieldIF) iterator.next());
            }
        }
    }                                                                                                 

    public PackedIntArrayIF validate(FixPacketIF fixPacket, PackedIntArrayIF foundErrors, int validationFlags, int debugFlags)
    {
        if (fieldSenderCompID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSenderCompIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldTargetCompID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixTargetCompIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldMsgSeqNum == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixMsgSeqNumField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldSendingTime == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSendingTimeField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldEmailThreadID == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixEmailThreadIDField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldEmailType == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixEmailTypeField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldSubject == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixSubjectField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }
               
        if (fieldLinesOfText == null)
        {
            foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixLinesOfTextField.TagID));
            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        for (int i = 0; i < groupLinesOfText.length; i++)
        {
            if (groupLinesOfText[i].fieldText == null)
            {
                foundErrors.add(BitHelper.packInt(FixException.MISSING_REQUIRED_TAG, FixTextField.TagID));
                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                {
                    return foundErrors;
                }
            }
    
        }
               
        return foundErrors;
    }

    private static final int STATE_RoutingIDsGroup = 2;
    private static final int STATE_RelatedSymGroup = 3;
    private static final int STATE_LinesOfTextGroup = 4;

    private String toStateString(int state)
    {
        switch (state)
        {
            case STATE_Header: return "State[Header]";
            case STATE_Field:  return "State[Field]";
            case STATE_RoutingIDsGroup: return "State[RoutingIDsGroup]";
            case STATE_RelatedSymGroup: return "State[RelatedSymGroup]";
            case STATE_LinesOfTextGroup: return "State[LinesOfTextGroup]";
        }

        return "???";
    }
    
    public PackedIntArrayIF build(FixPacketIF fixPacket, PackedIntArrayIF foundErrors, int validationFlags, int debugFlags)
    {
        char[] array          = fixPacket.getArray();
        int    numTags        = fixPacket.getTagPositionLength();
        int    currentState   = STATE_Header;
        int    tag;
        int    offset;
        int    length;
        int    numInGroup;
        int    group;
        int    currentPosition;
        int    current_groupRoutingIDs = 0; // this group does not have a starting field, so we want to populate it as we find its objects
        int    current_groupRelatedSym = 0; // this group does not have a starting field, so we want to populate it as we find its objects
        int    current_groupLinesOfText = 0; // this group does not have a starting field, so we want to populate it as we find its objects

        for (currentPosition = 0; currentPosition < numTags; currentPosition++)
        {
            if (!foundErrors.isEmpty() && BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                break;
            }

            tag    = fixPacket.getTag(currentPosition);
            offset = fixPacket.getValueOffset(currentPosition);
            length = fixPacket.getValueLength(currentPosition);

            if ((BitHelper.isBitMaskSet(debugFlags, FixSessionDebugIF.MESSAGE_SHOW_BUILD_TRANSITIONS)))
            {
                String threadName = Thread.currentThread().getName();
                String stateString = toStateString(currentState);
                StringBuilder sb = new StringBuilder(threadName.length()+stateString.length()+50);
                if (currentPosition > 0)
                {
                    sb.append(threadName).append(" --> ").append(stateString);
                    Log.information(sb.toString());
                    sb.setLength(0);
                }

                sb.append(threadName).append("Tag[").append(currentPosition).append("] = ").append(FixFieldHelper.getTagName(tag)).append("(").append(tag).append(") ").append(stateString);
                Log.information(sb.toString());
            }

            switch (tag)
            {
                case FixEmailThreadIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldEmailThreadID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldEmailThreadID = FixEmailThreadIDField.create(array, offset, length);
                    if (fieldEmailThreadID == null || !fieldEmailThreadID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixEmailTypeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldEmailType != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldEmailType = FixEmailTypeField.create(array, offset, length);
                    if (fieldEmailType == null || !fieldEmailType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixOrigTimeField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldOrigTime != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldOrigTime = FixOrigTimeField.create(array, offset, length);
                    if (fieldOrigTime == null || !fieldOrigTime.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixSubjectField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldSubject != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldSubject = FixSubjectField.create(array, offset, length);
                    if (fieldSubject == null || !fieldSubject.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixEncodedSubjectLenField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedSubjectLenField unusedByCboeField = FixEncodedSubjectLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixEncodedSubjectField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedSubjectField unusedByCboeField = FixEncodedSubjectField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }

                case FixOrderIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldOrderID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldOrderID = FixOrderIDField.create(array, offset, length);
                    if (fieldOrderID == null || !fieldOrderID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixClOrdIDField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldClOrdID != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldClOrdID = FixClOrdIDField.create(array, offset, length);
                    if (fieldClOrdID == null || !fieldClOrdID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixRawDataLengthField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldRawDataLength != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldRawDataLength = FixRawDataLengthField.create(array, offset, length);
                    if (fieldRawDataLength == null || !fieldRawDataLength.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixRawDataField.TagID:
                {
                    if (currentState != STATE_Field)
                    {
                        currentState = STATE_Field;
                    }
                  
                    if (fieldRawData != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldRawData = FixRawDataField.create(array, offset, length);
                    if (fieldRawData == null || !fieldRawData.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }

                case FixNoRoutingIDsField.TagID:
                {
                    if (fieldNoRoutingIDs != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRoutingIDs != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldNoRoutingIDs = FixNoRoutingIDsField.create(array, offset, length);
                    if (fieldNoRoutingIDs == null || !fieldNoRoutingIDs.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    currentState = STATE_RoutingIDsGroup;

                    numInGroup = fieldNoRoutingIDs.intValue();

                    groupRoutingIDs = new RoutingIDsGroup[numInGroup];
                    for (group = 0; group < numInGroup; group++)
                    {
                        groupRoutingIDs[group] = new RoutingIDsGroup();
                    }

                    continue;
                }
                case FixNoRelatedSymField.TagID:
                {
                    if (fieldNoRelatedSym != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldNoRelatedSym = FixNoRelatedSymField.create(array, offset, length);
                    if (fieldNoRelatedSym == null || !fieldNoRelatedSym.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    currentState = STATE_RelatedSymGroup;

                    numInGroup = fieldNoRelatedSym.intValue();

                    groupRelatedSym = new RelatedSymGroup[numInGroup];
                    for (group = 0; group < numInGroup; group++)
                    {
                        groupRelatedSym[group] = new RelatedSymGroup();
                    }

                    continue;
                }
                case FixLinesOfTextField.TagID:
                {
                    if (fieldLinesOfText != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupLinesOfText != null)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.DUPLICATE_TAG_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    fieldLinesOfText = FixLinesOfTextField.create(array, offset, length);
                    if (fieldLinesOfText == null || !fieldLinesOfText.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    currentState = STATE_LinesOfTextGroup;

                    numInGroup = fieldLinesOfText.intValue();

                    groupLinesOfText = new LinesOfTextGroup[numInGroup];
                    for (group = 0; group < numInGroup; group++)
                    {
                        groupLinesOfText[group] = new LinesOfTextGroup();
                    }

                    continue;
                }
                case FixRoutingTypeField.TagID:
                {
                    if (currentState != STATE_RoutingIDsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRoutingIDs >= groupRoutingIDs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRoutingIDs[current_groupRoutingIDs].fieldRoutingType != null)
                    {
                        current_groupRoutingIDs++;
                    }

                    groupRoutingIDs[current_groupRoutingIDs].fieldRoutingType = FixRoutingTypeField.create(array, offset, length);
                    if (groupRoutingIDs[current_groupRoutingIDs].fieldRoutingType == null || !groupRoutingIDs[current_groupRoutingIDs].fieldRoutingType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixRoutingIDField.TagID:
                {
                    if (currentState != STATE_RoutingIDsGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRoutingIDs >= groupRoutingIDs.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRoutingIDs[current_groupRoutingIDs].fieldRoutingID != null)
                    {
                        current_groupRoutingIDs++;
                    }

                    groupRoutingIDs[current_groupRoutingIDs].fieldRoutingID = FixRoutingIDField.create(array, offset, length);
                    if (groupRoutingIDs[current_groupRoutingIDs].fieldRoutingID == null || !groupRoutingIDs[current_groupRoutingIDs].fieldRoutingID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixRelatedSymField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldRelatedSym != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldRelatedSym = FixRelatedSymField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldRelatedSym == null || !groupRelatedSym[current_groupRelatedSym].fieldRelatedSym.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSymbolSfxField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldSymbolSfx != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldSymbolSfx = FixSymbolSfxField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldSymbolSfx == null || !groupRelatedSym[current_groupRelatedSym].fieldSymbolSfx.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSecurityIDField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldSecurityID != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldSecurityID = FixSecurityIDField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldSecurityID == null || !groupRelatedSym[current_groupRelatedSym].fieldSecurityID.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixIDSourceField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldIDSource != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldIDSource = FixIDSourceField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldIDSource == null || !groupRelatedSym[current_groupRelatedSym].fieldIDSource.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSecurityTypeField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldSecurityType != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldSecurityType = FixSecurityTypeField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldSecurityType == null || !groupRelatedSym[current_groupRelatedSym].fieldSecurityType.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixMaturityMonthYearField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldMaturityMonthYear != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldMaturityMonthYear = FixMaturityMonthYearField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldMaturityMonthYear == null || !groupRelatedSym[current_groupRelatedSym].fieldMaturityMonthYear.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixMaturityDayField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldMaturityDay != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldMaturityDay = FixMaturityDayField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldMaturityDay == null || !groupRelatedSym[current_groupRelatedSym].fieldMaturityDay.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixPutOrCallField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldPutOrCall != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldPutOrCall = FixPutOrCallField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldPutOrCall == null || !groupRelatedSym[current_groupRelatedSym].fieldPutOrCall.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixStrikePriceField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldStrikePrice != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldStrikePrice = FixStrikePriceField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldStrikePrice == null || !groupRelatedSym[current_groupRelatedSym].fieldStrikePrice.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixOptAttributeField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldOptAttribute != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldOptAttribute = FixOptAttributeField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldOptAttribute == null || !groupRelatedSym[current_groupRelatedSym].fieldOptAttribute.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixContractMultiplierField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldContractMultiplier != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldContractMultiplier = FixContractMultiplierField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldContractMultiplier == null || !groupRelatedSym[current_groupRelatedSym].fieldContractMultiplier.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixCouponRateField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldCouponRate != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldCouponRate = FixCouponRateField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldCouponRate == null || !groupRelatedSym[current_groupRelatedSym].fieldCouponRate.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixSecurityExchangeField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldSecurityExchange != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldSecurityExchange = FixSecurityExchangeField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldSecurityExchange == null || !groupRelatedSym[current_groupRelatedSym].fieldSecurityExchange.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixIssuerField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldIssuer != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldIssuer = FixIssuerField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldIssuer == null || !groupRelatedSym[current_groupRelatedSym].fieldIssuer.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixEncodedIssuerLenField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedIssuerLenField unusedByCboeField = FixEncodedIssuerLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixEncodedIssuerField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedIssuerField unusedByCboeField = FixEncodedIssuerField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixSecurityDescField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupRelatedSym[current_groupRelatedSym].fieldSecurityDesc != null)
                    {
                        current_groupRelatedSym++;
                    }

                    groupRelatedSym[current_groupRelatedSym].fieldSecurityDesc = FixSecurityDescField.create(array, offset, length);
                    if (groupRelatedSym[current_groupRelatedSym].fieldSecurityDesc == null || !groupRelatedSym[current_groupRelatedSym].fieldSecurityDesc.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixEncodedSecurityDescLenField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedSecurityDescLenField unusedByCboeField = FixEncodedSecurityDescLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixEncodedSecurityDescField.TagID:
                {
                    if (currentState != STATE_RelatedSymGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupRelatedSym >= groupRelatedSym.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedSecurityDescField unusedByCboeField = FixEncodedSecurityDescField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixTextField.TagID:
                {
                    if (currentState != STATE_LinesOfTextGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupLinesOfText >= groupLinesOfText.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (groupLinesOfText[current_groupLinesOfText].fieldText != null)
                    {
                        current_groupLinesOfText++;
                    }

                    groupLinesOfText[current_groupLinesOfText].fieldText = FixTextField.create(array, offset, length);
                    if (groupLinesOfText[current_groupLinesOfText].fieldText == null || !groupLinesOfText[current_groupLinesOfText].fieldText.hasValue())
                    {
                        foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    continue;
                }
                case FixEncodedTextLenField.TagID:
                {
                    if (currentState != STATE_LinesOfTextGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupLinesOfText >= groupLinesOfText.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedTextLenField unusedByCboeField = FixEncodedTextLenField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
                case FixEncodedTextField.TagID:
                {
                    if (currentState != STATE_LinesOfTextGroup)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_IN_INVALID_POSITION, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (current_groupLinesOfText >= groupLinesOfText.length)
                    {
                        foundErrors.add(BitHelper.packInt(FixException.TAG_OUT_OF_ORDER_WITHIN_GROUP, currentPosition));

                        if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                        {
                            return foundErrors;
                        }

                        continue;
                    }

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.VALIDATE_UNUSED_FIELDS))
                    {
                        FixEncodedTextField unusedByCboeField = FixEncodedTextField.create(array, offset, length);
                        if (unusedByCboeField == null || !unusedByCboeField.hasValue())
                        {
                            unusedByCboeField = null;

                            foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG_VALUE, currentPosition));

                            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                            {
                                return foundErrors;
                            }

                            continue;
                        }

                        unusedByCboeField = null;
                    }

                    continue;
                }
            }

            if (tag >= FixMessageIF.USER_DEFINED_TAGS_START)
            {
                if (currentState == STATE_Field || currentState == STATE_Header)
                {
                    if (additionalUserFields == null)
                    {
                        additionalUserFields = new ArrayList();
                    }

                    additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                    continue;
                }

                if (currentState == STATE_RoutingIDsGroup)
                {
                    if (current_groupRoutingIDs == groupRoutingIDs.length - 1)
                    {
                        if (additionalUserFields == null)
                        {
                            additionalUserFields = new ArrayList();
                        }

                        additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                        continue;
                    }

                    foundErrors.add(BitHelper.packInt(FixException.UNEXPECTED_USER_DEFINED_TAG_WITHIN_GROUP, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return foundErrors;
                    }
                    continue;
                }

                if (currentState == STATE_RelatedSymGroup)
                {
                    if (current_groupRelatedSym == groupRelatedSym.length - 1)
                    {
                        if (additionalUserFields == null)
                        {
                            additionalUserFields = new ArrayList();
                        }

                        additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                        continue;
                    }

                    foundErrors.add(BitHelper.packInt(FixException.UNEXPECTED_USER_DEFINED_TAG_WITHIN_GROUP, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return foundErrors;
                    }
                    continue;
                }

                if (currentState == STATE_LinesOfTextGroup)
                {
                    if (current_groupLinesOfText == groupLinesOfText.length - 1)
                    {
                        if (additionalUserFields == null)
                        {
                            additionalUserFields = new ArrayList();
                        }

                        additionalUserFields.add(new AdditionalUserField(tag, array, offset, length));
                        continue;
                    }

                    foundErrors.add(BitHelper.packInt(FixException.UNEXPECTED_USER_DEFINED_TAG_WITHIN_GROUP, currentPosition));

                    if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                    {
                        return foundErrors;
                    }
                    continue;
                }
            }

            if (!buildHeaderTrailer(array, tag, offset, length, currentState, currentPosition, foundErrors, validationFlags, debugFlags))
            {
                foundErrors.add(BitHelper.packInt(FixException.INVALID_TAG, currentPosition));

                if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
                {
                    return foundErrors;
                }

                continue;
            }
        }

        if (groupRoutingIDs != null && current_groupRoutingIDs != groupRoutingIDs.length - 1)
        {
            foundErrors.add(BitHelper.packInt(FixException.FEWER_GROUPS_THAN_SPECIFIED, currentPosition));

            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        if (groupRelatedSym != null && current_groupRelatedSym != groupRelatedSym.length - 1)
        {
            foundErrors.add(BitHelper.packInt(FixException.FEWER_GROUPS_THAN_SPECIFIED, currentPosition));

            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        if (groupLinesOfText != null && current_groupLinesOfText != groupLinesOfText.length - 1)
        {
            foundErrors.add(BitHelper.packInt(FixException.FEWER_GROUPS_THAN_SPECIFIED, currentPosition));

            if (BitHelper.isBitMaskSet(validationFlags, FixMessageIF.STOP_ON_FIRST_ERROR))
            {
                return foundErrors;
            }
        }

        if ((BitHelper.isBitMaskSet(debugFlags, FixSessionDebugIF.MESSAGE_SHOW_BUILD_TRANSITIONS)))
        {
            String threadName = Thread.currentThread().getName();
            String stateString = toStateString(currentState);
            StringBuilder sb = new StringBuilder(threadName.length()+stateString.length()+10);
            sb.append(threadName).append(" --> ").append(stateString);
            Log.information(sb.toString());
        }

        return foundErrors;
    }
}
