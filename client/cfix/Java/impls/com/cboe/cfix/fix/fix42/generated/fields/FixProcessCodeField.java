package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixProcessCodeField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [81] (known as ProcessCode).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixProcessCodeField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  81;
    public static final String TagIDAsString = "81";
    public static final char[] TagIDAsChars  = {'8','1'};
    public static final String TagName       = "ProcessCode";
    public static final String TagFixType    = "CHAR";

    public static final char    Regular                        = '0';
    public static final String  string_Regular                 = "0";
    public static final String  tagged_Regular                 = TagIDAsString + EQUALS + string_Regular + SOH;
    public static final char[]  taggedchars_Regular            = {'8','1', EQUALSchar, '0', SOHchar};
    public static final String  text_Regular                   = "Regular";
    public static final char    SoftDollar                     = '1';
    public static final String  string_SoftDollar              = "1";
    public static final String  tagged_SoftDollar              = TagIDAsString + EQUALS + string_SoftDollar + SOH;
    public static final char[]  taggedchars_SoftDollar         = {'8','1', EQUALSchar, '1', SOHchar};
    public static final String  text_SoftDollar                = "SoftDollar";
    public static final char    StepIn                         = '2';
    public static final String  string_StepIn                  = "2";
    public static final String  tagged_StepIn                  = TagIDAsString + EQUALS + string_StepIn + SOH;
    public static final char[]  taggedchars_StepIn             = {'8','1', EQUALSchar, '2', SOHchar};
    public static final String  text_StepIn                    = "StepIn";
    public static final char    StepOut                        = '3';
    public static final String  string_StepOut                 = "3";
    public static final String  tagged_StepOut                 = TagIDAsString + EQUALS + string_StepOut + SOH;
    public static final char[]  taggedchars_StepOut            = {'8','1', EQUALSchar, '3', SOHchar};
    public static final String  text_StepOut                   = "StepOut";
    public static final char    SoftDollarStepIn               = '4';
    public static final String  string_SoftDollarStepIn        = "4";
    public static final String  tagged_SoftDollarStepIn        = TagIDAsString + EQUALS + string_SoftDollarStepIn + SOH;
    public static final char[]  taggedchars_SoftDollarStepIn   = {'8','1', EQUALSchar, '4', SOHchar};
    public static final String  text_SoftDollarStepIn          = "SoftDollarStepIn";
    public static final char    SoftDollarStepOut              = '5';
    public static final String  string_SoftDollarStepOut       = "5";
    public static final String  tagged_SoftDollarStepOut       = TagIDAsString + EQUALS + string_SoftDollarStepOut + SOH;
    public static final char[]  taggedchars_SoftDollarStepOut  = {'8','1', EQUALSchar, '5', SOHchar};
    public static final String  text_SoftDollarStepOut         = "SoftDollarStepOut";
    public static final char    PlanSponsor                    = '6';
    public static final String  string_PlanSponsor             = "6";
    public static final String  tagged_PlanSponsor             = TagIDAsString + EQUALS + string_PlanSponsor + SOH;
    public static final char[]  taggedchars_PlanSponsor        = {'8','1', EQUALSchar, '6', SOHchar};
    public static final String  text_PlanSponsor               = "PlanSponsor";

    private static FixProcessCodeField flyweightRegular;
    public static final FixProcessCodeField flyweightRegular()
    {
        if (flyweightRegular == null)
        {
            synchronized(FixProcessCodeField.class)
            {
                if (flyweightRegular == null)
                {
                    flyweightRegular  = new FixProcessCodeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Regular;}
                     public String  getValueDescription()             {return text_Regular;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Regular).append("|").append(text_Regular).append("]").toString();}
                     public boolean isRegular()                       {return true;}
                     public char    charValue()                       {return Regular;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Regular);}
                    };
                }
            }
        }

        return flyweightRegular;
    }

    private static FixProcessCodeField flyweightSoftDollar;
    public static final FixProcessCodeField flyweightSoftDollar()
    {
        if (flyweightSoftDollar == null)
        {
            synchronized(FixProcessCodeField.class)
            {
                if (flyweightSoftDollar == null)
                {
                    flyweightSoftDollar  = new FixProcessCodeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_SoftDollar;}
                     public String  getValueDescription()             {return text_SoftDollar;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_SoftDollar).append("|").append(text_SoftDollar).append("]").toString();}
                     public boolean isSoftDollar()                    {return true;}
                     public char    charValue()                       {return SoftDollar;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_SoftDollar);}
                    };
                }
            }
        }

        return flyweightSoftDollar;
    }

    private static FixProcessCodeField flyweightStepIn;
    public static final FixProcessCodeField flyweightStepIn()
    {
        if (flyweightStepIn == null)
        {
            synchronized(FixProcessCodeField.class)
            {
                if (flyweightStepIn == null)
                {
                    flyweightStepIn  = new FixProcessCodeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_StepIn;}
                     public String  getValueDescription()             {return text_StepIn;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_StepIn).append("|").append(text_StepIn).append("]").toString();}
                     public boolean isStepIn()                        {return true;}
                     public char    charValue()                       {return StepIn;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_StepIn);}
                    };
                }
            }
        }

        return flyweightStepIn;
    }

    private static FixProcessCodeField flyweightStepOut;
    public static final FixProcessCodeField flyweightStepOut()
    {
        if (flyweightStepOut == null)
        {
            synchronized(FixProcessCodeField.class)
            {
                if (flyweightStepOut == null)
                {
                    flyweightStepOut  = new FixProcessCodeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_StepOut;}
                     public String  getValueDescription()             {return text_StepOut;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_StepOut).append("|").append(text_StepOut).append("]").toString();}
                     public boolean isStepOut()                       {return true;}
                     public char    charValue()                       {return StepOut;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_StepOut);}
                    };
                }
            }
        }

        return flyweightStepOut;
    }

    private static FixProcessCodeField flyweightSoftDollarStepIn;
    public static final FixProcessCodeField flyweightSoftDollarStepIn()
    {
        if (flyweightSoftDollarStepIn == null)
        {
            synchronized(FixProcessCodeField.class)
            {
                if (flyweightSoftDollarStepIn == null)
                {
                    flyweightSoftDollarStepIn  = new FixProcessCodeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_SoftDollarStepIn;}
                     public String  getValueDescription()             {return text_SoftDollarStepIn;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_SoftDollarStepIn).append("|").append(text_SoftDollarStepIn).append("]").toString();}
                     public boolean isSoftDollarStepIn()              {return true;}
                     public char    charValue()                       {return SoftDollarStepIn;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_SoftDollarStepIn);}
                    };
                }
            }
        }

        return flyweightSoftDollarStepIn;
    }

    private static FixProcessCodeField flyweightSoftDollarStepOut;
    public static final FixProcessCodeField flyweightSoftDollarStepOut()
    {
        if (flyweightSoftDollarStepOut == null)
        {
            synchronized(FixProcessCodeField.class)
            {
                if (flyweightSoftDollarStepOut == null)
                {
                    flyweightSoftDollarStepOut  = new FixProcessCodeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_SoftDollarStepOut;}
                     public String  getValueDescription()             {return text_SoftDollarStepOut;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_SoftDollarStepOut).append("|").append(text_SoftDollarStepOut).append("]").toString();}
                     public boolean isSoftDollarStepOut()             {return true;}
                     public char    charValue()                       {return SoftDollarStepOut;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_SoftDollarStepOut);}
                    };
                }
            }
        }

        return flyweightSoftDollarStepOut;
    }

    private static FixProcessCodeField flyweightPlanSponsor;
    public static final FixProcessCodeField flyweightPlanSponsor()
    {
        if (flyweightPlanSponsor == null)
        {
            synchronized(FixProcessCodeField.class)
            {
                if (flyweightPlanSponsor == null)
                {
                    flyweightPlanSponsor  = new FixProcessCodeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PlanSponsor;}
                     public String  getValueDescription()             {return text_PlanSponsor;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PlanSponsor).append("|").append(text_PlanSponsor).append("]").toString();}
                     public boolean isPlanSponsor()                   {return true;}
                     public char    charValue()                       {return PlanSponsor;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PlanSponsor);}
                    };
                }
            }
        }

        return flyweightPlanSponsor;
    }


    public boolean isRegular()             {return false;}
    public boolean isSoftDollar()          {return false;}
    public boolean isStepIn()              {return false;}
    public boolean isStepOut()             {return false;}
    public boolean isSoftDollarStepIn()    {return false;}
    public boolean isSoftDollarStepOut()   {return false;}
    public boolean isPlanSponsor()         {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixProcessCodeField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixProcessCodeField create(final char param)
    {
        switch (param)
        {                                                                                           
            case Regular:           return flyweightRegular();
            case SoftDollar:        return flyweightSoftDollar();
            case StepIn:            return flyweightStepIn();
            case StepOut:           return flyweightStepOut();
            case SoftDollarStepIn:  return flyweightSoftDollarStepIn();
            case SoftDollarStepOut: return flyweightSoftDollarStepOut();
            case PlanSponsor:       return flyweightPlanSponsor();
        }
                                                                                                    
        return null;
    }                                                                                               
}
