package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixSymbolField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [55] (known as Symbol).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;

public abstract class FixSymbolField implements FixFieldIF
{   
    public static final int    TagID         =  55;
    public static final String TagIDAsString = "55";
    public static final char[] TagIDAsChars  = {'5','5'};
    public static final String TagName       = "Symbol";
    public static final String TagFixType    = "STRING";

    public static final String  NotAvailable              = "NA";
    public static final String  string_NotAvailable       = NotAvailable;
    public static final char[]  chars_NotAvailable        = {'N','A'};
    public static final String  tagged_NotAvailable       = TagIDAsString + EQUALS + string_NotAvailable + SOH;
    public static final char[]  taggedchars_NotAvailable  = {'5','5', EQUALSchar, 'N','A', SOHchar};
    public static final String  text_NotAvailable         = "NotAvailable";

    private static FixSymbolField flyweightNotAvailable;
    public static final FixSymbolField flyweightNotAvailable()
    {
        if (flyweightNotAvailable == null)
        {
            synchronized(FixSymbolField.class)
            {
                if (flyweightNotAvailable == null)
                {
                    flyweightNotAvailable  = new FixSymbolField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NotAvailable;}
                     public String  getValueDescription()             {return text_NotAvailable;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NotAvailable).append("|").append(text_NotAvailable).append("]").toString();}
                     public boolean isNotAvailable()                  {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NotAvailable);}
                    };
                }
            }
        }

        return flyweightNotAvailable;
    }


    public boolean isNotAvailable()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixSymbolField create(char[] array, int offset, int length)
    {
        return create(new String(array, offset, length));
    }

    public static FixSymbolField create(final String paramString)
    {                                                                                               
        if (NotAvailable.equals(paramString)) return flyweightNotAvailable();
        return new FixSymbolField()
        {       public String  valueString = paramString;
                public boolean hasValue()                        {return valueString != null;}
                public String  getValue()                        {return valueString;}
                public String  getValueDescription()             {return valueString;}
        };
    }                                                                                               
}
