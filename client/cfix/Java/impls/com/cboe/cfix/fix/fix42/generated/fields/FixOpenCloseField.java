package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixOpenCloseField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [77] (known as OpenClose).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixOpenCloseField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  77;
    public static final String TagIDAsString = "77";
    public static final char[] TagIDAsChars  = {'7','7'};
    public static final String TagName       = "OpenClose";
    public static final String TagFixType    = "CHAR";

    public static final char    Open               = 'O';
    public static final String  string_Open        = "O";
    public static final String  tagged_Open        = TagIDAsString + EQUALS + string_Open + SOH;
    public static final char[]  taggedchars_Open   = {'7','7', EQUALSchar, 'O', SOHchar};
    public static final String  text_Open          = "Open";
    public static final char    Close              = 'C';
    public static final String  string_Close       = "C";
    public static final String  tagged_Close       = TagIDAsString + EQUALS + string_Close + SOH;
    public static final char[]  taggedchars_Close  = {'7','7', EQUALSchar, 'C', SOHchar};
    public static final String  text_Close         = "Close";

    private static FixOpenCloseField flyweightOpen;
    public static final FixOpenCloseField flyweightOpen()
    {
        if (flyweightOpen == null)
        {
            synchronized(FixOpenCloseField.class)
            {
                if (flyweightOpen == null)
                {
                    flyweightOpen  = new FixOpenCloseField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Open;}
                     public String  getValueDescription()             {return text_Open;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Open).append("|").append(text_Open).append("]").toString();}
                     public boolean isOpen()                          {return true;}
                     public char    charValue()                       {return Open;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Open);}
                    };
                }
            }
        }

        return flyweightOpen;
    }

    private static FixOpenCloseField flyweightClose;
    public static final FixOpenCloseField flyweightClose()
    {
        if (flyweightClose == null)
        {
            synchronized(FixOpenCloseField.class)
            {
                if (flyweightClose == null)
                {
                    flyweightClose  = new FixOpenCloseField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Close;}
                     public String  getValueDescription()             {return text_Close;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Close).append("|").append(text_Close).append("]").toString();}
                     public boolean isClose()                         {return true;}
                     public char    charValue()                       {return Close;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Close);}
                    };
                }
            }
        }

        return flyweightClose;
    }


    public boolean isOpen()    {return false;}
    public boolean isClose()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixOpenCloseField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixOpenCloseField create(final char param)
    {
        switch (param)
        {                                                                                           
            case Open:  return flyweightOpen();
            case Close: return flyweightClose();
        }
                                                                                                    
        return null;
    }                                                                                               
}
