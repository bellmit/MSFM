package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixTradingSessionIDField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [336] (known as TradingSessionID).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;

public abstract class FixTradingSessionIDField implements FixFieldIF
{   
    public static final int    TagID         =  336;
    public static final String TagIDAsString = "336";
    public static final char[] TagIDAsChars  = {'3','3','6'};
    public static final String TagName       = "TradingSessionID";
    public static final String TagFixType    = "STRING";

    public static final String  W_AM1                   = "W_AM1";
    public static final String  string_W_AM1            = W_AM1;
    public static final char[]  chars_W_AM1             = {'W','_','A','M','1'};
    public static final String  tagged_W_AM1            = TagIDAsString + EQUALS + string_W_AM1 + SOH;
    public static final char[]  taggedchars_W_AM1       = {'3','3','6', EQUALSchar, 'W','_','A','M','1', SOHchar};
    public static final String  text_W_AM1              = "W_AM1";
    public static final String  W_MAIN                  = "W_MAIN";
    public static final String  string_W_MAIN           = W_MAIN;
    public static final char[]  chars_W_MAIN            = {'W','_','M','A','I','N'};
    public static final String  tagged_W_MAIN           = TagIDAsString + EQUALS + string_W_MAIN + SOH;
    public static final char[]  taggedchars_W_MAIN      = {'3','3','6', EQUALSchar, 'W','_','M','A','I','N', SOHchar};
    public static final String  text_W_MAIN             = "W_MAIN";
    public static final String  ONE_MAIN                = "ONE_MAIN";
    public static final String  string_ONE_MAIN         = ONE_MAIN;
    public static final char[]  chars_ONE_MAIN          = {'O','N','E','_','M','A','I','N'};
    public static final String  tagged_ONE_MAIN         = TagIDAsString + EQUALS + string_ONE_MAIN + SOH;
    public static final char[]  taggedchars_ONE_MAIN    = {'3','3','6', EQUALSchar, 'O','N','E','_','M','A','I','N', SOHchar};
    public static final String  text_ONE_MAIN           = "ONE_MAIN";
    public static final String  CFE_MAIN                = "CFE_MAIN";
    public static final String  string_CFE_MAIN         = CFE_MAIN;
    public static final char[]  chars_CFE_MAIN          = {'C','F','E','_','M','A','I','N'};
    public static final String  tagged_CFE_MAIN         = TagIDAsString + EQUALS + string_CFE_MAIN + SOH;
    public static final char[]  taggedchars_CFE_MAIN    = {'3','3','6', EQUALSchar, 'C','F','E','_','M','A','I','N', SOHchar};
    public static final String  text_CFE_MAIN           = "CFE_MAIN";
    public static final String  COF_MAIN                = "COF_MAIN";
    public static final String  string_COF_MAIN         = COF_MAIN;
    public static final char[]  chars_COF_MAIN          = {'C','O','F','_','M','A','I','N'};
    public static final String  tagged_COF_MAIN         = TagIDAsString + EQUALS + string_COF_MAIN + SOH;
    public static final char[]  taggedchars_COF_MAIN    = {'3','3','6', EQUALSchar, 'C','O','F','_','M','A','I','N', SOHchar};
    public static final String  text_COF_MAIN           = "COF_MAIN";
    public static final String  Underlying              = "Underlying";
    public static final String  string_Underlying       = Underlying;
    public static final char[]  chars_Underlying        = {'U','n','d','e','r','l','y','i','n','g'};
    public static final String  tagged_Underlying       = TagIDAsString + EQUALS + string_Underlying + SOH;
    public static final char[]  taggedchars_Underlying  = {'3','3','6', EQUALSchar, 'U','n','d','e','r','l','y','i','n','g', SOHchar};
    public static final String  text_Underlying         = "Underlying";
    public static final String  STOCK_MD                = "STOCK_MD";
    public static final String  string_STOCK_MD         = STOCK_MD;
    public static final char[]  chars_STOCK_MD          = {'S','T','O','C','K','_','M','D'};
    public static final String  tagged_STOCK_MD         = TagIDAsString + EQUALS + string_STOCK_MD + SOH;
    public static final char[]  taggedchars_STOCK_MD    = {'3','3','6', EQUALSchar, 'S','T','O','C','K','_','M','D', SOHchar};
    public static final String  text_STOCK_MD           = "STOCK_MD";
    public static final String  W_STOCK                 = "W_STOCK";
    public static final String  string_W_STOCK          = W_STOCK;
    public static final char[]  chars_W_STOCK           = {'W','_','S','T','O','C','K'};
    public static final String  tagged_W_STOCK          = TagIDAsString + EQUALS + string_W_STOCK + SOH;
    public static final char[]  taggedchars_W_STOCK     = {'3','3','6', EQUALSchar, 'W','_','S','T','O','C','K', SOHchar};
    public static final String  text_W_STOCK            = "W_STOCK";
    public static final String  AMEX                    = "ASE_OLA";
    public static final String  string_AMEX             = AMEX;
    public static final char[]  chars_AMEX              = {'A','S','E','_','O','L','A'};
    public static final String  tagged_AMEX             = TagIDAsString + EQUALS + string_AMEX + SOH;
    public static final char[]  taggedchars_AMEX        = {'3','3','6', EQUALSchar, 'A','S','E','_','O','L','A', SOHchar};
    public static final String  text_AMEX               = "AMEX";
    public static final String  CBOE                    = "CBO_OLA";
    public static final String  string_CBOE             = CBOE;
    public static final char[]  chars_CBOE              = {'C','B','O','_','O','L','A'};
    public static final String  tagged_CBOE             = TagIDAsString + EQUALS + string_CBOE + SOH;
    public static final char[]  taggedchars_CBOE        = {'3','3','6', EQUALSchar, 'C','B','O','_','O','L','A', SOHchar};
    public static final String  text_CBOE               = "CBOE";
    public static final String  ISE                     = "ISX_OLA";
    public static final String  string_ISE              = ISE;
    public static final char[]  chars_ISE               = {'I','S','X','_','O','L','A'};
    public static final String  tagged_ISE              = TagIDAsString + EQUALS + string_ISE + SOH;
    public static final char[]  taggedchars_ISE         = {'3','3','6', EQUALSchar, 'I','S','X','_','O','L','A', SOHchar};
    public static final String  text_ISE                = "ISE";
    public static final String  PCX                     = "PSE_OLA";
    public static final String  string_PCX              = PCX;
    public static final char[]  chars_PCX               = {'P','S','E','_','O','L','A'};
    public static final String  tagged_PCX              = TagIDAsString + EQUALS + string_PCX + SOH;
    public static final char[]  taggedchars_PCX         = {'3','3','6', EQUALSchar, 'P','S','E','_','O','L','A', SOHchar};
    public static final String  text_PCX                = "PCX";
    public static final String  PHLX                    = "PHO_OLA";
    public static final String  string_PHLX             = PHLX;
    public static final char[]  chars_PHLX              = {'P','H','O','_','O','L','A'};
    public static final String  tagged_PHLX             = TagIDAsString + EQUALS + string_PHLX + SOH;
    public static final char[]  taggedchars_PHLX        = {'3','3','6', EQUALSchar, 'P','H','O','_','O','L','A', SOHchar};
    public static final String  text_PHLX               = "PHLX";

    private static FixTradingSessionIDField flyweightW_AM1;
    public static final FixTradingSessionIDField flyweightW_AM1()
    {
        if (flyweightW_AM1 == null)
        {
            synchronized(FixTradingSessionIDField.class)
            {
                if (flyweightW_AM1 == null)
                {
                    flyweightW_AM1  = new FixTradingSessionIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_W_AM1;}
                     public String  getValueDescription()             {return text_W_AM1;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_W_AM1).append("|").append(text_W_AM1).append("]").toString();}
                     public boolean isW_AM1()                         {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_W_AM1);}
                    };
                }
            }
        }

        return flyweightW_AM1;
    }

    private static FixTradingSessionIDField flyweightW_MAIN;
    public static final FixTradingSessionIDField flyweightW_MAIN()
    {
        if (flyweightW_MAIN == null)
        {
            synchronized(FixTradingSessionIDField.class)
            {
                if (flyweightW_MAIN == null)
                {
                    flyweightW_MAIN  = new FixTradingSessionIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_W_MAIN;}
                     public String  getValueDescription()             {return text_W_MAIN;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_W_MAIN).append("|").append(text_W_MAIN).append("]").toString();}
                     public boolean isW_MAIN()                        {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_W_MAIN);}
                    };
                }
            }
        }

        return flyweightW_MAIN;
    }

    private static FixTradingSessionIDField flyweightONE_MAIN;
    public static final FixTradingSessionIDField flyweightONE_MAIN()
    {
        if (flyweightONE_MAIN == null)
        {
            synchronized(FixTradingSessionIDField.class)
            {
                if (flyweightONE_MAIN == null)
                {
                    flyweightONE_MAIN  = new FixTradingSessionIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ONE_MAIN;}
                     public String  getValueDescription()             {return text_ONE_MAIN;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ONE_MAIN).append("|").append(text_ONE_MAIN).append("]").toString();}
                     public boolean isONE_MAIN()                      {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ONE_MAIN);}
                    };
                }
            }
        }

        return flyweightONE_MAIN;
    }

    private static FixTradingSessionIDField flyweightCFE_MAIN;
    public static final FixTradingSessionIDField flyweightCFE_MAIN()
    {
        if (flyweightCFE_MAIN == null)
        {
            synchronized(FixTradingSessionIDField.class)
            {
                if (flyweightCFE_MAIN == null)
                {
                    flyweightCFE_MAIN  = new FixTradingSessionIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_CFE_MAIN;}
                     public String  getValueDescription()             {return text_CFE_MAIN;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CFE_MAIN).append("|").append(text_CFE_MAIN).append("]").toString();}
                     public boolean isCFE_MAIN()                      {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_CFE_MAIN);}
                    };
                }
            }
        }

        return flyweightCFE_MAIN;
    }

    private static FixTradingSessionIDField flyweightCOF_MAIN;
    public static final FixTradingSessionIDField flyweightCOF_MAIN()
    {
        if (flyweightCOF_MAIN == null)
        {
            synchronized(FixTradingSessionIDField.class)
            {
                if (flyweightCOF_MAIN == null)
                {
                    flyweightCOF_MAIN  = new FixTradingSessionIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_COF_MAIN;}
                     public String  getValueDescription()             {return text_COF_MAIN;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_COF_MAIN).append("|").append(text_COF_MAIN).append("]").toString();}
                     public boolean isCOF_MAIN()                      {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_COF_MAIN);}
                    };
                }
            }
        }

        return flyweightCOF_MAIN;
    }

    private static FixTradingSessionIDField flyweightUnderlying;
    public static final FixTradingSessionIDField flyweightUnderlying()
    {
        if (flyweightUnderlying == null)
        {
            synchronized(FixTradingSessionIDField.class)
            {
                if (flyweightUnderlying == null)
                {
                    flyweightUnderlying  = new FixTradingSessionIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Underlying;}
                     public String  getValueDescription()             {return text_Underlying;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Underlying).append("|").append(text_Underlying).append("]").toString();}
                     public boolean isUnderlying()                    {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Underlying);}
                    };
                }
            }
        }

        return flyweightUnderlying;
    }

    private static FixTradingSessionIDField flyweightSTOCK_MD;
    public static final FixTradingSessionIDField flyweightSTOCK_MD()
    {
        if (flyweightSTOCK_MD == null)
        {
            synchronized(FixTradingSessionIDField.class)
            {
                if (flyweightSTOCK_MD == null)
                {
                    flyweightSTOCK_MD  = new FixTradingSessionIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_STOCK_MD;}
                     public String  getValueDescription()             {return text_STOCK_MD;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_STOCK_MD).append("|").append(text_STOCK_MD).append("]").toString();}
                     public boolean isSTOCK_MD()                      {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_STOCK_MD);}
                    };
                }
            }
        }

        return flyweightSTOCK_MD;
    }

    private static FixTradingSessionIDField flyweightW_STOCK;
    public static final FixTradingSessionIDField flyweightW_STOCK()
    {
        if (flyweightW_STOCK == null)
        {
            synchronized(FixTradingSessionIDField.class)
            {
                if (flyweightW_STOCK == null)
                {
                    flyweightW_STOCK  = new FixTradingSessionIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_W_STOCK;}
                     public String  getValueDescription()             {return text_W_STOCK;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_W_STOCK).append("|").append(text_W_STOCK).append("]").toString();}
                     public boolean isW_STOCK()                       {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_W_STOCK);}
                    };
                }
            }
        }

        return flyweightW_STOCK;
    }

    private static FixTradingSessionIDField flyweightAMEX;
    public static final FixTradingSessionIDField flyweightAMEX()
    {
        if (flyweightAMEX == null)
        {
            synchronized(FixTradingSessionIDField.class)
            {
                if (flyweightAMEX == null)
                {
                    flyweightAMEX  = new FixTradingSessionIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AMEX;}
                     public String  getValueDescription()             {return text_AMEX;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AMEX).append("|").append(text_AMEX).append("]").toString();}
                     public boolean isAMEX()                          {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AMEX);}
                    };
                }
            }
        }

        return flyweightAMEX;
    }

    private static FixTradingSessionIDField flyweightCBOE;
    public static final FixTradingSessionIDField flyweightCBOE()
    {
        if (flyweightCBOE == null)
        {
            synchronized(FixTradingSessionIDField.class)
            {
                if (flyweightCBOE == null)
                {
                    flyweightCBOE  = new FixTradingSessionIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_CBOE;}
                     public String  getValueDescription()             {return text_CBOE;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_CBOE).append("|").append(text_CBOE).append("]").toString();}
                     public boolean isCBOE()                          {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_CBOE);}
                    };
                }
            }
        }

        return flyweightCBOE;
    }

    private static FixTradingSessionIDField flyweightISE;
    public static final FixTradingSessionIDField flyweightISE()
    {
        if (flyweightISE == null)
        {
            synchronized(FixTradingSessionIDField.class)
            {
                if (flyweightISE == null)
                {
                    flyweightISE  = new FixTradingSessionIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ISE;}
                     public String  getValueDescription()             {return text_ISE;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ISE).append("|").append(text_ISE).append("]").toString();}
                     public boolean isISE()                           {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ISE);}
                    };
                }
            }
        }

        return flyweightISE;
    }

    private static FixTradingSessionIDField flyweightPCX;
    public static final FixTradingSessionIDField flyweightPCX()
    {
        if (flyweightPCX == null)
        {
            synchronized(FixTradingSessionIDField.class)
            {
                if (flyweightPCX == null)
                {
                    flyweightPCX  = new FixTradingSessionIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PCX;}
                     public String  getValueDescription()             {return text_PCX;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PCX).append("|").append(text_PCX).append("]").toString();}
                     public boolean isPCX()                           {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PCX);}
                    };
                }
            }
        }

        return flyweightPCX;
    }

    private static FixTradingSessionIDField flyweightPHLX;
    public static final FixTradingSessionIDField flyweightPHLX()
    {
        if (flyweightPHLX == null)
        {
            synchronized(FixTradingSessionIDField.class)
            {
                if (flyweightPHLX == null)
                {
                    flyweightPHLX  = new FixTradingSessionIDField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PHLX;}
                     public String  getValueDescription()             {return text_PHLX;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PHLX).append("|").append(text_PHLX).append("]").toString();}
                     public boolean isPHLX()                          {return true;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PHLX);}
                    };
                }
            }
        }

        return flyweightPHLX;
    }


    public boolean isW_AM1()        {return false;}
    public boolean isW_MAIN()       {return false;}
    public boolean isONE_MAIN()     {return false;}
    public boolean isCFE_MAIN()     {return false;}
    public boolean isCOF_MAIN()     {return false;}
    public boolean isUnderlying()   {return false;}
    public boolean isSTOCK_MD()     {return false;}
    public boolean isW_STOCK()      {return false;}
    public boolean isAMEX()         {return false;}
    public boolean isCBOE()         {return false;}
    public boolean isISE()          {return false;}
    public boolean isPCX()          {return false;}
    public boolean isPHLX()         {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixTradingSessionIDField create(char[] array, int offset, int length)
    {
        return create(new String(array, offset, length));
    }

    public static FixTradingSessionIDField create(final String paramString)
    {                                                                                               
        if (W_AM1.equals(paramString)) return flyweightW_AM1();
        if (W_MAIN.equals(paramString)) return flyweightW_MAIN();
        if (ONE_MAIN.equals(paramString)) return flyweightONE_MAIN();
        if (CFE_MAIN.equals(paramString)) return flyweightCFE_MAIN();
        if (COF_MAIN.equals(paramString)) return flyweightCOF_MAIN();
        if (Underlying.equals(paramString)) return flyweightUnderlying();
        if (STOCK_MD.equals(paramString)) return flyweightSTOCK_MD();
        if (W_STOCK.equals(paramString)) return flyweightW_STOCK();
        if (AMEX.equals(paramString)) return flyweightAMEX();
        if (CBOE.equals(paramString)) return flyweightCBOE();
        if (ISE.equals(paramString))  return flyweightISE();
        if (PCX.equals(paramString))  return flyweightPCX();
        if (PHLX.equals(paramString)) return flyweightPHLX();
        return new FixTradingSessionIDField()
        {       public String  valueString = paramString;
                public boolean hasValue()                        {return valueString != null;}
                public String  getValue()                        {return valueString;}
                public String  getValueDescription()             {return valueString;}
        };
    }                                                                                               
}
