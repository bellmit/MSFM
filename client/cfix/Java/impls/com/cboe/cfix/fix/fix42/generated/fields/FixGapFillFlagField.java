package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixGapFillFlagField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [123] (known as GapFillFlag).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;

public abstract class FixGapFillFlagField implements FixFieldIF, HasBooleanValueIF
{   
    public static final int    TagID         =  123;
    public static final String TagIDAsString = "123";
    public static final char[] TagIDAsChars  = {'1','2','3'};
    public static final String TagName       = "GapFillFlag";
    public static final String TagFixType    = "BOOLEAN";

    public static final boolean GapFillOnly                 = true;
    public static final String  string_GapFillOnly          = FIX_YES;
    public static final String  tagged_GapFillOnly          = TagIDAsString + EQUALS + string_GapFillOnly + SOH;
    public static final char    char_GapFillOnly            = 'Y';
    public static final char[]  taggedchars_GapFillOnly     = {'1','2','3', EQUALSchar, 'Y', SOHchar};
    public static final String  text_GapFillOnly            = "GapFillOnly";
    public static final boolean MsgSeqNumReset              = false;
    public static final String  string_MsgSeqNumReset       = FIX_NO;
    public static final String  tagged_MsgSeqNumReset       = TagIDAsString + EQUALS + string_MsgSeqNumReset + SOH;
    public static final char    char_MsgSeqNumReset         = 'N';
    public static final char[]  taggedchars_MsgSeqNumReset  = {'1','2','3', EQUALSchar, 'N', SOHchar};
    public static final String  text_MsgSeqNumReset         = "MsgSeqNumReset";

    private static FixGapFillFlagField flyweightGapFillOnly;
    public static final FixGapFillFlagField flyweightGapFillOnly()
    {
        if (flyweightGapFillOnly == null)
        {
            synchronized(FixGapFillFlagField.class)
            {
                if (flyweightGapFillOnly == null)
                {
                    flyweightGapFillOnly  = new FixGapFillFlagField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_GapFillOnly;}
                     public String  getValueDescription()             {return text_GapFillOnly;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_GapFillOnly).append("|").append(text_GapFillOnly).append("]").toString();}
                     public boolean isGapFillOnly()                   {return true;}
                     public boolean booleanValue()                    {return GapFillOnly;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_GapFillOnly);}
                    };
                }
            }
        }

        return flyweightGapFillOnly;
    }

    private static FixGapFillFlagField flyweightMsgSeqNumReset;
    public static final FixGapFillFlagField flyweightMsgSeqNumReset()
    {
        if (flyweightMsgSeqNumReset == null)
        {
            synchronized(FixGapFillFlagField.class)
            {
                if (flyweightMsgSeqNumReset == null)
                {
                    flyweightMsgSeqNumReset  = new FixGapFillFlagField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_MsgSeqNumReset;}
                     public String  getValueDescription()             {return text_MsgSeqNumReset;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_MsgSeqNumReset).append("|").append(text_MsgSeqNumReset).append("]").toString();}
                     public boolean isMsgSeqNumReset()                {return true;}
                     public boolean booleanValue()                    {return MsgSeqNumReset;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_MsgSeqNumReset);}
                    };
                }
            }
        }

        return flyweightMsgSeqNumReset;
    }


    public boolean isGapFillOnly()      {return false;}
    public boolean isMsgSeqNumReset()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixGapFillFlagField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {                                                                                           
            if (array[offset] == char_GapFillOnly)    return flyweightGapFillOnly();
            if (array[offset] == char_MsgSeqNumReset) return flyweightMsgSeqNumReset();
        }
        return null;
    }

    public static final char[] truefalse_Flyweight  = new char[] {FixFieldIF.FIX_YESchar, FixFieldIF.FIX_NOchar};
    public static FixGapFillFlagField create(boolean param)
    {
        return create(truefalse_Flyweight, param ? 0 : 1, 1);
    }                                                                                               
}
