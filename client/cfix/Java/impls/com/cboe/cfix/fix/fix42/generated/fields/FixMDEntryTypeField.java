package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixMDEntryTypeField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [269] (known as MDEntryType).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixMDEntryTypeField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  269;
    public static final String TagIDAsString = "269";
    public static final char[] TagIDAsChars  = {'2','6','9'};
    public static final String TagName       = "MDEntryType";
    public static final String TagFixType    = "CHAR";

    public static final char    Bid                                  = '0';
    public static final String  string_Bid                           = "0";
    public static final String  tagged_Bid                           = TagIDAsString + EQUALS + string_Bid + SOH;
    public static final char[]  taggedchars_Bid                      = {'2','6','9', EQUALSchar, '0', SOHchar};
    public static final String  text_Bid                             = "Bid";
    public static final int     bitIndex_Bid                          = 1;
    public static final char    Offer                                = '1';
    public static final String  string_Offer                         = "1";
    public static final String  tagged_Offer                         = TagIDAsString + EQUALS + string_Offer + SOH;
    public static final char[]  taggedchars_Offer                    = {'2','6','9', EQUALSchar, '1', SOHchar};
    public static final String  text_Offer                           = "Offer";
    public static final int     bitIndex_Offer                        = 2;
    public static final char    Trade                                = '2';
    public static final String  string_Trade                         = "2";
    public static final String  tagged_Trade                         = TagIDAsString + EQUALS + string_Trade + SOH;
    public static final char[]  taggedchars_Trade                    = {'2','6','9', EQUALSchar, '2', SOHchar};
    public static final String  text_Trade                           = "Trade";
    public static final int     bitIndex_Trade                        = 3;
    public static final char    IndexValue                           = '3';
    public static final String  string_IndexValue                    = "3";
    public static final String  tagged_IndexValue                    = TagIDAsString + EQUALS + string_IndexValue + SOH;
    public static final char[]  taggedchars_IndexValue               = {'2','6','9', EQUALSchar, '3', SOHchar};
    public static final String  text_IndexValue                      = "IndexValue";
    public static final int     bitIndex_IndexValue                   = 4;
    public static final char    OpeningPrice                         = '4';
    public static final String  string_OpeningPrice                  = "4";
    public static final String  tagged_OpeningPrice                  = TagIDAsString + EQUALS + string_OpeningPrice + SOH;
    public static final char[]  taggedchars_OpeningPrice             = {'2','6','9', EQUALSchar, '4', SOHchar};
    public static final String  text_OpeningPrice                    = "OpeningPrice";
    public static final int     bitIndex_OpeningPrice                 = 5;
    public static final char    ClosingPrice                         = '5';
    public static final String  string_ClosingPrice                  = "5";
    public static final String  tagged_ClosingPrice                  = TagIDAsString + EQUALS + string_ClosingPrice + SOH;
    public static final char[]  taggedchars_ClosingPrice             = {'2','6','9', EQUALSchar, '5', SOHchar};
    public static final String  text_ClosingPrice                    = "ClosingPrice";
    public static final int     bitIndex_ClosingPrice                 = 6;
    public static final char    SettlementPrice                      = '6';
    public static final String  string_SettlementPrice               = "6";
    public static final String  tagged_SettlementPrice               = TagIDAsString + EQUALS + string_SettlementPrice + SOH;
    public static final char[]  taggedchars_SettlementPrice          = {'2','6','9', EQUALSchar, '6', SOHchar};
    public static final String  text_SettlementPrice                 = "SettlementPrice";
    public static final int     bitIndex_SettlementPrice              = 7;
    public static final char    TradingSessionHighPrice              = '7';
    public static final String  string_TradingSessionHighPrice       = "7";
    public static final String  tagged_TradingSessionHighPrice       = TagIDAsString + EQUALS + string_TradingSessionHighPrice + SOH;
    public static final char[]  taggedchars_TradingSessionHighPrice  = {'2','6','9', EQUALSchar, '7', SOHchar};
    public static final String  text_TradingSessionHighPrice         = "TradingSessionHighPrice";
    public static final int     bitIndex_TradingSessionHighPrice      = 8;
    public static final char    TradingSessionLowPrice               = '8';
    public static final String  string_TradingSessionLowPrice        = "8";
    public static final String  tagged_TradingSessionLowPrice        = TagIDAsString + EQUALS + string_TradingSessionLowPrice + SOH;
    public static final char[]  taggedchars_TradingSessionLowPrice   = {'2','6','9', EQUALSchar, '8', SOHchar};
    public static final String  text_TradingSessionLowPrice          = "TradingSessionLowPrice";
    public static final int     bitIndex_TradingSessionLowPrice       = 9;
    public static final char    TradingSessionVwapPrice              = '9';
    public static final String  string_TradingSessionVwapPrice       = "9";
    public static final String  tagged_TradingSessionVwapPrice       = TagIDAsString + EQUALS + string_TradingSessionVwapPrice + SOH;
    public static final char[]  taggedchars_TradingSessionVwapPrice  = {'2','6','9', EQUALSchar, '9', SOHchar};
    public static final String  text_TradingSessionVwapPrice         = "TradingSessionVwapPrice";
    public static final int     bitIndex_TradingSessionVwapPrice      = 10;

    private static FixMDEntryTypeField flyweightBid;
    public static final FixMDEntryTypeField flyweightBid()
    {
        if (flyweightBid == null)
        {
            synchronized(FixMDEntryTypeField.class)
            {
                if (flyweightBid == null)
                {
                    flyweightBid  = new FixMDEntryTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Bid;}
                     public String  getValueDescription()             {return text_Bid;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Bid).append("|").append(text_Bid).append("]").toString();}
                     public boolean isBid()                           {return true;}
                     public char    charValue()                       {return Bid;}
                     public int     bitIndex()                        {return bitIndex_Bid;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Bid);}
                    };
                }
            }
        }

        return flyweightBid;
    }

    private static FixMDEntryTypeField flyweightOffer;
    public static final FixMDEntryTypeField flyweightOffer()
    {
        if (flyweightOffer == null)
        {
            synchronized(FixMDEntryTypeField.class)
            {
                if (flyweightOffer == null)
                {
                    flyweightOffer  = new FixMDEntryTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Offer;}
                     public String  getValueDescription()             {return text_Offer;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Offer).append("|").append(text_Offer).append("]").toString();}
                     public boolean isOffer()                         {return true;}
                     public char    charValue()                       {return Offer;}
                     public int     bitIndex()                        {return bitIndex_Offer;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Offer);}
                    };
                }
            }
        }

        return flyweightOffer;
    }

    private static FixMDEntryTypeField flyweightTrade;
    public static final FixMDEntryTypeField flyweightTrade()
    {
        if (flyweightTrade == null)
        {
            synchronized(FixMDEntryTypeField.class)
            {
                if (flyweightTrade == null)
                {
                    flyweightTrade  = new FixMDEntryTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Trade;}
                     public String  getValueDescription()             {return text_Trade;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Trade).append("|").append(text_Trade).append("]").toString();}
                     public boolean isTrade()                         {return true;}
                     public char    charValue()                       {return Trade;}
                     public int     bitIndex()                        {return bitIndex_Trade;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Trade);}
                    };
                }
            }
        }

        return flyweightTrade;
    }

    private static FixMDEntryTypeField flyweightIndexValue;
    public static final FixMDEntryTypeField flyweightIndexValue()
    {
        if (flyweightIndexValue == null)
        {
            synchronized(FixMDEntryTypeField.class)
            {
                if (flyweightIndexValue == null)
                {
                    flyweightIndexValue  = new FixMDEntryTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_IndexValue;}
                     public String  getValueDescription()             {return text_IndexValue;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_IndexValue).append("|").append(text_IndexValue).append("]").toString();}
                     public boolean isIndexValue()                    {return true;}
                     public char    charValue()                       {return IndexValue;}
                     public int     bitIndex()                        {return bitIndex_IndexValue;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_IndexValue);}
                    };
                }
            }
        }

        return flyweightIndexValue;
    }

    private static FixMDEntryTypeField flyweightOpeningPrice;
    public static final FixMDEntryTypeField flyweightOpeningPrice()
    {
        if (flyweightOpeningPrice == null)
        {
            synchronized(FixMDEntryTypeField.class)
            {
                if (flyweightOpeningPrice == null)
                {
                    flyweightOpeningPrice  = new FixMDEntryTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_OpeningPrice;}
                     public String  getValueDescription()             {return text_OpeningPrice;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OpeningPrice).append("|").append(text_OpeningPrice).append("]").toString();}
                     public boolean isOpeningPrice()                  {return true;}
                     public char    charValue()                       {return OpeningPrice;}
                     public int     bitIndex()                        {return bitIndex_OpeningPrice;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OpeningPrice);}
                    };
                }
            }
        }

        return flyweightOpeningPrice;
    }

    private static FixMDEntryTypeField flyweightClosingPrice;
    public static final FixMDEntryTypeField flyweightClosingPrice()
    {
        if (flyweightClosingPrice == null)
        {
            synchronized(FixMDEntryTypeField.class)
            {
                if (flyweightClosingPrice == null)
                {
                    flyweightClosingPrice  = new FixMDEntryTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ClosingPrice;}
                     public String  getValueDescription()             {return text_ClosingPrice;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ClosingPrice).append("|").append(text_ClosingPrice).append("]").toString();}
                     public boolean isClosingPrice()                  {return true;}
                     public char    charValue()                       {return ClosingPrice;}
                     public int     bitIndex()                        {return bitIndex_ClosingPrice;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ClosingPrice);}
                    };
                }
            }
        }

        return flyweightClosingPrice;
    }

    private static FixMDEntryTypeField flyweightSettlementPrice;
    public static final FixMDEntryTypeField flyweightSettlementPrice()
    {
        if (flyweightSettlementPrice == null)
        {
            synchronized(FixMDEntryTypeField.class)
            {
                if (flyweightSettlementPrice == null)
                {
                    flyweightSettlementPrice  = new FixMDEntryTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_SettlementPrice;}
                     public String  getValueDescription()             {return text_SettlementPrice;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_SettlementPrice).append("|").append(text_SettlementPrice).append("]").toString();}
                     public boolean isSettlementPrice()               {return true;}
                     public char    charValue()                       {return SettlementPrice;}
                     public int     bitIndex()                        {return bitIndex_SettlementPrice;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_SettlementPrice);}
                    };
                }
            }
        }

        return flyweightSettlementPrice;
    }

    private static FixMDEntryTypeField flyweightTradingSessionHighPrice;
    public static final FixMDEntryTypeField flyweightTradingSessionHighPrice()
    {
        if (flyweightTradingSessionHighPrice == null)
        {
            synchronized(FixMDEntryTypeField.class)
            {
                if (flyweightTradingSessionHighPrice == null)
                {
                    flyweightTradingSessionHighPrice  = new FixMDEntryTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_TradingSessionHighPrice;}
                     public String  getValueDescription()             {return text_TradingSessionHighPrice;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_TradingSessionHighPrice).append("|").append(text_TradingSessionHighPrice).append("]").toString();}
                     public boolean isTradingSessionHighPrice()       {return true;}
                     public char    charValue()                       {return TradingSessionHighPrice;}
                     public int     bitIndex()                        {return bitIndex_TradingSessionHighPrice;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_TradingSessionHighPrice);}
                    };
                }
            }
        }

        return flyweightTradingSessionHighPrice;
    }

    private static FixMDEntryTypeField flyweightTradingSessionLowPrice;
    public static final FixMDEntryTypeField flyweightTradingSessionLowPrice()
    {
        if (flyweightTradingSessionLowPrice == null)
        {
            synchronized(FixMDEntryTypeField.class)
            {
                if (flyweightTradingSessionLowPrice == null)
                {
                    flyweightTradingSessionLowPrice  = new FixMDEntryTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_TradingSessionLowPrice;}
                     public String  getValueDescription()             {return text_TradingSessionLowPrice;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_TradingSessionLowPrice).append("|").append(text_TradingSessionLowPrice).append("]").toString();}
                     public boolean isTradingSessionLowPrice()        {return true;}
                     public char    charValue()                       {return TradingSessionLowPrice;}
                     public int     bitIndex()                        {return bitIndex_TradingSessionLowPrice;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_TradingSessionLowPrice);}
                    };
                }
            }
        }

        return flyweightTradingSessionLowPrice;
    }

    private static FixMDEntryTypeField flyweightTradingSessionVwapPrice;
    public static final FixMDEntryTypeField flyweightTradingSessionVwapPrice()
    {
        if (flyweightTradingSessionVwapPrice == null)
        {
            synchronized(FixMDEntryTypeField.class)
            {
                if (flyweightTradingSessionVwapPrice == null)
                {
                    flyweightTradingSessionVwapPrice  = new FixMDEntryTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_TradingSessionVwapPrice;}
                     public String  getValueDescription()             {return text_TradingSessionVwapPrice;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_TradingSessionVwapPrice).append("|").append(text_TradingSessionVwapPrice).append("]").toString();}
                     public boolean isTradingSessionVwapPrice()       {return true;}
                     public char    charValue()                       {return TradingSessionVwapPrice;}
                     public int     bitIndex()                        {return bitIndex_TradingSessionVwapPrice;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_TradingSessionVwapPrice);}
                    };
                }
            }
        }

        return flyweightTradingSessionVwapPrice;
    }


    public boolean isBid()                       {return false;}
    public boolean isOffer()                     {return false;}
    public boolean isTrade()                     {return false;}
    public boolean isIndexValue()                {return false;}
    public boolean isOpeningPrice()              {return false;}
    public boolean isClosingPrice()              {return false;}
    public boolean isSettlementPrice()           {return false;}
    public boolean isTradingSessionHighPrice()   {return false;}
    public boolean isTradingSessionLowPrice()    {return false;}
    public boolean isTradingSessionVwapPrice()   {return false;}

    public       int    bitIndex()       {return 0;}
            
    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixMDEntryTypeField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixMDEntryTypeField create(final char param)
    {
        switch (param)
        {                                                                                           
            case Bid:                     return flyweightBid();
            case Offer:                   return flyweightOffer();
            case Trade:                   return flyweightTrade();
            case IndexValue:              return flyweightIndexValue();
            case OpeningPrice:            return flyweightOpeningPrice();
            case ClosingPrice:            return flyweightClosingPrice();
            case SettlementPrice:         return flyweightSettlementPrice();
            case TradingSessionHighPrice: return flyweightTradingSessionHighPrice();
            case TradingSessionLowPrice:  return flyweightTradingSessionLowPrice();
            case TradingSessionVwapPrice: return flyweightTradingSessionVwapPrice();
        }
                                                                                                    
        return null;
    }                                                                                               
}
