package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixExecTypeField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [150] (known as ExecType).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixExecTypeField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  150;
    public static final String TagIDAsString = "150";
    public static final char[] TagIDAsChars  = {'1','5','0'};
    public static final String TagName       = "ExecType";
    public static final String TagFixType    = "CHAR";

    public static final char    New                         = '0';
    public static final String  string_New                  = "0";
    public static final String  tagged_New                  = TagIDAsString + EQUALS + string_New + SOH;
    public static final char[]  taggedchars_New             = {'1','5','0', EQUALSchar, '0', SOHchar};
    public static final String  text_New                    = "New";
    public static final char    PartialFill                 = '1';
    public static final String  string_PartialFill          = "1";
    public static final String  tagged_PartialFill          = TagIDAsString + EQUALS + string_PartialFill + SOH;
    public static final char[]  taggedchars_PartialFill     = {'1','5','0', EQUALSchar, '1', SOHchar};
    public static final String  text_PartialFill            = "PartialFill";
    public static final char    Fill                        = '2';
    public static final String  string_Fill                 = "2";
    public static final String  tagged_Fill                 = TagIDAsString + EQUALS + string_Fill + SOH;
    public static final char[]  taggedchars_Fill            = {'1','5','0', EQUALSchar, '2', SOHchar};
    public static final String  text_Fill                   = "Fill";
    public static final char    DoneForDay                  = '3';
    public static final String  string_DoneForDay           = "3";
    public static final String  tagged_DoneForDay           = TagIDAsString + EQUALS + string_DoneForDay + SOH;
    public static final char[]  taggedchars_DoneForDay      = {'1','5','0', EQUALSchar, '3', SOHchar};
    public static final String  text_DoneForDay             = "DoneForDay";
    public static final char    Canceled                    = '4';
    public static final String  string_Canceled             = "4";
    public static final String  tagged_Canceled             = TagIDAsString + EQUALS + string_Canceled + SOH;
    public static final char[]  taggedchars_Canceled        = {'1','5','0', EQUALSchar, '4', SOHchar};
    public static final String  text_Canceled               = "Canceled";
    public static final char    Replace                     = '5';
    public static final String  string_Replace              = "5";
    public static final String  tagged_Replace              = TagIDAsString + EQUALS + string_Replace + SOH;
    public static final char[]  taggedchars_Replace         = {'1','5','0', EQUALSchar, '5', SOHchar};
    public static final String  text_Replace                = "Replace";
    public static final char    PendingCancel               = '6';
    public static final String  string_PendingCancel        = "6";
    public static final String  tagged_PendingCancel        = TagIDAsString + EQUALS + string_PendingCancel + SOH;
    public static final char[]  taggedchars_PendingCancel   = {'1','5','0', EQUALSchar, '6', SOHchar};
    public static final String  text_PendingCancel          = "PendingCancel";
    public static final char    Stopped                     = '7';
    public static final String  string_Stopped              = "7";
    public static final String  tagged_Stopped              = TagIDAsString + EQUALS + string_Stopped + SOH;
    public static final char[]  taggedchars_Stopped         = {'1','5','0', EQUALSchar, '7', SOHchar};
    public static final String  text_Stopped                = "Stopped";
    public static final char    Rejected                    = '8';
    public static final String  string_Rejected             = "8";
    public static final String  tagged_Rejected             = TagIDAsString + EQUALS + string_Rejected + SOH;
    public static final char[]  taggedchars_Rejected        = {'1','5','0', EQUALSchar, '8', SOHchar};
    public static final String  text_Rejected               = "Rejected";
    public static final char    Suspended                   = '9';
    public static final String  string_Suspended            = "9";
    public static final String  tagged_Suspended            = TagIDAsString + EQUALS + string_Suspended + SOH;
    public static final char[]  taggedchars_Suspended       = {'1','5','0', EQUALSchar, '9', SOHchar};
    public static final String  text_Suspended              = "Suspended";
    public static final char    PendingNew                  = 'A';
    public static final String  string_PendingNew           = "A";
    public static final String  tagged_PendingNew           = TagIDAsString + EQUALS + string_PendingNew + SOH;
    public static final char[]  taggedchars_PendingNew      = {'1','5','0', EQUALSchar, 'A', SOHchar};
    public static final String  text_PendingNew             = "PendingNew";
    public static final char    Calculated                  = 'B';
    public static final String  string_Calculated           = "B";
    public static final String  tagged_Calculated           = TagIDAsString + EQUALS + string_Calculated + SOH;
    public static final char[]  taggedchars_Calculated      = {'1','5','0', EQUALSchar, 'B', SOHchar};
    public static final String  text_Calculated             = "Calculated";
    public static final char    Expired                     = 'C';
    public static final String  string_Expired              = "C";
    public static final String  tagged_Expired              = TagIDAsString + EQUALS + string_Expired + SOH;
    public static final char[]  taggedchars_Expired         = {'1','5','0', EQUALSchar, 'C', SOHchar};
    public static final String  text_Expired                = "Expired";
    public static final char    Restated                    = 'D';
    public static final String  string_Restated             = "D";
    public static final String  tagged_Restated             = TagIDAsString + EQUALS + string_Restated + SOH;
    public static final char[]  taggedchars_Restated        = {'1','5','0', EQUALSchar, 'D', SOHchar};
    public static final String  text_Restated               = "Restated";
    public static final char    PendingReplace              = 'E';
    public static final String  string_PendingReplace       = "E";
    public static final String  tagged_PendingReplace       = TagIDAsString + EQUALS + string_PendingReplace + SOH;
    public static final char[]  taggedchars_PendingReplace  = {'1','5','0', EQUALSchar, 'E', SOHchar};
    public static final String  text_PendingReplace         = "PendingReplace";

    private static FixExecTypeField flyweightNew;
    public static final FixExecTypeField flyweightNew()
    {
        if (flyweightNew == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightNew == null)
                {
                    flyweightNew  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_New;}
                     public String  getValueDescription()             {return text_New;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_New).append("|").append(text_New).append("]").toString();}
                     public boolean isNew()                           {return true;}
                     public char    charValue()                       {return New;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_New);}
                    };
                }
            }
        }

        return flyweightNew;
    }

    private static FixExecTypeField flyweightPartialFill;
    public static final FixExecTypeField flyweightPartialFill()
    {
        if (flyweightPartialFill == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightPartialFill == null)
                {
                    flyweightPartialFill  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PartialFill;}
                     public String  getValueDescription()             {return text_PartialFill;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PartialFill).append("|").append(text_PartialFill).append("]").toString();}
                     public boolean isPartialFill()                   {return true;}
                     public char    charValue()                       {return PartialFill;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PartialFill);}
                    };
                }
            }
        }

        return flyweightPartialFill;
    }

    private static FixExecTypeField flyweightFill;
    public static final FixExecTypeField flyweightFill()
    {
        if (flyweightFill == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightFill == null)
                {
                    flyweightFill  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Fill;}
                     public String  getValueDescription()             {return text_Fill;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Fill).append("|").append(text_Fill).append("]").toString();}
                     public boolean isFill()                          {return true;}
                     public char    charValue()                       {return Fill;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Fill);}
                    };
                }
            }
        }

        return flyweightFill;
    }

    private static FixExecTypeField flyweightDoneForDay;
    public static final FixExecTypeField flyweightDoneForDay()
    {
        if (flyweightDoneForDay == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightDoneForDay == null)
                {
                    flyweightDoneForDay  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_DoneForDay;}
                     public String  getValueDescription()             {return text_DoneForDay;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_DoneForDay).append("|").append(text_DoneForDay).append("]").toString();}
                     public boolean isDoneForDay()                    {return true;}
                     public char    charValue()                       {return DoneForDay;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_DoneForDay);}
                    };
                }
            }
        }

        return flyweightDoneForDay;
    }

    private static FixExecTypeField flyweightCanceled;
    public static final FixExecTypeField flyweightCanceled()
    {
        if (flyweightCanceled == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightCanceled == null)
                {
                    flyweightCanceled  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Canceled;}
                     public String  getValueDescription()             {return text_Canceled;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Canceled).append("|").append(text_Canceled).append("]").toString();}
                     public boolean isCanceled()                      {return true;}
                     public char    charValue()                       {return Canceled;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Canceled);}
                    };
                }
            }
        }

        return flyweightCanceled;
    }

    private static FixExecTypeField flyweightReplace;
    public static final FixExecTypeField flyweightReplace()
    {
        if (flyweightReplace == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightReplace == null)
                {
                    flyweightReplace  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Replace;}
                     public String  getValueDescription()             {return text_Replace;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Replace).append("|").append(text_Replace).append("]").toString();}
                     public boolean isReplace()                       {return true;}
                     public char    charValue()                       {return Replace;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Replace);}
                    };
                }
            }
        }

        return flyweightReplace;
    }

    private static FixExecTypeField flyweightPendingCancel;
    public static final FixExecTypeField flyweightPendingCancel()
    {
        if (flyweightPendingCancel == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightPendingCancel == null)
                {
                    flyweightPendingCancel  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PendingCancel;}
                     public String  getValueDescription()             {return text_PendingCancel;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PendingCancel).append("|").append(text_PendingCancel).append("]").toString();}
                     public boolean isPendingCancel()                 {return true;}
                     public char    charValue()                       {return PendingCancel;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PendingCancel);}
                    };
                }
            }
        }

        return flyweightPendingCancel;
    }

    private static FixExecTypeField flyweightStopped;
    public static final FixExecTypeField flyweightStopped()
    {
        if (flyweightStopped == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightStopped == null)
                {
                    flyweightStopped  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Stopped;}
                     public String  getValueDescription()             {return text_Stopped;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Stopped).append("|").append(text_Stopped).append("]").toString();}
                     public boolean isStopped()                       {return true;}
                     public char    charValue()                       {return Stopped;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Stopped);}
                    };
                }
            }
        }

        return flyweightStopped;
    }

    private static FixExecTypeField flyweightRejected;
    public static final FixExecTypeField flyweightRejected()
    {
        if (flyweightRejected == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightRejected == null)
                {
                    flyweightRejected  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Rejected;}
                     public String  getValueDescription()             {return text_Rejected;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Rejected).append("|").append(text_Rejected).append("]").toString();}
                     public boolean isRejected()                      {return true;}
                     public char    charValue()                       {return Rejected;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Rejected);}
                    };
                }
            }
        }

        return flyweightRejected;
    }

    private static FixExecTypeField flyweightSuspended;
    public static final FixExecTypeField flyweightSuspended()
    {
        if (flyweightSuspended == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightSuspended == null)
                {
                    flyweightSuspended  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Suspended;}
                     public String  getValueDescription()             {return text_Suspended;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Suspended).append("|").append(text_Suspended).append("]").toString();}
                     public boolean isSuspended()                     {return true;}
                     public char    charValue()                       {return Suspended;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Suspended);}
                    };
                }
            }
        }

        return flyweightSuspended;
    }

    private static FixExecTypeField flyweightPendingNew;
    public static final FixExecTypeField flyweightPendingNew()
    {
        if (flyweightPendingNew == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightPendingNew == null)
                {
                    flyweightPendingNew  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PendingNew;}
                     public String  getValueDescription()             {return text_PendingNew;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PendingNew).append("|").append(text_PendingNew).append("]").toString();}
                     public boolean isPendingNew()                    {return true;}
                     public char    charValue()                       {return PendingNew;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PendingNew);}
                    };
                }
            }
        }

        return flyweightPendingNew;
    }

    private static FixExecTypeField flyweightCalculated;
    public static final FixExecTypeField flyweightCalculated()
    {
        if (flyweightCalculated == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightCalculated == null)
                {
                    flyweightCalculated  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Calculated;}
                     public String  getValueDescription()             {return text_Calculated;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Calculated).append("|").append(text_Calculated).append("]").toString();}
                     public boolean isCalculated()                    {return true;}
                     public char    charValue()                       {return Calculated;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Calculated);}
                    };
                }
            }
        }

        return flyweightCalculated;
    }

    private static FixExecTypeField flyweightExpired;
    public static final FixExecTypeField flyweightExpired()
    {
        if (flyweightExpired == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightExpired == null)
                {
                    flyweightExpired  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Expired;}
                     public String  getValueDescription()             {return text_Expired;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Expired).append("|").append(text_Expired).append("]").toString();}
                     public boolean isExpired()                       {return true;}
                     public char    charValue()                       {return Expired;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Expired);}
                    };
                }
            }
        }

        return flyweightExpired;
    }

    private static FixExecTypeField flyweightRestated;
    public static final FixExecTypeField flyweightRestated()
    {
        if (flyweightRestated == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightRestated == null)
                {
                    flyweightRestated  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Restated;}
                     public String  getValueDescription()             {return text_Restated;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Restated).append("|").append(text_Restated).append("]").toString();}
                     public boolean isRestated()                      {return true;}
                     public char    charValue()                       {return Restated;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Restated);}
                    };
                }
            }
        }

        return flyweightRestated;
    }

    private static FixExecTypeField flyweightPendingReplace;
    public static final FixExecTypeField flyweightPendingReplace()
    {
        if (flyweightPendingReplace == null)
        {
            synchronized(FixExecTypeField.class)
            {
                if (flyweightPendingReplace == null)
                {
                    flyweightPendingReplace  = new FixExecTypeField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PendingReplace;}
                     public String  getValueDescription()             {return text_PendingReplace;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PendingReplace).append("|").append(text_PendingReplace).append("]").toString();}
                     public boolean isPendingReplace()                {return true;}
                     public char    charValue()                       {return PendingReplace;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PendingReplace);}
                    };
                }
            }
        }

        return flyweightPendingReplace;
    }


    public boolean isNew()              {return false;}
    public boolean isPartialFill()      {return false;}
    public boolean isFill()             {return false;}
    public boolean isDoneForDay()       {return false;}
    public boolean isCanceled()         {return false;}
    public boolean isReplace()          {return false;}
    public boolean isPendingCancel()    {return false;}
    public boolean isStopped()          {return false;}
    public boolean isRejected()         {return false;}
    public boolean isSuspended()        {return false;}
    public boolean isPendingNew()       {return false;}
    public boolean isCalculated()       {return false;}
    public boolean isExpired()          {return false;}
    public boolean isRestated()         {return false;}
    public boolean isPendingReplace()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixExecTypeField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixExecTypeField create(final char param)
    {
        switch (param)
        {                                                                                           
            case New:            return flyweightNew();
            case PartialFill:    return flyweightPartialFill();
            case Fill:           return flyweightFill();
            case DoneForDay:     return flyweightDoneForDay();
            case Canceled:       return flyweightCanceled();
            case Replace:        return flyweightReplace();
            case PendingCancel:  return flyweightPendingCancel();
            case Stopped:        return flyweightStopped();
            case Rejected:       return flyweightRejected();
            case Suspended:      return flyweightSuspended();
            case PendingNew:     return flyweightPendingNew();
            case Calculated:     return flyweightCalculated();
            case Expired:        return flyweightExpired();
            case Restated:       return flyweightRestated();
            case PendingReplace: return flyweightPendingReplace();
        }
                                                                                                    
        return null;
    }                                                                                               
}
