package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixSecurityTradingStatusField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [326] (known as SecurityTradingStatus).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixSecurityTradingStatusField implements FixFieldIF, HasIntValueIF
{   
    public static final int    TagID         =  326;
    public static final String TagIDAsString = "326";
    public static final char[] TagIDAsChars  = {'3','2','6'};
    public static final String TagName       = "SecurityTradingStatus";
    public static final String TagFixType    = "INT";
    public static final char[]  taggedchars_value0 = {'3','2','6', EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {'3','2','6', EQUALSchar, ONEchar,  SOHchar};

    public static final int     OpeningDelay                            = 1;
    public static final String  string_OpeningDelay                     = "1";
    public static final String  tagged_OpeningDelay                     = TagIDAsString + EQUALS + string_OpeningDelay + SOH;
    public static final char[]  taggedchars_OpeningDelay                = {'3','2','6', EQUALSchar, '1', SOHchar};
    public static final String  text_OpeningDelay                       = "OpeningDelay";
    public static final int     TradingHalt                             = 2;
    public static final String  string_TradingHalt                      = "2";
    public static final String  tagged_TradingHalt                      = TagIDAsString + EQUALS + string_TradingHalt + SOH;
    public static final char[]  taggedchars_TradingHalt                 = {'3','2','6', EQUALSchar, '2', SOHchar};
    public static final String  text_TradingHalt                        = "TradingHalt";
    public static final int     Resume                                  = 3;
    public static final String  string_Resume                           = "3";
    public static final String  tagged_Resume                           = TagIDAsString + EQUALS + string_Resume + SOH;
    public static final char[]  taggedchars_Resume                      = {'3','2','6', EQUALSchar, '3', SOHchar};
    public static final String  text_Resume                             = "Resume";
    public static final int     NoOpenNoResume                          = 4;
    public static final String  string_NoOpenNoResume                   = "4";
    public static final String  tagged_NoOpenNoResume                   = TagIDAsString + EQUALS + string_NoOpenNoResume + SOH;
    public static final char[]  taggedchars_NoOpenNoResume              = {'3','2','6', EQUALSchar, '4', SOHchar};
    public static final String  text_NoOpenNoResume                     = "NoOpenNoResume";
    public static final int     PriceIndication                         = 5;
    public static final String  string_PriceIndication                  = "5";
    public static final String  tagged_PriceIndication                  = TagIDAsString + EQUALS + string_PriceIndication + SOH;
    public static final char[]  taggedchars_PriceIndication             = {'3','2','6', EQUALSchar, '5', SOHchar};
    public static final String  text_PriceIndication                    = "PriceIndication";
    public static final int     TradingRangeIndication                  = 6;
    public static final String  string_TradingRangeIndication           = "6";
    public static final String  tagged_TradingRangeIndication           = TagIDAsString + EQUALS + string_TradingRangeIndication + SOH;
    public static final char[]  taggedchars_TradingRangeIndication      = {'3','2','6', EQUALSchar, '6', SOHchar};
    public static final String  text_TradingRangeIndication             = "TradingRangeIndication";
    public static final int     MarketImbalanceBuy                      = 7;
    public static final String  string_MarketImbalanceBuy               = "7";
    public static final String  tagged_MarketImbalanceBuy               = TagIDAsString + EQUALS + string_MarketImbalanceBuy + SOH;
    public static final char[]  taggedchars_MarketImbalanceBuy          = {'3','2','6', EQUALSchar, '7', SOHchar};
    public static final String  text_MarketImbalanceBuy                 = "MarketImbalanceBuy";
    public static final int     MarketImbalanceSell                     = 8;
    public static final String  string_MarketImbalanceSell              = "8";
    public static final String  tagged_MarketImbalanceSell              = TagIDAsString + EQUALS + string_MarketImbalanceSell + SOH;
    public static final char[]  taggedchars_MarketImbalanceSell         = {'3','2','6', EQUALSchar, '8', SOHchar};
    public static final String  text_MarketImbalanceSell                = "MarketImbalanceSell";
    public static final int     MarketOnCloseImbalanceBuy               = 9;
    public static final String  string_MarketOnCloseImbalanceBuy        = "9";
    public static final String  tagged_MarketOnCloseImbalanceBuy        = TagIDAsString + EQUALS + string_MarketOnCloseImbalanceBuy + SOH;
    public static final char[]  taggedchars_MarketOnCloseImbalanceBuy   = {'3','2','6', EQUALSchar, '9', SOHchar};
    public static final String  text_MarketOnCloseImbalanceBuy          = "MarketOnCloseImbalanceBuy";
    public static final int     MarketOnCloseImbalanceSell              = 10;
    public static final String  string_MarketOnCloseImbalanceSell       = "10";
    public static final String  tagged_MarketOnCloseImbalanceSell       = TagIDAsString + EQUALS + string_MarketOnCloseImbalanceSell + SOH;
    public static final char[]  taggedchars_MarketOnCloseImbalanceSell  = {'3','2','6', EQUALSchar, '1','0', SOHchar};
    public static final String  text_MarketOnCloseImbalanceSell         = "MarketOnCloseImbalanceSell";
    public static final int     NoMarketImbalance                       = 12;
    public static final String  string_NoMarketImbalance                = "12";
    public static final String  tagged_NoMarketImbalance                = TagIDAsString + EQUALS + string_NoMarketImbalance + SOH;
    public static final char[]  taggedchars_NoMarketImbalance           = {'3','2','6', EQUALSchar, '1','2', SOHchar};
    public static final String  text_NoMarketImbalance                  = "NoMarketImbalance";
    public static final int     NoMarketOnCloseImbalance                = 13;
    public static final String  string_NoMarketOnCloseImbalance         = "13";
    public static final String  tagged_NoMarketOnCloseImbalance         = TagIDAsString + EQUALS + string_NoMarketOnCloseImbalance + SOH;
    public static final char[]  taggedchars_NoMarketOnCloseImbalance    = {'3','2','6', EQUALSchar, '1','3', SOHchar};
    public static final String  text_NoMarketOnCloseImbalance           = "NoMarketOnCloseImbalance";
    public static final int     ItsPreOpening                           = 14;
    public static final String  string_ItsPreOpening                    = "14";
    public static final String  tagged_ItsPreOpening                    = TagIDAsString + EQUALS + string_ItsPreOpening + SOH;
    public static final char[]  taggedchars_ItsPreOpening               = {'3','2','6', EQUALSchar, '1','4', SOHchar};
    public static final String  text_ItsPreOpening                      = "ItsPreOpening";
    public static final int     NewPriceIndication                      = 15;
    public static final String  string_NewPriceIndication               = "15";
    public static final String  tagged_NewPriceIndication               = TagIDAsString + EQUALS + string_NewPriceIndication + SOH;
    public static final char[]  taggedchars_NewPriceIndication          = {'3','2','6', EQUALSchar, '1','5', SOHchar};
    public static final String  text_NewPriceIndication                 = "NewPriceIndication";
    public static final int     TradeDisseminationTime                  = 16;
    public static final String  string_TradeDisseminationTime           = "16";
    public static final String  tagged_TradeDisseminationTime           = TagIDAsString + EQUALS + string_TradeDisseminationTime + SOH;
    public static final char[]  taggedchars_TradeDisseminationTime      = {'3','2','6', EQUALSchar, '1','6', SOHchar};
    public static final String  text_TradeDisseminationTime             = "TradeDisseminationTime";
    public static final int     ReadyToTrade                            = 17;
    public static final String  string_ReadyToTrade                     = "17";
    public static final String  tagged_ReadyToTrade                     = TagIDAsString + EQUALS + string_ReadyToTrade + SOH;
    public static final char[]  taggedchars_ReadyToTrade                = {'3','2','6', EQUALSchar, '1','7', SOHchar};
    public static final String  text_ReadyToTrade                       = "ReadyToTrade";
    public static final int     NotAvailableForTrading                  = 18;
    public static final String  string_NotAvailableForTrading           = "18";
    public static final String  tagged_NotAvailableForTrading           = TagIDAsString + EQUALS + string_NotAvailableForTrading + SOH;
    public static final char[]  taggedchars_NotAvailableForTrading      = {'3','2','6', EQUALSchar, '1','8', SOHchar};
    public static final String  text_NotAvailableForTrading             = "NotAvailableForTrading";
    public static final int     NotTradedOnThisMarket                   = 19;
    public static final String  string_NotTradedOnThisMarket            = "19";
    public static final String  tagged_NotTradedOnThisMarket            = TagIDAsString + EQUALS + string_NotTradedOnThisMarket + SOH;
    public static final char[]  taggedchars_NotTradedOnThisMarket       = {'3','2','6', EQUALSchar, '1','9', SOHchar};
    public static final String  text_NotTradedOnThisMarket              = "NotTradedOnThisMarket";
    public static final int     UnknownOrInvalid                        = 20;
    public static final String  string_UnknownOrInvalid                 = "20";
    public static final String  tagged_UnknownOrInvalid                 = TagIDAsString + EQUALS + string_UnknownOrInvalid + SOH;
    public static final char[]  taggedchars_UnknownOrInvalid            = {'3','2','6', EQUALSchar, '2','0', SOHchar};
    public static final String  text_UnknownOrInvalid                   = "UnknownOrInvalid";
    public static final int     PreOpen                                 = 21;
    public static final String  string_PreOpen                          = "21";
    public static final String  tagged_PreOpen                          = TagIDAsString + EQUALS + string_PreOpen + SOH;
    public static final char[]  taggedchars_PreOpen                     = {'3','2','6', EQUALSchar, '2','1', SOHchar};
    public static final String  text_PreOpen                            = "PreOpen";
    public static final int     OpeningRotation                         = 22;
    public static final String  string_OpeningRotation                  = "22";
    public static final String  tagged_OpeningRotation                  = TagIDAsString + EQUALS + string_OpeningRotation + SOH;
    public static final char[]  taggedchars_OpeningRotation             = {'3','2','6', EQUALSchar, '2','2', SOHchar};
    public static final String  text_OpeningRotation                    = "OpeningRotation";
    public static final int     FastMarket                              = 23;
    public static final String  string_FastMarket                       = "23";
    public static final String  tagged_FastMarket                       = TagIDAsString + EQUALS + string_FastMarket + SOH;
    public static final char[]  taggedchars_FastMarket                  = {'3','2','6', EQUALSchar, '2','3', SOHchar};
    public static final String  text_FastMarket                         = "FastMarket";
    public static final int     OnHold                                  = 24;
    public static final String  string_OnHold                           = "24";
    public static final String  tagged_OnHold                           = TagIDAsString + EQUALS + string_OnHold + SOH;
    public static final char[]  taggedchars_OnHold                      = {'3','2','6', EQUALSchar, '2','4', SOHchar};
    public static final String  text_OnHold                             = "OnHold";
    public static final int     OffHold                                 = 25;
    public static final String  string_OffHold                          = "25";
    public static final String  tagged_OffHold                          = TagIDAsString + EQUALS + string_OffHold + SOH;
    public static final char[]  taggedchars_OffHold                     = {'3','2','6', EQUALSchar, '2','5', SOHchar};
    public static final String  text_OffHold                            = "OffHold";

    private static FixSecurityTradingStatusField flyweightOpeningDelay;
    public static final FixSecurityTradingStatusField flyweightOpeningDelay()
    {
        if (flyweightOpeningDelay == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightOpeningDelay == null)
                {
                    flyweightOpeningDelay  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_OpeningDelay;}
                     public String  getValueDescription()             {return text_OpeningDelay;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OpeningDelay).append("|").append(text_OpeningDelay).append("]").toString();}
                     public boolean isOpeningDelay()                  {return true;}
                     public int     intValue()                        {return OpeningDelay;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OpeningDelay);}
                    };
                }
            }
        }

        return flyweightOpeningDelay;
    }

    private static FixSecurityTradingStatusField flyweightTradingHalt;
    public static final FixSecurityTradingStatusField flyweightTradingHalt()
    {
        if (flyweightTradingHalt == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightTradingHalt == null)
                {
                    flyweightTradingHalt  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_TradingHalt;}
                     public String  getValueDescription()             {return text_TradingHalt;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_TradingHalt).append("|").append(text_TradingHalt).append("]").toString();}
                     public boolean isTradingHalt()                   {return true;}
                     public int     intValue()                        {return TradingHalt;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_TradingHalt);}
                    };
                }
            }
        }

        return flyweightTradingHalt;
    }

    private static FixSecurityTradingStatusField flyweightResume;
    public static final FixSecurityTradingStatusField flyweightResume()
    {
        if (flyweightResume == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightResume == null)
                {
                    flyweightResume  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Resume;}
                     public String  getValueDescription()             {return text_Resume;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Resume).append("|").append(text_Resume).append("]").toString();}
                     public boolean isResume()                        {return true;}
                     public int     intValue()                        {return Resume;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Resume);}
                    };
                }
            }
        }

        return flyweightResume;
    }

    private static FixSecurityTradingStatusField flyweightNoOpenNoResume;
    public static final FixSecurityTradingStatusField flyweightNoOpenNoResume()
    {
        if (flyweightNoOpenNoResume == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightNoOpenNoResume == null)
                {
                    flyweightNoOpenNoResume  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NoOpenNoResume;}
                     public String  getValueDescription()             {return text_NoOpenNoResume;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NoOpenNoResume).append("|").append(text_NoOpenNoResume).append("]").toString();}
                     public boolean isNoOpenNoResume()                {return true;}
                     public int     intValue()                        {return NoOpenNoResume;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NoOpenNoResume);}
                    };
                }
            }
        }

        return flyweightNoOpenNoResume;
    }

    private static FixSecurityTradingStatusField flyweightPriceIndication;
    public static final FixSecurityTradingStatusField flyweightPriceIndication()
    {
        if (flyweightPriceIndication == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightPriceIndication == null)
                {
                    flyweightPriceIndication  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PriceIndication;}
                     public String  getValueDescription()             {return text_PriceIndication;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PriceIndication).append("|").append(text_PriceIndication).append("]").toString();}
                     public boolean isPriceIndication()               {return true;}
                     public int     intValue()                        {return PriceIndication;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PriceIndication);}
                    };
                }
            }
        }

        return flyweightPriceIndication;
    }

    private static FixSecurityTradingStatusField flyweightTradingRangeIndication;
    public static final FixSecurityTradingStatusField flyweightTradingRangeIndication()
    {
        if (flyweightTradingRangeIndication == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightTradingRangeIndication == null)
                {
                    flyweightTradingRangeIndication  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_TradingRangeIndication;}
                     public String  getValueDescription()             {return text_TradingRangeIndication;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_TradingRangeIndication).append("|").append(text_TradingRangeIndication).append("]").toString();}
                     public boolean isTradingRangeIndication()        {return true;}
                     public int     intValue()                        {return TradingRangeIndication;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_TradingRangeIndication);}
                    };
                }
            }
        }

        return flyweightTradingRangeIndication;
    }

    private static FixSecurityTradingStatusField flyweightMarketImbalanceBuy;
    public static final FixSecurityTradingStatusField flyweightMarketImbalanceBuy()
    {
        if (flyweightMarketImbalanceBuy == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightMarketImbalanceBuy == null)
                {
                    flyweightMarketImbalanceBuy  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_MarketImbalanceBuy;}
                     public String  getValueDescription()             {return text_MarketImbalanceBuy;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_MarketImbalanceBuy).append("|").append(text_MarketImbalanceBuy).append("]").toString();}
                     public boolean isMarketImbalanceBuy()            {return true;}
                     public int     intValue()                        {return MarketImbalanceBuy;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_MarketImbalanceBuy);}
                    };
                }
            }
        }

        return flyweightMarketImbalanceBuy;
    }

    private static FixSecurityTradingStatusField flyweightMarketImbalanceSell;
    public static final FixSecurityTradingStatusField flyweightMarketImbalanceSell()
    {
        if (flyweightMarketImbalanceSell == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightMarketImbalanceSell == null)
                {
                    flyweightMarketImbalanceSell  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_MarketImbalanceSell;}
                     public String  getValueDescription()             {return text_MarketImbalanceSell;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_MarketImbalanceSell).append("|").append(text_MarketImbalanceSell).append("]").toString();}
                     public boolean isMarketImbalanceSell()           {return true;}
                     public int     intValue()                        {return MarketImbalanceSell;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_MarketImbalanceSell);}
                    };
                }
            }
        }

        return flyweightMarketImbalanceSell;
    }

    private static FixSecurityTradingStatusField flyweightMarketOnCloseImbalanceBuy;
    public static final FixSecurityTradingStatusField flyweightMarketOnCloseImbalanceBuy()
    {
        if (flyweightMarketOnCloseImbalanceBuy == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightMarketOnCloseImbalanceBuy == null)
                {
                    flyweightMarketOnCloseImbalanceBuy  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_MarketOnCloseImbalanceBuy;}
                     public String  getValueDescription()             {return text_MarketOnCloseImbalanceBuy;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_MarketOnCloseImbalanceBuy).append("|").append(text_MarketOnCloseImbalanceBuy).append("]").toString();}
                     public boolean isMarketOnCloseImbalanceBuy()     {return true;}
                     public int     intValue()                        {return MarketOnCloseImbalanceBuy;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_MarketOnCloseImbalanceBuy);}
                    };
                }
            }
        }

        return flyweightMarketOnCloseImbalanceBuy;
    }

    private static FixSecurityTradingStatusField flyweightMarketOnCloseImbalanceSell;
    public static final FixSecurityTradingStatusField flyweightMarketOnCloseImbalanceSell()
    {
        if (flyweightMarketOnCloseImbalanceSell == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightMarketOnCloseImbalanceSell == null)
                {
                    flyweightMarketOnCloseImbalanceSell  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_MarketOnCloseImbalanceSell;}
                     public String  getValueDescription()             {return text_MarketOnCloseImbalanceSell;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_MarketOnCloseImbalanceSell).append("|").append(text_MarketOnCloseImbalanceSell).append("]").toString();}
                     public boolean isMarketOnCloseImbalanceSell()    {return true;}
                     public int     intValue()                        {return MarketOnCloseImbalanceSell;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_MarketOnCloseImbalanceSell);}
                    };
                }
            }
        }

        return flyweightMarketOnCloseImbalanceSell;
    }

    private static FixSecurityTradingStatusField flyweightNoMarketImbalance;
    public static final FixSecurityTradingStatusField flyweightNoMarketImbalance()
    {
        if (flyweightNoMarketImbalance == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightNoMarketImbalance == null)
                {
                    flyweightNoMarketImbalance  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NoMarketImbalance;}
                     public String  getValueDescription()             {return text_NoMarketImbalance;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NoMarketImbalance).append("|").append(text_NoMarketImbalance).append("]").toString();}
                     public boolean isNoMarketImbalance()             {return true;}
                     public int     intValue()                        {return NoMarketImbalance;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NoMarketImbalance);}
                    };
                }
            }
        }

        return flyweightNoMarketImbalance;
    }

    private static FixSecurityTradingStatusField flyweightNoMarketOnCloseImbalance;
    public static final FixSecurityTradingStatusField flyweightNoMarketOnCloseImbalance()
    {
        if (flyweightNoMarketOnCloseImbalance == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightNoMarketOnCloseImbalance == null)
                {
                    flyweightNoMarketOnCloseImbalance  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NoMarketOnCloseImbalance;}
                     public String  getValueDescription()             {return text_NoMarketOnCloseImbalance;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NoMarketOnCloseImbalance).append("|").append(text_NoMarketOnCloseImbalance).append("]").toString();}
                     public boolean isNoMarketOnCloseImbalance()      {return true;}
                     public int     intValue()                        {return NoMarketOnCloseImbalance;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NoMarketOnCloseImbalance);}
                    };
                }
            }
        }

        return flyweightNoMarketOnCloseImbalance;
    }

    private static FixSecurityTradingStatusField flyweightItsPreOpening;
    public static final FixSecurityTradingStatusField flyweightItsPreOpening()
    {
        if (flyweightItsPreOpening == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightItsPreOpening == null)
                {
                    flyweightItsPreOpening  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ItsPreOpening;}
                     public String  getValueDescription()             {return text_ItsPreOpening;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ItsPreOpening).append("|").append(text_ItsPreOpening).append("]").toString();}
                     public boolean isItsPreOpening()                 {return true;}
                     public int     intValue()                        {return ItsPreOpening;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ItsPreOpening);}
                    };
                }
            }
        }

        return flyweightItsPreOpening;
    }

    private static FixSecurityTradingStatusField flyweightNewPriceIndication;
    public static final FixSecurityTradingStatusField flyweightNewPriceIndication()
    {
        if (flyweightNewPriceIndication == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightNewPriceIndication == null)
                {
                    flyweightNewPriceIndication  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NewPriceIndication;}
                     public String  getValueDescription()             {return text_NewPriceIndication;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NewPriceIndication).append("|").append(text_NewPriceIndication).append("]").toString();}
                     public boolean isNewPriceIndication()            {return true;}
                     public int     intValue()                        {return NewPriceIndication;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NewPriceIndication);}
                    };
                }
            }
        }

        return flyweightNewPriceIndication;
    }

    private static FixSecurityTradingStatusField flyweightTradeDisseminationTime;
    public static final FixSecurityTradingStatusField flyweightTradeDisseminationTime()
    {
        if (flyweightTradeDisseminationTime == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightTradeDisseminationTime == null)
                {
                    flyweightTradeDisseminationTime  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_TradeDisseminationTime;}
                     public String  getValueDescription()             {return text_TradeDisseminationTime;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_TradeDisseminationTime).append("|").append(text_TradeDisseminationTime).append("]").toString();}
                     public boolean isTradeDisseminationTime()        {return true;}
                     public int     intValue()                        {return TradeDisseminationTime;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_TradeDisseminationTime);}
                    };
                }
            }
        }

        return flyweightTradeDisseminationTime;
    }

    private static FixSecurityTradingStatusField flyweightReadyToTrade;
    public static final FixSecurityTradingStatusField flyweightReadyToTrade()
    {
        if (flyweightReadyToTrade == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightReadyToTrade == null)
                {
                    flyweightReadyToTrade  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ReadyToTrade;}
                     public String  getValueDescription()             {return text_ReadyToTrade;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ReadyToTrade).append("|").append(text_ReadyToTrade).append("]").toString();}
                     public boolean isReadyToTrade()                  {return true;}
                     public int     intValue()                        {return ReadyToTrade;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ReadyToTrade);}
                    };
                }
            }
        }

        return flyweightReadyToTrade;
    }

    private static FixSecurityTradingStatusField flyweightNotAvailableForTrading;
    public static final FixSecurityTradingStatusField flyweightNotAvailableForTrading()
    {
        if (flyweightNotAvailableForTrading == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightNotAvailableForTrading == null)
                {
                    flyweightNotAvailableForTrading  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NotAvailableForTrading;}
                     public String  getValueDescription()             {return text_NotAvailableForTrading;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NotAvailableForTrading).append("|").append(text_NotAvailableForTrading).append("]").toString();}
                     public boolean isNotAvailableForTrading()        {return true;}
                     public int     intValue()                        {return NotAvailableForTrading;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NotAvailableForTrading);}
                    };
                }
            }
        }

        return flyweightNotAvailableForTrading;
    }

    private static FixSecurityTradingStatusField flyweightNotTradedOnThisMarket;
    public static final FixSecurityTradingStatusField flyweightNotTradedOnThisMarket()
    {
        if (flyweightNotTradedOnThisMarket == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightNotTradedOnThisMarket == null)
                {
                    flyweightNotTradedOnThisMarket  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_NotTradedOnThisMarket;}
                     public String  getValueDescription()             {return text_NotTradedOnThisMarket;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_NotTradedOnThisMarket).append("|").append(text_NotTradedOnThisMarket).append("]").toString();}
                     public boolean isNotTradedOnThisMarket()         {return true;}
                     public int     intValue()                        {return NotTradedOnThisMarket;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_NotTradedOnThisMarket);}
                    };
                }
            }
        }

        return flyweightNotTradedOnThisMarket;
    }

    private static FixSecurityTradingStatusField flyweightUnknownOrInvalid;
    public static final FixSecurityTradingStatusField flyweightUnknownOrInvalid()
    {
        if (flyweightUnknownOrInvalid == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightUnknownOrInvalid == null)
                {
                    flyweightUnknownOrInvalid  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_UnknownOrInvalid;}
                     public String  getValueDescription()             {return text_UnknownOrInvalid;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_UnknownOrInvalid).append("|").append(text_UnknownOrInvalid).append("]").toString();}
                     public boolean isUnknownOrInvalid()              {return true;}
                     public int     intValue()                        {return UnknownOrInvalid;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_UnknownOrInvalid);}
                    };
                }
            }
        }

        return flyweightUnknownOrInvalid;
    }

    private static FixSecurityTradingStatusField flyweightPreOpen;
    public static final FixSecurityTradingStatusField flyweightPreOpen()
    {
        if (flyweightPreOpen == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightPreOpen == null)
                {
                    flyweightPreOpen  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PreOpen;}
                     public String  getValueDescription()             {return text_PreOpen;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PreOpen).append("|").append(text_PreOpen).append("]").toString();}
                     public boolean isPreOpen()                       {return true;}
                     public int     intValue()                        {return PreOpen;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PreOpen);}
                    };
                }
            }
        }

        return flyweightPreOpen;
    }

    private static FixSecurityTradingStatusField flyweightOpeningRotation;
    public static final FixSecurityTradingStatusField flyweightOpeningRotation()
    {
        if (flyweightOpeningRotation == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightOpeningRotation == null)
                {
                    flyweightOpeningRotation  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_OpeningRotation;}
                     public String  getValueDescription()             {return text_OpeningRotation;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OpeningRotation).append("|").append(text_OpeningRotation).append("]").toString();}
                     public boolean isOpeningRotation()               {return true;}
                     public int     intValue()                        {return OpeningRotation;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OpeningRotation);}
                    };
                }
            }
        }

        return flyweightOpeningRotation;
    }

    private static FixSecurityTradingStatusField flyweightFastMarket;
    public static final FixSecurityTradingStatusField flyweightFastMarket()
    {
        if (flyweightFastMarket == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightFastMarket == null)
                {
                    flyweightFastMarket  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_FastMarket;}
                     public String  getValueDescription()             {return text_FastMarket;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_FastMarket).append("|").append(text_FastMarket).append("]").toString();}
                     public boolean isFastMarket()                    {return true;}
                     public int     intValue()                        {return FastMarket;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_FastMarket);}
                    };
                }
            }
        }

        return flyweightFastMarket;
    }

    private static FixSecurityTradingStatusField flyweightOnHold;
    public static final FixSecurityTradingStatusField flyweightOnHold()
    {
        if (flyweightOnHold == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightOnHold == null)
                {
                    flyweightOnHold  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_OnHold;}
                     public String  getValueDescription()             {return text_OnHold;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OnHold).append("|").append(text_OnHold).append("]").toString();}
                     public boolean isOnHold()                        {return true;}
                     public int     intValue()                        {return OnHold;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OnHold);}
                    };
                }
            }
        }

        return flyweightOnHold;
    }

    private static FixSecurityTradingStatusField flyweightOffHold;
    public static final FixSecurityTradingStatusField flyweightOffHold()
    {
        if (flyweightOffHold == null)
        {
            synchronized(FixSecurityTradingStatusField.class)
            {
                if (flyweightOffHold == null)
                {
                    flyweightOffHold  = new FixSecurityTradingStatusField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_OffHold;}
                     public String  getValueDescription()             {return text_OffHold;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OffHold).append("|").append(text_OffHold).append("]").toString();}
                     public boolean isOffHold()                       {return true;}
                     public int     intValue()                        {return OffHold;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OffHold);}
                    };
                }
            }
        }

        return flyweightOffHold;
    }


    public boolean isOpeningDelay()                 {return false;}
    public boolean isTradingHalt()                  {return false;}
    public boolean isResume()                       {return false;}
    public boolean isNoOpenNoResume()               {return false;}
    public boolean isPriceIndication()              {return false;}
    public boolean isTradingRangeIndication()       {return false;}
    public boolean isMarketImbalanceBuy()           {return false;}
    public boolean isMarketImbalanceSell()          {return false;}
    public boolean isMarketOnCloseImbalanceBuy()    {return false;}
    public boolean isMarketOnCloseImbalanceSell()   {return false;}
    public boolean isNoMarketImbalance()            {return false;}
    public boolean isNoMarketOnCloseImbalance()     {return false;}
    public boolean isItsPreOpening()                {return false;}
    public boolean isNewPriceIndication()           {return false;}
    public boolean isTradeDisseminationTime()       {return false;}
    public boolean isReadyToTrade()                 {return false;}
    public boolean isNotAvailableForTrading()       {return false;}
    public boolean isNotTradedOnThisMarket()        {return false;}
    public boolean isUnknownOrInvalid()             {return false;}
    public boolean isPreOpen()                      {return false;}
    public boolean isOpeningRotation()              {return false;}
    public boolean isFastMarket()                   {return false;}
    public boolean isOnHold()                       {return false;}
    public boolean isOffHold()                      {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixSecurityTradingStatusField create(char[] array, int offset, int length)
    {
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static FixSecurityTradingStatusField create(final int param)
    {
        switch (param)
        {                                                                                           
            case OpeningDelay:               return flyweightOpeningDelay();
            case TradingHalt:                return flyweightTradingHalt();
            case Resume:                     return flyweightResume();
            case NoOpenNoResume:             return flyweightNoOpenNoResume();
            case PriceIndication:            return flyweightPriceIndication();
            case TradingRangeIndication:     return flyweightTradingRangeIndication();
            case MarketImbalanceBuy:         return flyweightMarketImbalanceBuy();
            case MarketImbalanceSell:        return flyweightMarketImbalanceSell();
            case MarketOnCloseImbalanceBuy:  return flyweightMarketOnCloseImbalanceBuy();
            case MarketOnCloseImbalanceSell: return flyweightMarketOnCloseImbalanceSell();
            case NoMarketImbalance:          return flyweightNoMarketImbalance();
            case NoMarketOnCloseImbalance:   return flyweightNoMarketOnCloseImbalance();
            case ItsPreOpening:              return flyweightItsPreOpening();
            case NewPriceIndication:         return flyweightNewPriceIndication();
            case TradeDisseminationTime:     return flyweightTradeDisseminationTime();
            case ReadyToTrade:               return flyweightReadyToTrade();
            case NotAvailableForTrading:     return flyweightNotAvailableForTrading();
            case NotTradedOnThisMarket:      return flyweightNotTradedOnThisMarket();
            case UnknownOrInvalid:           return flyweightUnknownOrInvalid();
            case PreOpen:                    return flyweightPreOpen();
            case OpeningRotation:            return flyweightOpeningRotation();
            case FastMarket:                 return flyweightFastMarket();
            case OnHold:                     return flyweightOnHold();
            case OffHold:                    return flyweightOffHold();
        }
                                                                                                    
        return new FixSecurityTradingStatusField()
        {       public int     value = param;
                public boolean hasValue()                                    {return true;}
                public String  getValue()                                    {return StringHelper.intToString(value);}
                public int     intValue()                                    {return OffHold;}
                public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, value);}
        };
    }                                                                                               
}
