package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixTickDirectionField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [274] (known as TickDirection).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixTickDirectionField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  274;
    public static final String TagIDAsString = "274";
    public static final char[] TagIDAsChars  = {'2','7','4'};
    public static final String TagName       = "TickDirection";
    public static final String TagFixType    = "CHAR";

    public static final char    PlusTick                   = '0';
    public static final String  string_PlusTick            = "0";
    public static final String  tagged_PlusTick            = TagIDAsString + EQUALS + string_PlusTick + SOH;
    public static final char[]  taggedchars_PlusTick       = {'2','7','4', EQUALSchar, '0', SOHchar};
    public static final String  text_PlusTick              = "PlusTick";
    public static final char    ZeroPlusTick               = '1';
    public static final String  string_ZeroPlusTick        = "1";
    public static final String  tagged_ZeroPlusTick        = TagIDAsString + EQUALS + string_ZeroPlusTick + SOH;
    public static final char[]  taggedchars_ZeroPlusTick   = {'2','7','4', EQUALSchar, '1', SOHchar};
    public static final String  text_ZeroPlusTick          = "ZeroPlusTick";
    public static final char    MinusTick                  = '2';
    public static final String  string_MinusTick           = "2";
    public static final String  tagged_MinusTick           = TagIDAsString + EQUALS + string_MinusTick + SOH;
    public static final char[]  taggedchars_MinusTick      = {'2','7','4', EQUALSchar, '2', SOHchar};
    public static final String  text_MinusTick             = "MinusTick";
    public static final char    ZeroMinusTick              = '3';
    public static final String  string_ZeroMinusTick       = "3";
    public static final String  tagged_ZeroMinusTick       = TagIDAsString + EQUALS + string_ZeroMinusTick + SOH;
    public static final char[]  taggedchars_ZeroMinusTick  = {'2','7','4', EQUALSchar, '3', SOHchar};
    public static final String  text_ZeroMinusTick         = "ZeroMinusTick";

    private static FixTickDirectionField flyweightPlusTick;
    public static final FixTickDirectionField flyweightPlusTick()
    {
        if (flyweightPlusTick == null)
        {
            synchronized(FixTickDirectionField.class)
            {
                if (flyweightPlusTick == null)
                {
                    flyweightPlusTick  = new FixTickDirectionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PlusTick;}
                     public String  getValueDescription()             {return text_PlusTick;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PlusTick).append("|").append(text_PlusTick).append("]").toString();}
                     public boolean isPlusTick()                      {return true;}
                     public char    charValue()                       {return PlusTick;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PlusTick);}
                    };
                }
            }
        }

        return flyweightPlusTick;
    }

    private static FixTickDirectionField flyweightZeroPlusTick;
    public static final FixTickDirectionField flyweightZeroPlusTick()
    {
        if (flyweightZeroPlusTick == null)
        {
            synchronized(FixTickDirectionField.class)
            {
                if (flyweightZeroPlusTick == null)
                {
                    flyweightZeroPlusTick  = new FixTickDirectionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ZeroPlusTick;}
                     public String  getValueDescription()             {return text_ZeroPlusTick;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ZeroPlusTick).append("|").append(text_ZeroPlusTick).append("]").toString();}
                     public boolean isZeroPlusTick()                  {return true;}
                     public char    charValue()                       {return ZeroPlusTick;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ZeroPlusTick);}
                    };
                }
            }
        }

        return flyweightZeroPlusTick;
    }

    private static FixTickDirectionField flyweightMinusTick;
    public static final FixTickDirectionField flyweightMinusTick()
    {
        if (flyweightMinusTick == null)
        {
            synchronized(FixTickDirectionField.class)
            {
                if (flyweightMinusTick == null)
                {
                    flyweightMinusTick  = new FixTickDirectionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_MinusTick;}
                     public String  getValueDescription()             {return text_MinusTick;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_MinusTick).append("|").append(text_MinusTick).append("]").toString();}
                     public boolean isMinusTick()                     {return true;}
                     public char    charValue()                       {return MinusTick;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_MinusTick);}
                    };
                }
            }
        }

        return flyweightMinusTick;
    }

    private static FixTickDirectionField flyweightZeroMinusTick;
    public static final FixTickDirectionField flyweightZeroMinusTick()
    {
        if (flyweightZeroMinusTick == null)
        {
            synchronized(FixTickDirectionField.class)
            {
                if (flyweightZeroMinusTick == null)
                {
                    flyweightZeroMinusTick  = new FixTickDirectionField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ZeroMinusTick;}
                     public String  getValueDescription()             {return text_ZeroMinusTick;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ZeroMinusTick).append("|").append(text_ZeroMinusTick).append("]").toString();}
                     public boolean isZeroMinusTick()                 {return true;}
                     public char    charValue()                       {return ZeroMinusTick;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ZeroMinusTick);}
                    };
                }
            }
        }

        return flyweightZeroMinusTick;
    }


    public boolean isPlusTick()        {return false;}
    public boolean isZeroPlusTick()    {return false;}
    public boolean isMinusTick()       {return false;}
    public boolean isZeroMinusTick()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixTickDirectionField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixTickDirectionField create(final char param)
    {
        switch (param)
        {                                                                                           
            case PlusTick:      return flyweightPlusTick();
            case ZeroPlusTick:  return flyweightZeroPlusTick();
            case MinusTick:     return flyweightMinusTick();
            case ZeroMinusTick: return flyweightZeroMinusTick();
        }
                                                                                                    
        return null;
    }                                                                                               
}
