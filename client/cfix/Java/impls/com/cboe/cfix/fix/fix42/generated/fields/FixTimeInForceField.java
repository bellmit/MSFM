package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixTimeInForceField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [59] (known as TimeInForce).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixTimeInForceField implements FixFieldIF, HasCharValueIF
{   
    public static final int    TagID         =  59;
    public static final String TagIDAsString = "59";
    public static final char[] TagIDAsChars  = {'5','9'};
    public static final String TagName       = "TimeInForce";
    public static final String TagFixType    = "CHAR";

    public static final char    Day                            = '0';
    public static final String  string_Day                     = "0";
    public static final String  tagged_Day                     = TagIDAsString + EQUALS + string_Day + SOH;
    public static final char[]  taggedchars_Day                = {'5','9', EQUALSchar, '0', SOHchar};
    public static final String  text_Day                       = "Day";
    public static final char    GoodTillCancel                 = '1';
    public static final String  string_GoodTillCancel          = "1";
    public static final String  tagged_GoodTillCancel          = TagIDAsString + EQUALS + string_GoodTillCancel + SOH;
    public static final char[]  taggedchars_GoodTillCancel     = {'5','9', EQUALSchar, '1', SOHchar};
    public static final String  text_GoodTillCancel            = "GoodTillCancel";
    public static final char    AtTheOpening                   = '2';
    public static final String  string_AtTheOpening            = "2";
    public static final String  tagged_AtTheOpening            = TagIDAsString + EQUALS + string_AtTheOpening + SOH;
    public static final char[]  taggedchars_AtTheOpening       = {'5','9', EQUALSchar, '2', SOHchar};
    public static final String  text_AtTheOpening              = "AtTheOpening";
    public static final char    ImmediateOrCancel              = '3';
    public static final String  string_ImmediateOrCancel       = "3";
    public static final String  tagged_ImmediateOrCancel       = TagIDAsString + EQUALS + string_ImmediateOrCancel + SOH;
    public static final char[]  taggedchars_ImmediateOrCancel  = {'5','9', EQUALSchar, '3', SOHchar};
    public static final String  text_ImmediateOrCancel         = "ImmediateOrCancel";
    public static final char    FillOrKill                     = '4';
    public static final String  string_FillOrKill              = "4";
    public static final String  tagged_FillOrKill              = TagIDAsString + EQUALS + string_FillOrKill + SOH;
    public static final char[]  taggedchars_FillOrKill         = {'5','9', EQUALSchar, '4', SOHchar};
    public static final String  text_FillOrKill                = "FillOrKill";
    public static final char    GoodTillCrossing               = '5';
    public static final String  string_GoodTillCrossing        = "5";
    public static final String  tagged_GoodTillCrossing        = TagIDAsString + EQUALS + string_GoodTillCrossing + SOH;
    public static final char[]  taggedchars_GoodTillCrossing   = {'5','9', EQUALSchar, '5', SOHchar};
    public static final String  text_GoodTillCrossing          = "GoodTillCrossing";
    public static final char    GoodTillDate                   = '6';
    public static final String  string_GoodTillDate            = "6";
    public static final String  tagged_GoodTillDate            = TagIDAsString + EQUALS + string_GoodTillDate + SOH;
    public static final char[]  taggedchars_GoodTillDate       = {'5','9', EQUALSchar, '6', SOHchar};
    public static final String  text_GoodTillDate              = "GoodTillDate";

    private static FixTimeInForceField flyweightDay;
    public static final FixTimeInForceField flyweightDay()
    {
        if (flyweightDay == null)
        {
            synchronized(FixTimeInForceField.class)
            {
                if (flyweightDay == null)
                {
                    flyweightDay  = new FixTimeInForceField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Day;}
                     public String  getValueDescription()             {return text_Day;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Day).append("|").append(text_Day).append("]").toString();}
                     public boolean isDay()                           {return true;}
                     public char    charValue()                       {return Day;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Day);}
                    };
                }
            }
        }

        return flyweightDay;
    }

    private static FixTimeInForceField flyweightGoodTillCancel;
    public static final FixTimeInForceField flyweightGoodTillCancel()
    {
        if (flyweightGoodTillCancel == null)
        {
            synchronized(FixTimeInForceField.class)
            {
                if (flyweightGoodTillCancel == null)
                {
                    flyweightGoodTillCancel  = new FixTimeInForceField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_GoodTillCancel;}
                     public String  getValueDescription()             {return text_GoodTillCancel;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_GoodTillCancel).append("|").append(text_GoodTillCancel).append("]").toString();}
                     public boolean isGoodTillCancel()                {return true;}
                     public char    charValue()                       {return GoodTillCancel;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_GoodTillCancel);}
                    };
                }
            }
        }

        return flyweightGoodTillCancel;
    }

    private static FixTimeInForceField flyweightAtTheOpening;
    public static final FixTimeInForceField flyweightAtTheOpening()
    {
        if (flyweightAtTheOpening == null)
        {
            synchronized(FixTimeInForceField.class)
            {
                if (flyweightAtTheOpening == null)
                {
                    flyweightAtTheOpening  = new FixTimeInForceField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_AtTheOpening;}
                     public String  getValueDescription()             {return text_AtTheOpening;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_AtTheOpening).append("|").append(text_AtTheOpening).append("]").toString();}
                     public boolean isAtTheOpening()                  {return true;}
                     public char    charValue()                       {return AtTheOpening;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_AtTheOpening);}
                    };
                }
            }
        }

        return flyweightAtTheOpening;
    }

    private static FixTimeInForceField flyweightImmediateOrCancel;
    public static final FixTimeInForceField flyweightImmediateOrCancel()
    {
        if (flyweightImmediateOrCancel == null)
        {
            synchronized(FixTimeInForceField.class)
            {
                if (flyweightImmediateOrCancel == null)
                {
                    flyweightImmediateOrCancel  = new FixTimeInForceField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_ImmediateOrCancel;}
                     public String  getValueDescription()             {return text_ImmediateOrCancel;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_ImmediateOrCancel).append("|").append(text_ImmediateOrCancel).append("]").toString();}
                     public boolean isImmediateOrCancel()             {return true;}
                     public char    charValue()                       {return ImmediateOrCancel;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_ImmediateOrCancel);}
                    };
                }
            }
        }

        return flyweightImmediateOrCancel;
    }

    private static FixTimeInForceField flyweightFillOrKill;
    public static final FixTimeInForceField flyweightFillOrKill()
    {
        if (flyweightFillOrKill == null)
        {
            synchronized(FixTimeInForceField.class)
            {
                if (flyweightFillOrKill == null)
                {
                    flyweightFillOrKill  = new FixTimeInForceField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_FillOrKill;}
                     public String  getValueDescription()             {return text_FillOrKill;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_FillOrKill).append("|").append(text_FillOrKill).append("]").toString();}
                     public boolean isFillOrKill()                    {return true;}
                     public char    charValue()                       {return FillOrKill;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_FillOrKill);}
                    };
                }
            }
        }

        return flyweightFillOrKill;
    }

    private static FixTimeInForceField flyweightGoodTillCrossing;
    public static final FixTimeInForceField flyweightGoodTillCrossing()
    {
        if (flyweightGoodTillCrossing == null)
        {
            synchronized(FixTimeInForceField.class)
            {
                if (flyweightGoodTillCrossing == null)
                {
                    flyweightGoodTillCrossing  = new FixTimeInForceField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_GoodTillCrossing;}
                     public String  getValueDescription()             {return text_GoodTillCrossing;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_GoodTillCrossing).append("|").append(text_GoodTillCrossing).append("]").toString();}
                     public boolean isGoodTillCrossing()              {return true;}
                     public char    charValue()                       {return GoodTillCrossing;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_GoodTillCrossing);}
                    };
                }
            }
        }

        return flyweightGoodTillCrossing;
    }

    private static FixTimeInForceField flyweightGoodTillDate;
    public static final FixTimeInForceField flyweightGoodTillDate()
    {
        if (flyweightGoodTillDate == null)
        {
            synchronized(FixTimeInForceField.class)
            {
                if (flyweightGoodTillDate == null)
                {
                    flyweightGoodTillDate  = new FixTimeInForceField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_GoodTillDate;}
                     public String  getValueDescription()             {return text_GoodTillDate;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_GoodTillDate).append("|").append(text_GoodTillDate).append("]").toString();}
                     public boolean isGoodTillDate()                  {return true;}
                     public char    charValue()                       {return GoodTillDate;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_GoodTillDate);}
                    };
                }
            }
        }

        return flyweightGoodTillDate;
    }


    public boolean isDay()                 {return false;}
    public boolean isGoodTillCancel()      {return false;}
    public boolean isAtTheOpening()        {return false;}
    public boolean isImmediateOrCancel()   {return false;}
    public boolean isFillOrKill()          {return false;}
    public boolean isGoodTillCrossing()    {return false;}
    public boolean isGoodTillDate()        {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixTimeInForceField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static FixTimeInForceField create(final char param)
    {
        switch (param)
        {                                                                                           
            case Day:               return flyweightDay();
            case GoodTillCancel:    return flyweightGoodTillCancel();
            case AtTheOpening:      return flyweightAtTheOpening();
            case ImmediateOrCancel: return flyweightImmediateOrCancel();
            case FillOrKill:        return flyweightFillOrKill();
            case GoodTillCrossing:  return flyweightGoodTillCrossing();
            case GoodTillDate:      return flyweightGoodTillDate();
        }
                                                                                                    
        return null;
    }                                                                                               
}
