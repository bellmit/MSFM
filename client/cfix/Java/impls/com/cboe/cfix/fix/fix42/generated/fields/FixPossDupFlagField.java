package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixPossDupFlagField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [43] (known as PossDupFlag).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;

public abstract class FixPossDupFlagField implements FixFieldIF, HasBooleanValueIF
{   
    public static final int    TagID         =  43;
    public static final String TagIDAsString = "43";
    public static final char[] TagIDAsChars  = {'4','3'};
    public static final String TagName       = "PossDupFlag";
    public static final String TagFixType    = "BOOLEAN";

    public static final boolean PossibleDuplicate                 = true;
    public static final String  string_PossibleDuplicate          = FIX_YES;
    public static final String  tagged_PossibleDuplicate          = TagIDAsString + EQUALS + string_PossibleDuplicate + SOH;
    public static final char    char_PossibleDuplicate            = 'Y';
    public static final char[]  taggedchars_PossibleDuplicate     = {'4','3', EQUALSchar, 'Y', SOHchar};
    public static final String  text_PossibleDuplicate            = "PossibleDuplicate";
    public static final boolean OriginalTransmission              = false;
    public static final String  string_OriginalTransmission       = FIX_NO;
    public static final String  tagged_OriginalTransmission       = TagIDAsString + EQUALS + string_OriginalTransmission + SOH;
    public static final char    char_OriginalTransmission         = 'N';
    public static final char[]  taggedchars_OriginalTransmission  = {'4','3', EQUALSchar, 'N', SOHchar};
    public static final String  text_OriginalTransmission         = "OriginalTransmission";

    private static FixPossDupFlagField flyweightPossibleDuplicate;
    public static final FixPossDupFlagField flyweightPossibleDuplicate()
    {
        if (flyweightPossibleDuplicate == null)
        {
            synchronized(FixPossDupFlagField.class)
            {
                if (flyweightPossibleDuplicate == null)
                {
                    flyweightPossibleDuplicate  = new FixPossDupFlagField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_PossibleDuplicate;}
                     public String  getValueDescription()             {return text_PossibleDuplicate;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_PossibleDuplicate).append("|").append(text_PossibleDuplicate).append("]").toString();}
                     public boolean isPossibleDuplicate()             {return true;}
                     public boolean booleanValue()                    {return PossibleDuplicate;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_PossibleDuplicate);}
                    };
                }
            }
        }

        return flyweightPossibleDuplicate;
    }

    private static FixPossDupFlagField flyweightOriginalTransmission;
    public static final FixPossDupFlagField flyweightOriginalTransmission()
    {
        if (flyweightOriginalTransmission == null)
        {
            synchronized(FixPossDupFlagField.class)
            {
                if (flyweightOriginalTransmission == null)
                {
                    flyweightOriginalTransmission  = new FixPossDupFlagField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_OriginalTransmission;}
                     public String  getValueDescription()             {return text_OriginalTransmission;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_OriginalTransmission).append("|").append(text_OriginalTransmission).append("]").toString();}
                     public boolean isOriginalTransmission()          {return true;}
                     public boolean booleanValue()                    {return OriginalTransmission;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_OriginalTransmission);}
                    };
                }
            }
        }

        return flyweightOriginalTransmission;
    }


    public boolean isPossibleDuplicate()      {return false;}
    public boolean isOriginalTransmission()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixPossDupFlagField create(char[] array, int offset, int length)
    {
        if (length == 1)
        {                                                                                           
            if (array[offset] == char_PossibleDuplicate)    return flyweightPossibleDuplicate();
            if (array[offset] == char_OriginalTransmission) return flyweightOriginalTransmission();
        }
        return null;
    }

    public static final char[] truefalse_Flyweight  = new char[] {FixFieldIF.FIX_YESchar, FixFieldIF.FIX_NOchar};
    public static FixPossDupFlagField create(boolean param)
    {
        return create(truefalse_Flyweight, param ? 0 : 1, 1);
    }                                                                                               
}
