package com.cboe.cfix.fix.fix42.generated.fields;

/**
 * FixCoveredOrUncoveredField.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [203] (known as CoveredOrUncovered).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX42.xml file.
 *
 */

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class FixCoveredOrUncoveredField implements FixFieldIF, HasIntValueIF
{   
    public static final int    TagID         =  203;
    public static final String TagIDAsString = "203";
    public static final char[] TagIDAsChars  = {'2','0','3'};
    public static final String TagName       = "CoveredOrUncovered";
    public static final String TagFixType    = "INT";
    public static final char[]  taggedchars_value0 = {'2','0','3', EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {'2','0','3', EQUALSchar, ONEchar,  SOHchar};

    public static final int     Covered                = 0;
    public static final String  string_Covered         = "0";
    public static final String  tagged_Covered         = TagIDAsString + EQUALS + string_Covered + SOH;
    public static final char[]  taggedchars_Covered    = {'2','0','3', EQUALSchar, '0', SOHchar};
    public static final String  text_Covered           = "Covered";
    public static final int     Uncovered              = 1;
    public static final String  string_Uncovered       = "1";
    public static final String  tagged_Uncovered       = TagIDAsString + EQUALS + string_Uncovered + SOH;
    public static final char[]  taggedchars_Uncovered  = {'2','0','3', EQUALSchar, '1', SOHchar};
    public static final String  text_Uncovered         = "Uncovered";

    private static FixCoveredOrUncoveredField flyweightCovered;
    public static final FixCoveredOrUncoveredField flyweightCovered()
    {
        if (flyweightCovered == null)
        {
            synchronized(FixCoveredOrUncoveredField.class)
            {
                if (flyweightCovered == null)
                {
                    flyweightCovered  = new FixCoveredOrUncoveredField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Covered;}
                     public String  getValueDescription()             {return text_Covered;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Covered).append("|").append(text_Covered).append("]").toString();}
                     public boolean isCovered()                       {return true;}
                     public int     intValue()                        {return Covered;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Covered);}
                    };
                }
            }
        }

        return flyweightCovered;
    }

    private static FixCoveredOrUncoveredField flyweightUncovered;
    public static final FixCoveredOrUncoveredField flyweightUncovered()
    {
        if (flyweightUncovered == null)
        {
            synchronized(FixCoveredOrUncoveredField.class)
            {
                if (flyweightUncovered == null)
                {
                    flyweightUncovered  = new FixCoveredOrUncoveredField()
                    {public boolean hasValue()                        {return true;}
                     public String  getValue()                        {return string_Uncovered;}
                     public String  getValueDescription()             {return text_Uncovered;}
                     public String  toString()                        {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_Uncovered).append("|").append(text_Uncovered).append("]").toString();}
                     public boolean isUncovered()                     {return true;}
                     public int     intValue()                        {return Uncovered;}
                     public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(taggedchars_Uncovered);}
                    };
                }
            }
        }

        return flyweightUncovered;
    }


    public boolean isCovered()     {return false;}
    public boolean isUncovered()   {return false;}

    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}

    public static FixCoveredOrUncoveredField create(char[] array, int offset, int length)
    {
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static FixCoveredOrUncoveredField create(final int param)
    {
        switch (param)
        {                                                                                           
            case Covered:   return flyweightCovered();
            case Uncovered: return flyweightUncovered();
        }
                                                                                                    
        return null;
    }                                                                                               
}
