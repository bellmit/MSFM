<xsl:stylesheet version="2.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:fix="http://www.cboe.com/fix/xslt"
                >

<!-- @author Dmitry Volpyansky

     must be built with JDK 1.4.1 and Saxon XSLT version 7.4 from http://saxon.sourceforge.net/

     classpath needs to include /client/cfix/generator/saxon7.jar and /client/cfix/generator/saxon7_jdom.jar

     command line example: java net.sf.saxon.Transform CboeFIX42.xml Fix_Class_Field_Main.xsl IMPLS_DIRECTORY="/client/cfix/impls"

     the IMPLS_DIRECTORY parameter specifies the output directory
-->

<xsl:param name="IMPLS_DIRECTORY">/tmp</xsl:param>

<xsl:output method="text" encoding="UTF-8" indent="no" name="text"/>

<xsl:strip-space elements="*"/>

<xsl:template match="text()"/>

<xsl:include href="Fix_Helper.xsl"/>

<xsl:template match="/fix/fields/field">
<xsl:result-document href="file://{$IMPLS_DIRECTORY}/com/cboe/cfix/fix/fix{/fix/@versiontag}/generated/fields/Fix{@name}Field.java" format="text">
<xsl:text/>package com.cboe.cfix.fix.fix<xsl:value-of select="/fix/@versiontag"/>.generated.fields;

/**
 * Fix<xsl:value-of select="@name"/>Field.java
 *
 * @author Dmitry Volpyansky
 *
 */

/**
 * This GENERATED file implements FIX Protocol's Field Tag [<xsl:value-of select="@number"/>] (known as <xsl:value-of select="@name"/>).
 *
 * WARNING: This entire file is completely generated by XSLT stylesheets from CboeFIX<xsl:value-of select="/fix/@versiontag"/>.xml file.
 *
 */
<xsl:text/>
<xsl:choose>
    <xsl:when test="@type='BOOLEAN'">
import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;

public abstract class Fix<xsl:value-of select="@name"/>Field implements FixFieldIF, HasBooleanValueIF<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='INT'">
import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class Fix<xsl:value-of select="@name"/>Field implements FixFieldIF, HasIntValueIF<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='CHAR'">
import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class Fix<xsl:value-of select="@name"/>Field implements FixFieldIF, HasCharValueIF<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='DOUBLE'">
import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;

public abstract class Fix<xsl:value-of select="@name"/>Field implements FixFieldIF, HasDoubleValueIF<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='PRICE'">
import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;
import com.cboe.idl.cmiUtil.*;

public abstract class Fix<xsl:value-of select="@name"/>Field implements FixFieldIF, HasPriceStructValueIF<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='UTCDATE' or @type='UTCTIMEONLY' or @type='UTCTIMESTAMP' or @type='LOCALMKTDATE'">
import java.util.*;

import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class Fix<xsl:value-of select="@name"/>Field implements FixFieldIF, HasDateValueIF<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='MULTIPLEVALUESTRING'">
import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class Fix<xsl:value-of select="@name"/>Field implements FixFieldIF<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='STRING'">
import com.cboe.cfix.interfaces.*;

public abstract class Fix<xsl:value-of select="@name"/>Field implements FixFieldIF<xsl:text/>
    </xsl:when>
    <xsl:otherwise>
import com.cboe.cfix.interfaces.*;
import com.cboe.cfix.util.*;
import com.cboe.client.util.*;

public abstract class Fix<xsl:value-of select="@name"/>Field implements FixFieldIF<xsl:text/>
    </xsl:otherwise>
</xsl:choose>
{   <xsl:text/>
    <xsl:call-template name="fix:FixFieldClass_Const_TagID"/>
    <xsl:text>&#xA;</xsl:text>
    <xsl:choose>
       <xsl:when test="count(value) = 0">
            <xsl:if test="not(@type='STRING' or @type='DATA')">
            <xsl:call-template name="fix:FixFieldClass_Function_Factory_NoValue">
                <xsl:with-param name="baseClassName" select="fix:buildFixFieldName(@name)"/>
            </xsl:call-template>
            </xsl:if>
            <xsl:call-template name="fix:FixFieldClass_Function_Factory_NoValue2">
                <xsl:with-param name="baseClassName" select="fix:buildFixFieldName(@name)"/>
            </xsl:call-template>
            <xsl:call-template name="fix:FixFieldClass_Function_GetTag"/>
       </xsl:when>
       <xsl:otherwise>
            <xsl:variable name="longestDescription">
              <xsl:call-template name="fix:longestLengthString">
                <xsl:with-param name="nodeset" select="value/@description"/>
              </xsl:call-template>
            </xsl:variable>
            <xsl:text/><xsl:for-each select="value">
                <xsl:call-template name="fix:FixFieldClass_Const_TagValue_ContainingValue">
                    <xsl:with-param name="longestDescription" select="$longestDescription + 6"/>
                    <xsl:with-param name="baseClassName" select="fix:buildFixFieldName(../@name)"/>
                </xsl:call-template>
            </xsl:for-each>
            <xsl:text>&#xA;</xsl:text>
            <xsl:text/><xsl:for-each select="value">
                <xsl:call-template name="fix:FixFieldClass_Flyweights_ContainingValue">
                    <xsl:with-param name="longestDescription" select="$longestDescription"/>
                    <xsl:with-param name="baseClassName" select="fix:buildFixFieldName(../@name)"/>
                </xsl:call-template>
            </xsl:for-each>
            <xsl:text>&#xA;</xsl:text>
            <xsl:text/><xsl:for-each select="value">
                <xsl:call-template name="fix:FixFieldClass_IsFlyweights_ContainingValue">
                    <xsl:with-param name="longestDescription" select="$longestDescription"/>
                </xsl:call-template>
            </xsl:for-each>
            <xsl:text>&#xA;</xsl:text>
            <xsl:if test="@make_bit_index='Y'">
    public       <xsl:value-of select="if (count(value) &lt; 31) then 'int ' else 'long'"/>   bitIndex()       {return 0;}
            </xsl:if>
            <xsl:call-template name="fix:FixFieldClass_Function_GetTag"/>
            <xsl:text>&#xA;</xsl:text>
            <xsl:text/><xsl:for-each select="value">
                <xsl:call-template name="fix:FixFieldClass_Function_Factory_ContainingValue">
                    <xsl:with-param name="longestDescription" select="$longestDescription"/>
                    <xsl:with-param name="baseClassName" select="fix:buildFixFieldName(../@name)"/>
                </xsl:call-template>
            </xsl:for-each>
            <xsl:for-each select="value[../@type='MULTIPLEVALUESTRING']">
                <xsl:call-template name="fix:FixFieldClass_Function_Factory_ContainingMultipleValueString"/>
            </xsl:for-each>
       </xsl:otherwise>
    </xsl:choose>
    <xsl:text/><xsl:apply-templates/><xsl:text/>
}
</xsl:result-document>
</xsl:template>

<xsl:template name="fix:FixFieldClass_Function_GetTag"><xsl:text/>
    public final int    getTag()                                      {return TagID;}
    public final String getTagAsString()                              {return TagIDAsString;}
    public final char[] getTagAsChars()                               {return TagIDAsChars;}
    public final String getTagName()                                  {return TagName;}
    public       String getValueDescription()                         {return getValue();}
    public       void   accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, getValue());}
    public       String toString()                                    {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(getValue()).append(']').toString();}<xsl:text/>
<xsl:if test="@cboe_char_array = 'Y'">
    public abstract char[] getValueAsChars();<xsl:text/>
</xsl:if>
</xsl:template>

<xsl:template name="fix:FixFieldClass_Function_ToString_ContainingValue">
  <xsl:param name="longestDescription" select="0"/>
  <xsl:choose>
    <xsl:when test="../@type='STRING'">
                                                                                                        <xsl:if test="position() = 1">
    public static String toString(String param)
    {                                                                                                   </xsl:if>
        if (<xsl:value-of select="fix:rightPad(concat(@description, '.equals(param))'), $longestDescription+15)"/> return text_<xsl:value-of select="@description"/>;<xsl:text/>
                                                                                                        <xsl:if test="position() = last()">
        return FixFieldHelper.TO_STRING_NO_MATCH;
    }                                                                                                   </xsl:if>
    </xsl:when>
    <xsl:when test="../@type='MULTIPLEVALUESTRING'">
                                                                                                        <xsl:if test="position() = 1">
    public static String toString(String param)
    {
        StringBuilder buffer = new StringBuilder(32);

        for (int i = 0; i <![CDATA[<]]> param.length(); i++)
        {
            switch (param.charAt(i))
            {                                                                                           </xsl:if>
                case <xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>: if (buffer.length() > 0) buffer.append(" "); buffer.append(text_<xsl:value-of select="@description"/>); break;<xsl:text/>
                                                                                                        <xsl:if test="position() = last()">
            }
        }

        if (buffer.length() != 0)
        {
            return buffer.toString();
        }

        return FixFieldHelper.TO_STRING_NO_MATCH;
    }                                                                                                   </xsl:if>
    </xsl:when>
    <xsl:when test="../@type='INT'">
                                                                                                    <xsl:if test="position() = 1">
    public static String toString(int param)
    {
        switch (param)
        {                                                                                           </xsl:if>
            case <xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>: return text_<xsl:value-of select="@description"/>;<xsl:text/>
                                                                                                    <xsl:if test="position() = last()">
        }

        return FixFieldHelper.TO_STRING_NO_MATCH;

    }                                                                                               </xsl:if>
    </xsl:when>
    <xsl:when test="../@type='BOOLEAN'">
                                                                                                    <xsl:if test="position() = 1">
    public static String toString(boolean bool)
    {
        {                                                                                           </xsl:if>
            if (bool == <xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>) return text_<xsl:value-of select="@description"/>;<xsl:text/>
                                                                                                    <xsl:if test="position() = last()">
        }

        return FixFieldHelper.TO_STRING_NO_MATCH;
    }                                                                                               </xsl:if>
    </xsl:when>
    <xsl:otherwise>
                                                                                                    <xsl:if test="position() = 1">
    public static String toString(char param)
    {
        switch (param)
        {                                                                                           </xsl:if>
            case <xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>: return text_<xsl:value-of select="@description"/>;<xsl:text/>
                                                                                                    <xsl:if test="position() = last()">
        }

        return FixFieldHelper.TO_STRING_NO_MATCH;
    }                                                                                               </xsl:if>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template name="fix:FixFieldClass_Const_TagValue_ContainingValue">
  <xsl:param name="baseClassName"/>
  <xsl:param name="longestDescription" select="0"/>
  <xsl:choose>
    <xsl:when test="../@type='STRING'">
    public static final String  <xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>        = "<xsl:value-of select="@enum"/>";
    public static final String  string_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/> = <xsl:value-of select="@description"/>;
    public static final char[]  chars_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>  = {<xsl:value-of select="fix:splitIntoChars(@enum)"/>};
    public static final String  tagged_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/> = TagIDAsString + EQUALS + string_<xsl:value-of select="@description"/> + SOH;
    public static final char[]  taggedchars_<xsl:value-of select="fix:rightPad(@description, $longestDescription - 5 )"/> = {<xsl:value-of select="fix:splitIntoChars(../@number)"/>, EQUALSchar, <xsl:value-of select="fix:splitIntoChars(@enum)"/>, SOHchar};
    public static final String  text_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>   = "<xsl:value-of select="@description"/>";<xsl:text/>
    </xsl:when>
    <xsl:when test="../@type='MULTIPLEVALUESTRING'">
    public static final char    <xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>        = '<xsl:value-of select="@enum"/>';
    public static final String  string_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/> = "<xsl:value-of select="@enum"/>";
    public static final String  tagged_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/> = TagIDAsString + EQUALS + string_<xsl:value-of select="@description"/> + SOH;
    public static final char[]  taggedchars_<xsl:value-of select="fix:rightPad(@description, $longestDescription - 5 )"/> = {<xsl:value-of select="fix:splitIntoChars(../@number)"/>, EQUALSchar, <xsl:value-of select="fix:splitIntoChars(@enum)"/>, SOHchar};
    public static final <xsl:value-of select="if (last() &lt; 31) then 'int    ' else 'long   '"/><xsl:text> bitmask_</xsl:text><xsl:value-of select="fix:rightPad(@description, $longestDescription - 1)"/> = <xsl:value-of select="if (last() &lt; 31) then '1' else '1L'"/> &lt;&lt; <xsl:value-of select="position()"/>;<xsl:value-of select="if (last() &gt; 9 and position() &lt; 10) then '  ' else ' '"/>public static final String text_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/> = "<xsl:value-of select="@description"/>";<xsl:text/>
    </xsl:when>
    <xsl:when test="../@type='BOOLEAN'">
    public static final boolean <xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>        = <xsl:value-of select="if (@enum = 'Y') then 'true' else 'false'"/>;
    public static final String  string_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/> = <xsl:value-of select="if (@enum = 'Y') then 'FIX_YES' else 'FIX_NO'"/>;
    public static final String  tagged_<xsl:value-of select="fix:rightPad(@description, $longestDescription )"/> = TagIDAsString + EQUALS + string_<xsl:value-of select="@description"/> + SOH;
    public static final char    char_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>   = '<xsl:value-of select="@enum"/>';
    public static final char[]  taggedchars_<xsl:value-of select="fix:rightPad(@description, $longestDescription - 5 )"/> = {<xsl:value-of select="fix:splitIntoChars(../@number)"/>, EQUALSchar, <xsl:value-of select="fix:splitIntoChars(@enum)"/>, SOHchar};
    public static final String  text_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>   = "<xsl:value-of select="@description"/>";<xsl:text/>
    </xsl:when>
    <xsl:when test="../@type='INT'">
    public static final int     <xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>        = <xsl:value-of select="@enum"/>;
    public static final String  string_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/> = "<xsl:value-of select="@enum"/>";
    public static final String  tagged_<xsl:value-of select="fix:rightPad(@description, $longestDescription )"/> = TagIDAsString + EQUALS + string_<xsl:value-of select="@description"/> + SOH;
    public static final char[]  taggedchars_<xsl:value-of select="fix:rightPad(@description, $longestDescription - 5 )"/> = {<xsl:value-of select="fix:splitIntoChars(../@number)"/>, EQUALSchar, <xsl:value-of select="fix:splitIntoChars(@enum)"/>, SOHchar};
    public static final String  text_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>   = "<xsl:value-of select="@description"/>";<xsl:text/>
    </xsl:when>
    <xsl:when test="../@type='CHAR'">
    public static final char    <xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>        = '<xsl:value-of select="@enum"/>';
    public static final String  string_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/> = "<xsl:value-of select="@enum"/>";
    public static final String  tagged_<xsl:value-of select="fix:rightPad(@description, $longestDescription )"/> = TagIDAsString + EQUALS + string_<xsl:value-of select="@description"/> + SOH;
    public static final char[]  taggedchars_<xsl:value-of select="fix:rightPad(@description, $longestDescription - 5 )"/> = {<xsl:value-of select="fix:splitIntoChars(../@number)"/>, EQUALSchar, <xsl:value-of select="fix:splitIntoChars(@enum)"/>, SOHchar};
    public static final String  text_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>   = "<xsl:value-of select="@description"/>";<xsl:text/>
    </xsl:when>
    <xsl:otherwise>
    public static final char    <xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>        = '<xsl:value-of select="@enum"/>';
    public static final String  string_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/> = "<xsl:value-of select="@enum"/>";
    public static final String  tagged_<xsl:value-of select="fix:rightPad(@description, $longestDescription )"/> = TagIDAsString + EQUALS + string_<xsl:value-of select="@description"/> + SOH;
    public static final char[]  taggedchars_<xsl:value-of select="fix:rightPad(@description, $longestDescription - 5 )"/> = {<xsl:value-of select="fix:splitIntoChars(../@number)"/>, EQUALSchar, <xsl:value-of select="fix:splitIntoChars(@enum)"/>, SOHchar};
    public static final String  text_<xsl:value-of select="fix:rightPad(@description, $longestDescription)"/>   = "<xsl:value-of select="@description"/>";<xsl:text/>
    </xsl:otherwise>
  </xsl:choose>
  <xsl:if test="../@make_bit_index='Y'">
    public static final <xsl:value-of select="if (count(value) &lt; 31) then 'int ' else 'long'"/>    bitIndex_<xsl:value-of select="fix:rightPad(@description, $longestDescription - 3)"/>   = <xsl:value-of select="position()"/>;<xsl:text/>
  </xsl:if>
</xsl:template>

<xsl:template name="fix:FixFieldClass_Flyweights_ContainingValue">
  <xsl:param name="baseClassName"/>
  <xsl:param name="longestDescription" select="0"/>
  <xsl:variable name="longestFunctionName" select="fix:max($longestDescription + 6, 33)"/>
    private static <xsl:value-of select="$baseClassName"/> flyweight<xsl:value-of select="@description"/>;
    public static final <xsl:value-of select="$baseClassName"/> flyweight<xsl:value-of select="@description"/>()
    {
        if (flyweight<xsl:value-of select="@description"/> == null)
        {
            synchronized(<xsl:value-of select="$baseClassName"/>.class)
            {
                if (flyweight<xsl:value-of select="@description"/> == null)
                {
                    flyweight<xsl:value-of select="@description"/>  = new <xsl:value-of select="$baseClassName"/>()
                    {public boolean <xsl:value-of select="fix:rightPad('hasValue()',            $longestFunctionName)"/> {return true;}
                     public String  <xsl:value-of select="fix:rightPad('getValue()',            $longestFunctionName)"/> {return string_<xsl:value-of select="@description"/>;}
                     public String  <xsl:value-of select="fix:rightPad('getValueDescription()', $longestFunctionName)"/> {return text_<xsl:value-of select="@description"/>;}
                     public String  <xsl:value-of select="fix:rightPad('toString()',            $longestFunctionName)"/> {return new StringBuilder(64).append(TagName).append("{").append(TagIDAsString).append("} [").append(string_<xsl:value-of select="@description"/>).append("|").append(text_<xsl:value-of select="@description"/>).append("]").toString();}
                     public boolean <xsl:value-of select="fix:rightPad(concat('is', @description, '()'), $longestFunctionName)"/> {return true;}<xsl:text/>
                 <xsl:choose>
                     <xsl:when test="../@type='INT'">
                     public int     <xsl:value-of select="fix:rightPad('intValue()',     $longestFunctionName)"/> {return <xsl:value-of select="@description"/>;}<xsl:text/></xsl:when>
                     <xsl:when test="../@type='CHAR'">
                     public char    <xsl:value-of select="fix:rightPad('charValue()',    $longestFunctionName)"/> {return <xsl:value-of select="@description"/>;}<xsl:text/></xsl:when>
                     <xsl:when test="../@type='DOUBLE'">
                     public double  <xsl:value-of select="fix:rightPad('doubleValue()',  $longestFunctionName)"/> {return <xsl:value-of select="@description"/>;}<xsl:text/></xsl:when>
                     <xsl:when test="../@type='PRICE'">
                     public PriceStruct <xsl:value-of select="fix:rightPad('priceStructValue()',  $longestFunctionName)"/> {return <xsl:value-of select="@description"/>;}<xsl:text/></xsl:when>
                     <xsl:when test="../@type='UTCDATE'">
                     public Date    <xsl:value-of select="fix:rightPad('dateValue()',    $longestFunctionName)"/> {return <xsl:value-of select="@description"/>;}<xsl:text/></xsl:when>
                     <xsl:when test="../@type='UTCTIMEONLY'">
                     public Date    <xsl:value-of select="fix:rightPad('dateValue()',    $longestFunctionName)"/> {return <xsl:value-of select="@description"/>;}<xsl:text/></xsl:when>
                     <xsl:when test="../@type='UTCTIMESTAMP'">
                     public Date    <xsl:value-of select="fix:rightPad('dateValue()',    $longestFunctionName)"/> {return <xsl:value-of select="@description"/>;}<xsl:text/></xsl:when>
                     <xsl:when test="../@type='LOCALMKTDATE'">
                     public Date    <xsl:value-of select="fix:rightPad('dateValue()',    $longestFunctionName)"/> {return <xsl:value-of select="@description"/>;}<xsl:text/></xsl:when>
                     <xsl:when test="../@type='BOOLEAN'">
                     public boolean <xsl:value-of select="fix:rightPad('booleanValue()', $longestFunctionName)"/> {return <xsl:value-of select="@description"/>;}<xsl:text/></xsl:when>
                 </xsl:choose>
                    <xsl:if test="../@make_bit_index='Y'">
                     public <xsl:value-of select="if (count(value) &lt; 31) then 'int ' else 'long'"/><xsl:text>    </xsl:text><xsl:value-of select="fix:rightPad('bitIndex()', $longestFunctionName)"/> {return bitIndex_<xsl:value-of select="@description"/>;}<xsl:text/>
                    </xsl:if>
                     public void    <xsl:value-of select="fix:rightPad('accept(FixMessageBuilderIF fixMessageBuilder)', $longestFunctionName)"/> {fixMessageBuilder.append(taggedchars_<xsl:value-of select="@description"/>);}
                    };<xsl:text/>
                }
            }
        }

        return flyweight<xsl:value-of select="@description"/>;
    }
</xsl:template>

<xsl:template name="fix:FixFieldClass_IsFlyweights_ContainingValue">
  <xsl:param name="longestDescription" select="0"/>
    public boolean <xsl:value-of select="fix:rightPad(concat('is', @description, '()'), $longestDescription + 6)"/> {return false;}<xsl:text/>
</xsl:template>

<xsl:template name="fix:FixFieldClass_Const_TagID"><xsl:text/>
    public static final int    TagID         =  <xsl:value-of select="@number"/>;
    public static final String TagIDAsString = "<xsl:value-of select="@number"/>";
    public static final char[] TagIDAsChars  = {<xsl:value-of select="fix:splitIntoChars(@number)"/>};
    public static final String TagName       = "<xsl:value-of select="@name"/>";
    public static final String TagFixType    = "<xsl:value-of select="@type"/>";<xsl:text/>
    <xsl:if test="@type='DOUBLE' or @type='INT' or @type='PRICE'">
    public static final char[]  taggedchars_value0 = {<xsl:value-of select="fix:splitIntoChars(@number)"/>, EQUALSchar, ZEROchar, SOHchar};
    public static final char[]  taggedchars_value1 = {<xsl:value-of select="fix:splitIntoChars(@number)"/>, EQUALSchar, ONEchar,  SOHchar};<xsl:text/>
    </xsl:if>
</xsl:template>

<xsl:template name="fix:FixFieldClass_Function_Factory_ContainingMultipleValueString">
                                                                                                        <xsl:if test="position() = 1">
    public static String toMultipleValueString(<xsl:value-of select="if (last() &lt; 31) then 'int' else 'long'"/> bitmask)
    {
        StringBuilder buffer = new StringBuilder();
                                                                                                        </xsl:if>
        if (BitHelper.isBitMaskSet(bitmask, bitmask_<xsl:value-of select="@description"/>)) buffer.append(string_<xsl:value-of select="@description"/>).append(' ');<xsl:text/>
                                                                                                        <xsl:if test="position() = last()">

        if (buffer.charAt(buffer.length() - 1) == ' ') buffer.setLength(buffer.length() - 1);

        return buffer.toString();
    }                                                                                                   </xsl:if>
</xsl:template>

<xsl:template name="fix:FixFieldClass_Function_Factory_ContainingValue">
  <xsl:param name="baseClassName"/>
  <xsl:param name="longestDescription" select="0"/>
  <xsl:choose>
    <xsl:when test="../@type='STRING'">
                                                                                                    <xsl:if test="position() = 1">
    public static <xsl:value-of select="$baseClassName"/> create(char[] array, int offset, int length)
    {
        return create(new String(array, offset, length));
    }

    public static <xsl:value-of select="$baseClassName"/> create(final String paramString)
    {                                                                                               </xsl:if>
        if (<xsl:value-of select="fix:rightPad(concat(@description, '.equals(paramString))'), $longestDescription+15)"/> return flyweight<xsl:value-of select="@description"/>();<xsl:text/>
                                                                                                    <xsl:if test="position() = last()">
                                                                                                    <xsl:choose>
                                                                                                    <xsl:when test="../@other_values_allowed = 'Y'">
        return new <xsl:value-of select="$baseClassName"/>()
        {       public String  valueString = paramString;<xsl:text/>                                <xsl:if test="../@cboe_char_array = 'Y'">
                public char[]  valueChars  = paramString.toCharArray();
                public char[]  getValueAsChars()                 {return valueChars;}               </xsl:if>
                public boolean hasValue()                        {return valueString != null;}
                public String  getValue()                        {return valueString;}
                public String  getValueDescription()             {return valueString;}
        };<xsl:text/>
                                                                                                    </xsl:when>
                                                                                                    <xsl:otherwise>
        return null;<xsl:text/>
                                                                                                    </xsl:otherwise>
                                                                                                    </xsl:choose>
    }                                                                                               </xsl:if>
    </xsl:when>
    <xsl:when test="../@type='INT'">
                                                                                                    <xsl:if test="position() = 1">
    public static <xsl:value-of select="$baseClassName"/> create(char[] array, int offset, int length)
    {<xsl:text/>
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);
    }

    public static <xsl:value-of select="$baseClassName"/> create(final int param)
    {
        switch (param)
        {                                                                                           </xsl:if>
            case <xsl:value-of select="fix:rightPad(concat(@description, ':'), $longestDescription+1)"/> return flyweight<xsl:value-of select="@description"/>();<xsl:text/>
                                                                                                    <xsl:if test="position() = last()">
        }
                                                                                                    <xsl:choose>
                                                                                                    <xsl:when test="../@other_values_allowed = 'Y'">
        return new <xsl:value-of select="$baseClassName"/>()
        {       public int     value = param;
                public boolean hasValue()                                    {return true;}
                public String  getValue()                                    {return StringHelper.intToString(value);}
                public int     intValue()                                    {return <xsl:value-of select="@description"/>;}
                public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, value);}
        };<xsl:text/>
                                                                                                    </xsl:when>
                                                                                                    <xsl:otherwise>
        return null;<xsl:text/>
                                                                                                    </xsl:otherwise>
                                                                                                    </xsl:choose>
    }                                                                                               </xsl:if>
    </xsl:when>
    <xsl:when test="../@type='CHAR'">
                                                                                                    <xsl:if test="position() = 1">
    public static <xsl:value-of select="$baseClassName"/> create(char[] array, int offset, int length)
    {
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;
    }

    public static <xsl:value-of select="$baseClassName"/> create(final char param)
    {
        switch (param)
        {                                                                                           </xsl:if>
            case <xsl:value-of select="fix:rightPad(concat(@description, ':'), $longestDescription+1)"/> return flyweight<xsl:value-of select="@description"/>();<xsl:text/>
                                                                                                    <xsl:if test="position() = last()">
        }
                                                                                                    <xsl:choose>
                                                                                                    <xsl:when test="../@other_values_allowed = 'Y'">
        return new <xsl:value-of select="$baseClassName"/>()
        {       public char    value = param;
                public boolean hasValue()                        {return true;}
                public String  getValue()                        {return "" + value;}
                public char    charValue()                       {return <xsl:value-of select="@description"/>;}
        };<xsl:text/>
                                                                                                    </xsl:when>
                                                                                                    <xsl:otherwise>
        return null;<xsl:text/>
                                                                                                    </xsl:otherwise>
                                                                                                    </xsl:choose>
    }                                                                                               </xsl:if>
    </xsl:when>
    <xsl:when test="../@type='MULTIPLEVALUESTRING'">
                                                                                                        <xsl:if test="position() = 1">
    public static <xsl:value-of select="$baseClassName"/> create(char[] array, int offset, int length)
    {
        return create(new String(array, offset, length));
    }

    public static <xsl:value-of select="$baseClassName"/> create(final String multiparam)
    {
        <xsl:value-of select="if (last() &lt; 31) then 'int' else 'long'"/> bitmask = 0;

        for (int i = 0; i &lt; multiparam.length(); i++)
        {
            switch (multiparam.charAt(i))
            {                                                                                           </xsl:if>
                case <xsl:value-of select="@description"/>:
                    if (multiparam.length() == 1) return flyweight<xsl:value-of select="@description"/>();
                    bitmask |= bitmask_<xsl:value-of select="@description"/>;
                    break;<xsl:text/>
                                                                                                       <xsl:if test="position() = last()">
                default:
                    return null;
            }
        }

        if (bitmask == 0)
        {
            return null;
        }

        final <xsl:value-of select="if (last() &lt; 31) then 'int' else 'long'"/> bits = bitmask;

        return new <xsl:value-of select="$baseClassName"/>()
        {       public <xsl:value-of select="if (last() &lt; 31) then 'int' else 'long'"/> value = bits;
                public boolean hasValue()                        {return bits != <xsl:value-of select="if (last() &lt; 31) then '0' else '0L'"/>;}
                public String  getValue()                        {return this.toMultipleValueString(value);}
        };
    }                                                                                               </xsl:if>
    </xsl:when>
    <xsl:when test="../@type='BOOLEAN'">
                                                                                                    <xsl:if test="position() = 1">
    public static <xsl:value-of select="$baseClassName"/> create(char[] array, int offset, int length)
    {
        if (length == 1)
        {                                                                                           </xsl:if>
            if (array[offset] == char_<xsl:value-of select="fix:rightPad(concat(@description, ')'), $longestDescription+1)"/> return flyweight<xsl:value-of select="@description"/>();<xsl:text/>
                                                                                                    <xsl:if test="position() = last()">
        }
        return null;
    }

    public static final char[] truefalse_Flyweight  = new char[] {FixFieldIF.FIX_YESchar, FixFieldIF.FIX_NOchar};
    public static <xsl:value-of select="$baseClassName"/> create(boolean param)
    {
        return create(truefalse_Flyweight, param ? 0 : 1, 1);
    }                                                                                               </xsl:if>
    </xsl:when>
    <xsl:otherwise>
        CAN'T COMPILE <xsl:value-of select="../@type"/>
    }
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template name="fix:FixFieldClass_Function_Factory_NoValue">
  <xsl:param name="baseClassName"/>
    public static <xsl:value-of select="$baseClassName"/> create(final char[] array, final int offset, final int length)
    {<xsl:text/>
<xsl:choose>
    <xsl:when test="@type='MULTIPLEVALUESTRING'">
        return create(new String(array, offset, length));<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='INT'">
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }
        return create(param);<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='CHAR'">
        if (length == 1)
        {
            return create(array[offset]);
        }

        return null;<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='DOUBLE'">
        return create(Double.parseDouble(new String(array, offset, length)));<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='PRICE'">
        return create(PriceHelper.createPriceStruct(array, offset, length));<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='UTCDATE'">
        return create(DateHelper.extractDateInFixUTCDateFormat(array, offset, length));<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='UTCTIMEONLY'">
        return create(DateHelper.extractDateInFixUTCTimeOnlyFormat(array, offset, length));<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='UTCTIMESTAMP'">
        return create(DateHelper.extractDateInFixUTCTimeStampFormat(array, offset, length));<xsl:text/>
    </xsl:when>
    <xsl:when test="@type='LOCALMKTDATE'">
        return create(DateHelper.extractDateInFixLocalMktDateFormat(array, offset, length));<xsl:text/>
    </xsl:when>
    <xsl:otherwise>
        CAN'T COMPILE '<xsl:value-of select="@type"/>'
    </xsl:otherwise>
</xsl:choose>
    }
</xsl:template>

<xsl:template name="fix:FixFieldClass_Function_Factory_NoValue2">
  <xsl:param name="baseClassName"/>
<xsl:choose>
    <xsl:when test="@type='STRING' or @type='DATA'">
    public static <xsl:value-of select="$baseClassName"/> create(final char[] array, final int offset, final int length)
    {
        return create(new String(array, offset, length));
    }

    public static <xsl:value-of select="$baseClassName"/> create(final String paramString)
    {
        return new <xsl:value-of select="$baseClassName"/>()
        {   public String  valueString = paramString;<xsl:text/>                                    <xsl:if test="@cboe_char_array = 'Y'">
            public char[]  valueChars  = paramString.toCharArray();
            public char[]  getValueAsChars()                 {return valueChars;}                   </xsl:if>
            public boolean hasValue()                        {return valueString != null;}
            public String  getValue()                        {return valueString;}
            public String  getValueDescription()             {return valueString;}
        };
    }
    </xsl:when>
    <xsl:when test="@type='INT'">
    public static <xsl:value-of select="$baseClassName"/> create(final int param)
    {
        return new <xsl:value-of select="$baseClassName"/>()
        {   public final int value = param;
            public boolean hasValue()                                    {return true;}
            public String  getValue()                                    {return StringHelper.intToString(value);}
            public int     intValue()                                    {return value;}
            public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, value);}
        };
    }
    </xsl:when>
    <xsl:when test="@type='CHAR'">
    public static <xsl:value-of select="$baseClassName"/> create(final char param)
    {
        return new <xsl:value-of select="$baseClassName"/>()
        {   public final char value = param;
            public boolean hasValue()                                    {return true;}
            public String  getValue()                                    {return StringHelper.charToString(value);}
            public char    charValue()                                   {return value;}
            public void    accept(FixMessageBuilderIF fixMessageBuilder) {fixMessageBuilder.append(TagIDAsChars, value);}
        };
    }
    </xsl:when>
    <xsl:when test="@type='DOUBLE'">
    public static <xsl:value-of select="$baseClassName"/> create(final double param)
    {
        return new <xsl:value-of select="$baseClassName"/>()
        {   public final double value = param;
            public boolean hasValue()                        {return true;}
            public String  getValue()                        {return Double.toString(value);}
            public double  doubleValue()                     {return value;}
        };
    }
    </xsl:when>
    <xsl:when test="@type='PRICE'">
    public static <xsl:value-of select="$baseClassName"/> create(final PriceStruct param)
    {
        return new <xsl:value-of select="$baseClassName"/>()
        {   public final PriceStruct value = param;
            public boolean hasValue()                        {return true;}
            public String  getValue()                        {return PriceHelper.toString(value);}
            public PriceStruct priceStructValue()            {return value;}
        };
    }
    </xsl:when>
    <xsl:when test="@type='UTCDATE'">
    public static <xsl:value-of select="$baseClassName"/> create(final String param)
    {
        return new <xsl:value-of select="$baseClassName"/>()
        {   public final Date value = DateHelper.extractDateInFixUTCDateFormat(param);
            public boolean hasValue()                        {return value != null;}
            public String  getValue()                        {return DateHelper.stringizeDateInFixUTCDateFormat(value);}
            public Date    dateValue()                       {return value;}
        };
    }
    public static <xsl:value-of select="$baseClassName"/> create(final Date param)
    {
        return new <xsl:value-of select="$baseClassName"/>()
        {   public final Date value = param;
            public boolean hasValue()                        {return value != null;}
            public String  getValue()                        {return DateHelper.stringizeDateInFixUTCDateFormat(value);}
            public Date    dateValue()                       {return value;}
        };
    }
    </xsl:when>
    <xsl:when test="@type='UTCTIMEONLY'">
    public static <xsl:value-of select="$baseClassName"/> create(final String param)
    {
        return new <xsl:value-of select="$baseClassName"/>()
        {   public final Date value = DateHelper.extractDateInFixUTCTimeOnlyFormat(param);
            public boolean hasValue()                        {return value != null;}
            public String  getValue()                        {return DateHelper.stringizeDateInFixUTCTimeOnlyFormat(value);}
            public Date    dateValue()                       {return value;}
        };
    }
    public static <xsl:value-of select="$baseClassName"/> create(final Date param)
    {
        return new <xsl:value-of select="$baseClassName"/>()
        {   public final Date value = param;
            public boolean hasValue()                        {return value != null;}
            public String  getValue()                        {return DateHelper.stringizeDateInFixUTCTimeOnlyFormat(value);}
            public Date    dateValue()                       {return value;}
        };
    }
    </xsl:when>
    <xsl:when test="@type='UTCTIMESTAMP'">
    public static <xsl:value-of select="$baseClassName"/> create(final Date param)
    {
        return new <xsl:value-of select="$baseClassName"/>()
        {   public final Date value = param;
            public boolean hasValue()                        {return value != null;}
            public String  getValue()                        {return DateHelper.stringizeDateInFixUTCTimeStampFormat(value);}
            public Date    dateValue()                       {return value;}
        };
    }
    public static <xsl:value-of select="$baseClassName"/> create(final String param)
    {
        return new <xsl:value-of select="$baseClassName"/>()
        {   public final Date value = DateHelper.extractDateInFixUTCTimeStampFormat(param);
            public boolean hasValue()                        {return value != null;}
            public String  getValue()                        {return DateHelper.stringizeDateInFixUTCTimeStampFormat(value);}
            public Date    dateValue()                       {return value;}
        };
    }
    </xsl:when>
    <xsl:when test="@type='LOCALMKTDATE'">
    public static <xsl:value-of select="$baseClassName"/> create(final Date param)
    {
        return new <xsl:value-of select="$baseClassName"/>()
        {   public final Date value = param;
            public boolean hasValue()                        {return value != null;}
            public String  getValue()                        {return DateHelper.stringizeDateInFixLocalMktDateFormat(value);}
            public Date    dateValue()                       {return value;}
        };
    }
    </xsl:when>
    <xsl:otherwise>
        CAN'T COMPILE '<xsl:value-of select="@type"/>'
    </xsl:otherwise>
</xsl:choose>
</xsl:template>

<xsl:template name="fix:FixFieldClass_Function_Factory_IndividualFlyweights_UNUSED">
  <xsl:param name="baseClassName"/>
  <xsl:param name="longestDescription" select="0"/>
                                                                                                    <xsl:if test="position() = 1">
    public static <xsl:value-of select="$baseClassName"/> create(final char[] array, final int offset, final int length)
    {<xsl:text/>
                                                                                                    </xsl:if>
<xsl:choose>
    <xsl:when test="../@type='STRING'">
                                                                                                    <xsl:if test="position() = 1">
        final String param = new String(array, offset, length);
                                                                                                    </xsl:if>
        if (<xsl:value-of select="fix:rightPad(concat(@description, '.equals(param))'), $longestDescription+15)"/> return flyweight<xsl:value-of select="@description"/>();<xsl:text/>
                                                                                                    <xsl:if test="position() = last()">
                                                                                                    <xsl:choose>
                                                                                                    <xsl:when test="../@other_values_allowed = 'Y'">
        return new <xsl:value-of select="$baseClassName"/>()
        {       public String value = param;
                public boolean hasValue()                        {return value != null;}
                public String  getValue()                        {return value;}
                public String  getValueDescription()             {return value;}
        };<xsl:text/>
                                                                                                    </xsl:when>
                                                                                                    <xsl:otherwise>
        return null;
                                                                                                    </xsl:otherwise>
                                                                                                    </xsl:choose>
    }                                                                                               </xsl:if>
    </xsl:when>
    <xsl:when test="../@type='INT'">
                                                                                                    <xsl:if test="position() = 1">
        int param = IntegerHelper.parseInt(array, offset, length);
        if (param == IntegerHelper.INVALID_VALUE)
        {
            return null;
        }

        switch (param)
        {                                                                                           </xsl:if>
            case <xsl:value-of select="fix:rightPad(concat(@description, ':'), $longestDescription+1)"/> return flyweight<xsl:value-of select="@description"/>();<xsl:text/>
                                                                                                    <xsl:if test="position() = last()">
        }
                                                                                                    <xsl:choose>
                                                                                                    <xsl:when test="../@other_values_allowed = 'Y'">
        final int val = param;

        return new <xsl:value-of select="$baseClassName"/>()
        {       public int value = val;
                public boolean hasValue()                        {return true;}
                public String  getValue()                        {return StringHelper.intToString(value);}
                public int     intValue()                        {return <xsl:value-of select="@description"/>;}
        };<xsl:text/>
                                                                                                    </xsl:when>
                                                                                                    <xsl:otherwise>
        return null;
                                                                                                    </xsl:otherwise>
                                                                                                    </xsl:choose>
    }                                                                                               </xsl:if>
    </xsl:when>
    <xsl:when test="../@type='CHAR'">
                                                                                                    <xsl:if test="position() = 1">
        if (length == 1)
        {
            switch (array[offset])
            {                                                                                       </xsl:if>
                case <xsl:value-of select="fix:rightPad(concat(@description, ':'), $longestDescription+1)"/> return flyweight<xsl:value-of select="@description"/>();<xsl:text/>
                                                                                                    <xsl:if test="position() = last()">
            }
        }
                                                                                                    <xsl:choose>
                                                                                                    <xsl:when test="../@other_values_allowed = 'Y'">
        return new <xsl:value-of select="$baseClassName"/>()
        {       public char value = array[offset];
                public boolean hasValue()                        {return true;}
                public String  getValue()                        {return StringHelper.charToString(value);}
                public char    charValue()                       {return <xsl:value-of select="@description"/>;}
        };<xsl:text/>
                                                                                                    </xsl:when>
                                                                                                    <xsl:otherwise>
        return null;
                                                                                                    </xsl:otherwise>
                                                                                                    </xsl:choose>
    }                                                                                               </xsl:if>
    </xsl:when>
    <xsl:when test="../@type='MULTIPLEVALUESTRING'">
                                                                                                        <xsl:if test="position() = 1">
        <xsl:value-of select="if (last() &lt; 31) then 'int' else 'long'"/> bitmask = 0;

        for (int i = 0; i &lt; length; i++)
        {
            switch (array[offset + i])
            {                                                                                           </xsl:if>
                case <xsl:value-of select="@description"/>:
                    if (length == 1) return flyweight<xsl:value-of select="@description"/>();
                    bitmask |= bitmask_<xsl:value-of select="@description"/>;
                    break;<xsl:text/>
                                                                                                       <xsl:if test="position() = last()">
            }
        }

        if (bitmask == 0)
        {
            return null;
        }

        final <xsl:value-of select="if (last() &lt; 31) then 'int' else 'long'"/> bits = bitmask;

        return new <xsl:value-of select="$baseClassName"/>()
        {       public <xsl:value-of select="if (last() &lt; 31) then 'int' else 'long'"/> value = bits;
                public boolean hasValue()                        {return bits != <xsl:value-of select="if (last() &lt; 31) then '0' else '0L'"/>;}
                public String  getValue()                        {return StringHelper.number(value);}
        };<xsl:text/>
    }                                                                                                   </xsl:if>
    </xsl:when>
    <xsl:when test="../@type='BOOLEAN'">
                                                                                                    <xsl:if test="position() = 1">
        if (length == 1)
        {                                                                                           </xsl:if>
            if (array[offset] == char_<xsl:value-of select="fix:rightPad(concat(@description, ')'), $longestDescription+1)"/> return flyweight<xsl:value-of select="@description"/>();<xsl:text/>
                                                                                                    <xsl:if test="position() = last()">
        }

        return null;
    }                                                                                               </xsl:if>
    </xsl:when>
    <xsl:otherwise>
        CAN'T COMPILE <xsl:value-of select="../@type"/>
    }
    </xsl:otherwise>
</xsl:choose>
</xsl:template>

</xsl:stylesheet>
